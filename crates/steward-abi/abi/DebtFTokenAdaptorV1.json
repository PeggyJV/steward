{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_accountForInterest",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_frax",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_healthFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__ConstructorHealthFactorTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__ExternalReceiverBlocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "BaseAdaptor__PricingNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__Slippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__UserDepositsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__UserWithdrawsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fraxlendPair",
          "type": "address"
        }
      ],
      "name": "DebtFTokenAdaptor__CannotRepayNoDebt",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fraxlendPair",
          "type": "address"
        }
      ],
      "name": "DebtFTokenAdaptor__FraxlendPairPositionsMustBeTracked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fraxlendPair",
          "type": "address"
        }
      ],
      "name": "DebtFTokenAdaptor__HealthFactorTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCOUNT_FOR_INTEREST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FRAX",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "adaptorData",
          "type": "bytes"
        }
      ],
      "name": "assetOf",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "adaptorData",
          "type": "bytes"
        }
      ],
      "name": "assetsUsed",
      "outputs": [
        {
          "internalType": "contract ERC20[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "adaptorData",
          "type": "bytes"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFToken",
          "name": "fraxlendPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToBorrow",
          "type": "uint256"
        }
      ],
      "name": "borrowFromFraxlend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFToken",
          "name": "_fraxlendPair",
          "type": "address"
        }
      ],
      "name": "callAddInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDebt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFToken",
          "name": "_fraxlendPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayFraxlendDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdrawableFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60e060405234801561001057600080fd5b506040516115cb3803806115cb83398101604081905261002f9161007e565b61003881610052565b91151560a0526001600160a01b031660805260c0526100d2565b670e92596fd629000081101561007b576040516397ed5f4160e01b815260040160405180910390fd5b50565b60008060006060848603121561009357600080fd5b835180151581146100a357600080fd5b60208501519093506001600160a01b03811681146100c057600080fd5b80925050604084015190509250925092565b60805160a05160c0516114bc61010f6000396000818161015b01526102cd01526000818161011f015261037e0152600061021b01526114bc6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806389353a0911610097578063c9111bd711610066578063c9111bd714610255578063d3bfe76a14610268578063e170a9bf1461027b578063fa50e5d21461028e57600080fd5b806389353a09146101dc5780638b9b9d40146101e3578063aeffddde146101f6578063b0e4556f1461021657600080fd5b806369445c31116100d357806369445c311461019b5780636dd659fd146101ae57806378415365146101c15780637998a1c4146101d457600080fd5b80631586ffbb14610105578063198775571461011a5780631caff8b1146101565780633e032a3b1461018b575b600080fd5b610118610113366004610df0565b6102a1565b005b6101417f000000000000000000000000000000000000000000000000000000000000000081565b60405190151581526020015b60405180910390f35b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014d565b604051612328815260200161014d565b6101186101a9366004610ee8565b610320565b6101186101bc366004610f55565b610339565b61017d6101cf366004610f72565b61034e565b61017d6103aa565b6001610141565b6101186101f1366004610df0565b610413565b610209610204366004610f72565b6104c1565b60405161014d9190610fa7565b61023d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014d565b610118610263366004610ff4565b610524565b610118610276366004611074565b61053d565b61023d610289366004610f72565b610556565b61017d61029c3660046110ad565b61057f565b6102aa82610588565b6102b48183610742565b60006102bf836107a6565b90506102cb8382610814565b7f0000000000000000000000000000000000000000000000000000000000000000111561031b5760405163c4bbf5fd60e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b604051633204ed5b60e21b815260040160405180910390fd5b61034281610588565b61034b816108e1565b50565b600080828060200190518101906103659190611111565b905060006103738233610956565b90506103a2828260007f00000000000000000000000000000000000000000000000000000000000000006109c5565b949350505050565b60006040516020016103f89060208082526022908201527f467261784c656e642064656274546f6b656e56322041646170746f722056203160408201526102e360f41b606082015260800190565b60405160208183030381529060405280519060200120905090565b61041c82610588565b600061042783610a4b565b905060006104358284610aaf565b90506000610447858360006001610b30565b905060006104558630610956565b905080600003610483576040516378d1784d60e01b81526001600160a01b0387166004820152602401610312565b8181101561048f578091505b6104a56001600160a01b03851687600019610b70565b6104af8683610bed565b6104b98487610c20565b505050505050565b604080516001808252818301909252606091602080830190803683370190505090506104ec82610556565b816000815181106104ff576104ff61112e565b60200260200101906001600160a01b031690816001600160a01b031681525050919050565b604051635f5003c560e11b815260040160405180910390fd5b6105526001600160a01b038316826000610b70565b5050565b6000808280602001905181019061056d9190611111565b905061057881610a4b565b9392505050565b60005b92915050565b60006105926103aa565b604080516001600160a01b03851660208201526001910160408051601f19818403018152908290526105c8939291602001611144565b6040516020818303038152906040528051906020012090506000306001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190611111565b6001600160a01b03166309f7abd2836040518263ffffffff1660e01b815260040161067191815260200190565b602060405180830381865afa15801561068e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b291906111bc565b60405163024eefab60e61b815263ffffffff8216600482015290915030906393bbeac090602401602060405180830381865afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a91906111d7565b61031b57604051637d6840ef60e11b81526001600160a01b0384166004820152602401610312565b6040516372f89d8b60e11b815260048101839052600060248201523060448201526001600160a01b0382169063e5f13b16906064015b600060405180830381600087803b15801561079257600080fd5b505af11580156104b9573d6000803e3d6000fd5b6000816001600160a01b031663fbbbf94c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a91906111f9565b6080015192915050565b6000806108218430610956565b9050600061083285836001806109c5565b90508060000361084e57670e92596fd629000092505050610582565b600061085a8630610caf565b9050806000036108705760009350505050610582565b60008061087c88610ce1565b909250905060008383836108908b8961126d565b61089a9190611292565b6108a4919061126d565b6108ae9190611292565b905060006108bb8a610d58565b905060006108d282670de0b6b3a764000085610dbc565b9b9a5050505050505050505050565b604051631c6c959760e01b8152600060048201526001600160a01b03821690631c6c959790602401610180604051808303816000875af1158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d919061134a565b50505050505050565b604051634fd422df60e01b81526001600160a01b03828116600483015260009190841690634fd422df906024015b602060405180830381865afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190611410565b604051637ec4b57160e01b815260048101849052821515602482015281151560448201526000906001600160a01b03861690637ec4b571906064015b602060405180830381865afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611410565b95945050505050565b6000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190611111565b60006000198203610b29576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611410565b9050610582565b5080610582565b604051631c2591d360e01b815260048101849052821515602482015281151560448201526000906001600160a01b03861690631c2591d390606401610a01565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610be75760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610312565b50505050565b604051633d417d2d60e01b8152600481018290523060248201526001600160a01b03831690633d417d2d90604401610778565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190611410565b1115610552576105526001600160a01b038316826000610b70565b604051635ad7983160e11b81526001600160a01b0382811660048301526000919084169063b5af306290602401610984565b600080826001600160a01b0316639a295e736040518163ffffffff1660e01b815260040161010060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190611429565b509599919850909650505050505050565b6000816001600160a01b031663f384bd056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190611410565b828202811515841585830485141716610dd457600080fd5b0492915050565b6001600160a01b038116811461034b57600080fd5b60008060408385031215610e0357600080fd5b8235610e0e81610ddb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610e5557610e55610e1c565b60405290565b600082601f830112610e6c57600080fd5b813567ffffffffffffffff80821115610e8757610e87610e1c565b604051601f8301601f19908116603f01168101908282118183101715610eaf57610eaf610e1c565b81604052838152866020858801011115610ec857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610efd57600080fd5b83359250602084013567ffffffffffffffff80821115610f1c57600080fd5b610f2887838801610e5b565b93506040860135915080821115610f3e57600080fd5b50610f4b86828701610e5b565b9150509250925092565b600060208284031215610f6757600080fd5b813561057881610ddb565b600060208284031215610f8457600080fd5b813567ffffffffffffffff811115610f9b57600080fd5b6103a284828501610e5b565b6020808252825182820181905260009190848201906040850190845b81811015610fe85783516001600160a01b031683529284019291840191600101610fc3565b50909695505050505050565b6000806000806080858703121561100a57600080fd5b84359350602085013561101c81610ddb565b9250604085013567ffffffffffffffff8082111561103957600080fd5b61104588838901610e5b565b9350606087013591508082111561105b57600080fd5b5061106887828801610e5b565b91505092959194509250565b6000806040838503121561108757600080fd5b823561109281610ddb565b915060208301356110a281610ddb565b809150509250929050565b600080604083850312156110c057600080fd5b823567ffffffffffffffff808211156110d857600080fd5b6110e486838701610e5b565b935060208501359150808211156110fa57600080fd5b5061110785828601610e5b565b9150509250929050565b60006020828403121561112357600080fd5b815161057881610ddb565b634e487b7160e01b600052603260045260246000fd5b838152600060208415158184015260606040840152835180606085015260005b8181101561118057858101830151858201608001528201611164565b506000608082860101526080601f19601f83011685010192505050949350505050565b805163ffffffff811681146111b757600080fd5b919050565b6000602082840312156111ce57600080fd5b610578826111a3565b6000602082840312156111e957600080fd5b8151801515811461057857600080fd5b600060a0828403121561120b57600080fd5b611213610e32565b825161121e81610ddb565b815261122c602084016111a3565b602082015260408301516001600160b81b038116811461124b57600080fd5b6040820152606083810151908201526080928301519281019290925250919050565b808202811582820484141761058257634e487b7160e01b600052601160045260246000fd5b6000826112af57634e487b7160e01b600052601260045260246000fd5b500490565b805167ffffffffffffffff811681146111b757600080fd5b80516fffffffffffffffffffffffffffffffff811681146111b757600080fd5b6000604082840312156112fe57600080fd5b6040516040810181811067ffffffffffffffff8211171561132157611321610e1c565b604052905080611330836112cc565b815261133e602084016112cc565b60208201525092915050565b60008060008060008086880361018081121561136557600080fd5b87519650602088015195506040880151945060a0605f198201121561138957600080fd5b50611392610e32565b61139e606089016111a3565b81526113ac608089016111a3565b60208201526113bd60a089016112b4565b60408201526113ce60c089016112b4565b60608201526113df60e089016112b4565b608082015292506113f48861010089016112ec565b91506114048861014089016112ec565b90509295509295509295565b60006020828403121561142257600080fd5b5051919050565b600080600080600080600080610100898b03121561144657600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a5098509096509450909250905056fea26469706673582212203690b6a89e1aeb08c96997e57ad247970fb247b9d96f4c840cbb091955085fb264736f6c63430008150033",
    "sourceMap": "603:13583:193:-:0;;;3006:271;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3092:52;3130:13;3092:37;:52::i;:::-;3154:42;;;;;-1:-1:-1;;;;;3206:19:193;;;3235:35;;603:13583;;8769:233:187;2786:7;8873:19;:57;8869:126;;;8951:44;;-1:-1:-1;;;8951:44:187;;;;;;;;;;;8869:126;8769:233;:::o;14:513:266:-;99:6;107;115;168:2;156:9;147:7;143:23;139:32;136:52;;;184:1;181;174:12;136:52;216:9;210:16;269:5;262:13;255:21;248:5;245:32;235:60;;291:1;288;281:12;235:60;364:2;349:18;;343:25;314:5;;-1:-1:-1;;;;;;399:33:266;;387:46;;377:74;;447:1;444;437:12;377:74;470:7;460:17;;;517:2;506:9;502:18;496:25;486:35;;14:513;;;;;:::o;:::-;603:13583:193;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806389353a0911610097578063c9111bd711610066578063c9111bd714610255578063d3bfe76a14610268578063e170a9bf1461027b578063fa50e5d21461028e57600080fd5b806389353a09146101dc5780638b9b9d40146101e3578063aeffddde146101f6578063b0e4556f1461021657600080fd5b806369445c31116100d357806369445c311461019b5780636dd659fd146101ae57806378415365146101c15780637998a1c4146101d457600080fd5b80631586ffbb14610105578063198775571461011a5780631caff8b1146101565780633e032a3b1461018b575b600080fd5b610118610113366004610df0565b6102a1565b005b6101417f000000000000000000000000000000000000000000000000000000000000000081565b60405190151581526020015b60405180910390f35b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014d565b604051612328815260200161014d565b6101186101a9366004610ee8565b610320565b6101186101bc366004610f55565b610339565b61017d6101cf366004610f72565b61034e565b61017d6103aa565b6001610141565b6101186101f1366004610df0565b610413565b610209610204366004610f72565b6104c1565b60405161014d9190610fa7565b61023d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014d565b610118610263366004610ff4565b610524565b610118610276366004611074565b61053d565b61023d610289366004610f72565b610556565b61017d61029c3660046110ad565b61057f565b6102aa82610588565b6102b48183610742565b60006102bf836107a6565b90506102cb8382610814565b7f0000000000000000000000000000000000000000000000000000000000000000111561031b5760405163c4bbf5fd60e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b604051633204ed5b60e21b815260040160405180910390fd5b61034281610588565b61034b816108e1565b50565b600080828060200190518101906103659190611111565b905060006103738233610956565b90506103a2828260007f00000000000000000000000000000000000000000000000000000000000000006109c5565b949350505050565b60006040516020016103f89060208082526022908201527f467261784c656e642064656274546f6b656e56322041646170746f722056203160408201526102e360f41b606082015260800190565b60405160208183030381529060405280519060200120905090565b61041c82610588565b600061042783610a4b565b905060006104358284610aaf565b90506000610447858360006001610b30565b905060006104558630610956565b905080600003610483576040516378d1784d60e01b81526001600160a01b0387166004820152602401610312565b8181101561048f578091505b6104a56001600160a01b03851687600019610b70565b6104af8683610bed565b6104b98487610c20565b505050505050565b604080516001808252818301909252606091602080830190803683370190505090506104ec82610556565b816000815181106104ff576104ff61112e565b60200260200101906001600160a01b031690816001600160a01b031681525050919050565b604051635f5003c560e11b815260040160405180910390fd5b6105526001600160a01b038316826000610b70565b5050565b6000808280602001905181019061056d9190611111565b905061057881610a4b565b9392505050565b60005b92915050565b60006105926103aa565b604080516001600160a01b03851660208201526001910160408051601f19818403018152908290526105c8939291602001611144565b6040516020818303038152906040528051906020012090506000306001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190611111565b6001600160a01b03166309f7abd2836040518263ffffffff1660e01b815260040161067191815260200190565b602060405180830381865afa15801561068e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b291906111bc565b60405163024eefab60e61b815263ffffffff8216600482015290915030906393bbeac090602401602060405180830381865afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a91906111d7565b61031b57604051637d6840ef60e11b81526001600160a01b0384166004820152602401610312565b6040516372f89d8b60e11b815260048101839052600060248201523060448201526001600160a01b0382169063e5f13b16906064015b600060405180830381600087803b15801561079257600080fd5b505af11580156104b9573d6000803e3d6000fd5b6000816001600160a01b031663fbbbf94c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a91906111f9565b6080015192915050565b6000806108218430610956565b9050600061083285836001806109c5565b90508060000361084e57670e92596fd629000092505050610582565b600061085a8630610caf565b9050806000036108705760009350505050610582565b60008061087c88610ce1565b909250905060008383836108908b8961126d565b61089a9190611292565b6108a4919061126d565b6108ae9190611292565b905060006108bb8a610d58565b905060006108d282670de0b6b3a764000085610dbc565b9b9a5050505050505050505050565b604051631c6c959760e01b8152600060048201526001600160a01b03821690631c6c959790602401610180604051808303816000875af1158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d919061134a565b50505050505050565b604051634fd422df60e01b81526001600160a01b03828116600483015260009190841690634fd422df906024015b602060405180830381865afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190611410565b604051637ec4b57160e01b815260048101849052821515602482015281151560448201526000906001600160a01b03861690637ec4b571906064015b602060405180830381865afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611410565b95945050505050565b6000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190611111565b60006000198203610b29576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611410565b9050610582565b5080610582565b604051631c2591d360e01b815260048101849052821515602482015281151560448201526000906001600160a01b03861690631c2591d390606401610a01565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610be75760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610312565b50505050565b604051633d417d2d60e01b8152600481018290523060248201526001600160a01b03831690633d417d2d90604401610778565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190611410565b1115610552576105526001600160a01b038316826000610b70565b604051635ad7983160e11b81526001600160a01b0382811660048301526000919084169063b5af306290602401610984565b600080826001600160a01b0316639a295e736040518163ffffffff1660e01b815260040161010060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190611429565b509599919850909650505050505050565b6000816001600160a01b031663f384bd056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190611410565b828202811515841585830485141716610dd457600080fd5b0492915050565b6001600160a01b038116811461034b57600080fd5b60008060408385031215610e0357600080fd5b8235610e0e81610ddb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610e5557610e55610e1c565b60405290565b600082601f830112610e6c57600080fd5b813567ffffffffffffffff80821115610e8757610e87610e1c565b604051601f8301601f19908116603f01168101908282118183101715610eaf57610eaf610e1c565b81604052838152866020858801011115610ec857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610efd57600080fd5b83359250602084013567ffffffffffffffff80821115610f1c57600080fd5b610f2887838801610e5b565b93506040860135915080821115610f3e57600080fd5b50610f4b86828701610e5b565b9150509250925092565b600060208284031215610f6757600080fd5b813561057881610ddb565b600060208284031215610f8457600080fd5b813567ffffffffffffffff811115610f9b57600080fd5b6103a284828501610e5b565b6020808252825182820181905260009190848201906040850190845b81811015610fe85783516001600160a01b031683529284019291840191600101610fc3565b50909695505050505050565b6000806000806080858703121561100a57600080fd5b84359350602085013561101c81610ddb565b9250604085013567ffffffffffffffff8082111561103957600080fd5b61104588838901610e5b565b9350606087013591508082111561105b57600080fd5b5061106887828801610e5b565b91505092959194509250565b6000806040838503121561108757600080fd5b823561109281610ddb565b915060208301356110a281610ddb565b809150509250929050565b600080604083850312156110c057600080fd5b823567ffffffffffffffff808211156110d857600080fd5b6110e486838701610e5b565b935060208501359150808211156110fa57600080fd5b5061110785828601610e5b565b9150509250929050565b60006020828403121561112357600080fd5b815161057881610ddb565b634e487b7160e01b600052603260045260246000fd5b838152600060208415158184015260606040840152835180606085015260005b8181101561118057858101830151858201608001528201611164565b506000608082860101526080601f19601f83011685010192505050949350505050565b805163ffffffff811681146111b757600080fd5b919050565b6000602082840312156111ce57600080fd5b610578826111a3565b6000602082840312156111e957600080fd5b8151801515811461057857600080fd5b600060a0828403121561120b57600080fd5b611213610e32565b825161121e81610ddb565b815261122c602084016111a3565b602082015260408301516001600160b81b038116811461124b57600080fd5b6040820152606083810151908201526080928301519281019290925250919050565b808202811582820484141761058257634e487b7160e01b600052601160045260246000fd5b6000826112af57634e487b7160e01b600052601260045260246000fd5b500490565b805167ffffffffffffffff811681146111b757600080fd5b80516fffffffffffffffffffffffffffffffff811681146111b757600080fd5b6000604082840312156112fe57600080fd5b6040516040810181811067ffffffffffffffff8211171561132157611321610e1c565b604052905080611330836112cc565b815261133e602084016112cc565b60208201525092915050565b60008060008060008086880361018081121561136557600080fd5b87519650602088015195506040880151945060a0605f198201121561138957600080fd5b50611392610e32565b61139e606089016111a3565b81526113ac608089016111a3565b60208201526113bd60a089016112b4565b60408201526113ce60c089016112b4565b60608201526113df60e089016112b4565b608082015292506113f48861010089016112ec565b91506114048861014089016112ec565b90509295509295509295565b60006020828403121561142257600080fd5b5051919050565b600080600080600080600080610100898b03121561144657600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a5098509096509450909250905056fea26469706673582212203690b6a89e1aeb08c96997e57ad247970fb247b9d96f4c840cbb091955085fb264736f6c63430008150033",
    "sourceMap": "603:13583:193:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6289:560;;;;;;:::i;:::-;;:::i;:::-;;2755:42;;;;;;;;670:14:266;;663:22;645:41;;633:2;618:18;2755:42:193;;;;;;;;2955:44;;;;;;;;843:25:266;;;831:2;816:18;2955:44:193;697:177:266;2441:78:187;;;2507:5;1023:42:266;;1011:2;996:18;2441:78:187;879:192:266;4056:136:193;;;;;;:::i;:::-;;:::i;8942:139::-;;;;;;:::i;:::-;;:::i;4933:323::-;;;;;;:::i;:::-;;:::i;3696:152::-;;;:::i;5683:82::-;5754:4;5683:82;;7262:1157;;;;;;:::i;:::-;;:::i;5960:180:187:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2403:27:193:-;;;;;;;;-1:-1:-1;;;;;4437:32:266;;;4419:51;;4407:2;4392:18;2403:27:193;4258:218:266;4280:147:193;;;;;;:::i;:::-;;:::i;9230:107:187:-;;;;;;:::i;:::-;;:::i;5390:210:193:-;;;;;;:::i;:::-;;:::i;4601:118::-;;;;;;:::i;:::-;;:::i;6289:560::-;6380:29;6396:12;6380:15;:29::i;:::-;6419:42;6432:14;6448:12;6419;:42::i;:::-;6525:21;6549:34;6570:12;6549:20;:34::i;:::-;6525:58;;6703:45;6720:12;6734:13;6703:16;:45::i;:::-;6680:19;:69;6676:167;;;6772:60;;-1:-1:-1;;;6772:60:193;;-1:-1:-1;;;;;4437:32:266;;6772:60:193;;;4419:51:266;4392:18;;6772:60:193;;;;;;;;6676:167;6370:479;6289:560;;:::o;4056:136::-;4148:37;;-1:-1:-1;;;4148:37:193;;;;;;;;;;;8942:139;9007:30;9023:13;9007:15;:30::i;:::-;9047:27;9060:13;9047:12;:27::i;:::-;8942:139;:::o;4933:323::-;5008:7;5027:20;5061:11;5050:34;;;;;;;;;;;;:::i;:::-;5027:57;;5094:20;5117:43;5135:12;5149:10;5117:17;:43::i;:::-;5094:66;;5177:72;5193:12;5207;5221:5;5228:20;5177:15;:72::i;:::-;5170:79;4933:323;-1:-1:-1;;;;4933:323:193:o;3696:152::-;3756:7;3792:48;;;;;;6900:2:266;6882:21;;;6939:2;6919:18;;;6912:30;6978:34;6973:2;6958:18;;6951:62;-1:-1:-1;;;7044:2:266;7029:18;;7022:32;7086:3;7071:19;;6698:398;3792:48:193;;;;;;;;;;;;;3782:59;;;;;;3775:66;;3696:152;:::o;7262:1157::-;7360:30;7376:13;7360:15;:30::i;:::-;7400:18;7427:33;7446:13;7427:18;:33::i;:::-;7400:61;;7471:24;7498:50;7512:12;7526:21;7498:13;:50::i;:::-;7471:77;;7558:21;7582:60;7597:13;7612:16;7630:5;7637:4;7582:14;:60::i;:::-;7558:84;;7652:27;7682:47;7700:13;7723:4;7682:17;:47::i;:::-;7652:77;;7792:19;7815:1;7792:24;7788:97;;7825:60;;-1:-1:-1;;;7825:60:193;;-1:-1:-1;;;;;4437:32:266;;7825:60:193;;;4419:51:266;4392:18;;7825:60:193;4258:218:266;7788:97:193;8137:13;8115:19;:35;8111:101;;;8182:19;8166:35;;8111:101;8221:67;-1:-1:-1;;;;;8221:24:193;;8254:13;-1:-1:-1;;8221:24:193;:67::i;:::-;8299:41;8311:13;8326;8299:11;:41::i;:::-;8351:61;8375:12;8397:13;8351:23;:61::i;:::-;7350:1069;;;;7262:1157;;:::o;5960:180:187:-;6077:14;;;6089:1;6077:14;;;;;;;;;6035:21;;6077:14;;;;;;;;;;;-1:-1:-1;6077:14:187;6068:23;;6113:20;6121:11;6113:7;:20::i;:::-;6101:6;6108:1;6101:9;;;;;;;;:::i;:::-;;;;;;:32;-1:-1:-1;;;;;6101:32:187;;;-1:-1:-1;;;;;6101:32:187;;;;;5960:180;;;:::o;4280:147:193:-;4382:38;;-1:-1:-1;;;4382:38:193;;;;;;;;;;;9230:107:187;9301:29;-1:-1:-1;;;;;9301:17:187;;9319:7;9328:1;9301:17;:29::i;:::-;9230:107;;:::o;5390:210:193:-;5463:5;5480:20;5514:11;5503:34;;;;;;;;;;;;:::i;:::-;5480:57;;5560:32;5579:12;5560:18;:32::i;:::-;5547:46;5390:210;-1:-1:-1;;;5390:210:193:o;4601:118::-;4685:7;4601:118;;;;;:::o;9326:444::-;9398:20;9442:12;:10;:12::i;:::-;9462:34;;;-1:-1:-1;;;;;4437:32:266;;9462:34:193;;;4419:51:266;9456:4:193;;4392:18:266;9462:34:193;;;-1:-1:-1;;9462:34:193;;;;;;;;;;9431:66;;;;9462:34;9431:66;;:::i;:::-;;;;;;;;;;;;;9421:77;;;;;;9398:100;;9508:17;9543:4;-1:-1:-1;;;;;9528:30:193;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9528:60:193;;9589:12;9528:74;;;;;;;;;;;;;843:25:266;;831:2;816:18;;697:177;9528:74:193;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9617:48;;-1:-1:-1;;;9617:48:193;;1053:10:266;1041:23;;9617:48:193;;;1023:42:266;9508:94:193;;-1:-1:-1;9632:4:193;;9617:36;;996:18:266;;9617:48:193;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9612:151;;9686:77;;-1:-1:-1;;;9686:77:193;;-1:-1:-1;;;;;4437:32:266;;9686:77:193;;;4419:51:266;4392:18;;9686:77:193;4258:218:266;13115:312:193;13210:58;;-1:-1:-1;;;13210:58:193;;;;;9295:25:266;;;13251:1:193;9336:18:266;;;9329:34;13262:4:193;9379:18:266;;;9372:60;-1:-1:-1;;;;;13210:25:193;;;;;9268:18:266;;13210:58:193;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13658:182;13737:20;13784:13;-1:-1:-1;;;;;13784:30:193;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;;;;13658:182;-1:-1:-1;;13658:182:193:o;1173:1164:197:-;1276:7;1333:22;1358:47;1376:13;1399:4;1358:17;:47::i;:::-;1333:72;;1415:23;1441:58;1457:13;1472:14;1488:4;1494;1441:15;:58::i;:::-;1415:84;;1638:15;1657:1;1638:20;1634:40;;1667:7;1660:14;;;;;;1634:40;1684:25;1712:52;1735:13;1758:4;1712:22;:52::i;:::-;1684:80;;1778:17;1799:1;1778:22;1774:36;;1809:1;1802:8;;;;;;;1774:36;1822:21;1845:26;1875:28;1889:13;1875;:28::i;:::-;1821:82;;-1:-1:-1;1821:82:197;-1:-1:-1;1913:26:197;2031:17;1821:82;;1945:31;1963:13;1945:15;:31;:::i;:::-;1944:54;;;;:::i;:::-;1943:72;;;;:::i;:::-;1942:106;;;;:::i;:::-;1913:135;;2099:26;2128:22;2136:13;2128:7;:22::i;:::-;2099:51;-1:-1:-1;2191:17:197;2211:55;2099:51;2241:4;2247:18;2211:29;:55::i;:::-;2191:75;1173:1164;-1:-1:-1;;;;;;;;;;;1173:1164:197:o;11969:109:193:-;12040:31;;-1:-1:-1;;;12040:31:193;;12065:5;12040:31;;;645:41:266;-1:-1:-1;;;;;12040:24:193;;;;;618:18:266;;12040:31:193;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;11969:109;:::o;3388:257:197:-;3552:37;;-1:-1:-1;;;3552:37:197;;-1:-1:-1;;;;;4437:32:266;;;3552:37:197;;;4419:51:266;3506:27:197;;3552:30;;;;;;4392:18:266;;3552:37:197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2906:270::-;3104:65;;-1:-1:-1;;;3104:65:197;;;;;13149:25:266;;;13217:14;;13210:22;13190:18;;;13183:50;13276:14;;13269:22;13249:18;;;13242:50;3078:7:197;;-1:-1:-1;;;;;3104:28:197;;;;;13122:18:266;;3104:65:197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3097:72;2906:270;-1:-1:-1;;;;;2906:270:197:o;11570:142:193:-;11652:13;11684;-1:-1:-1;;;;;11684:19:193;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7842:207:187:-;7925:7;-1:-1:-1;;7948:6:187;:27;7944:98;;7984:30;;-1:-1:-1;;;7984:30:187;;8008:4;7984:30;;;4419:51:266;-1:-1:-1;;;;;7984:15:187;;;;;4392:18:266;;7984:30:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7977:37;;;;7944:98;-1:-1:-1;8036:6:187;8029:13;;12642:248:193;12829:54;;-1:-1:-1;;;12829:54:193;;;;;13149:25:266;;;13217:14;;13210:22;13190:18;;;13183:50;13276:14;;13269:22;13249:18;;;13242:50;12803:7:193;;-1:-1:-1;;;;;12829:20:193;;;;;13122:18:266;;12829:54:193;12959:339:266;4455:1497:65;4566:12;4736:4;4730:11;-1:-1:-1;;;4859:17:65;4852:93;4992:2;4988:1;4969:17;4965:25;4958:37;5072:6;5067:2;5048:17;5044:26;5037:42;5874:2;5871:1;5867:2;5848:17;5845:1;5838:5;5831;5826:51;5395:16;5388:24;5382:2;5364:16;5361:24;5357:1;5353;5347:8;5344:15;5340:46;5337:76;5137:754;5126:765;;;5919:7;5911:34;;;;-1:-1:-1;;;5911:34:65;;13770:2:266;5911:34:65;;;13752:21:266;13809:2;13789:18;;;13782:30;-1:-1:-1;;;13828:18:266;;;13821:44;13882:18;;5911:34:65;13568:338:266;5911:34:65;4556:1396;4455:1497;;;:::o;14029:155:193:-;14123:54;;-1:-1:-1;;;14123:54:193;;;;;14085:25:266;;;14171:4:193;14126:18:266;;;14119:60;-1:-1:-1;;;;;14123:24:193;;;;;14058:18:266;;14123:54:193;13911:274:266;8184:167:187;8270:39;;-1:-1:-1;;;8270:39:187;;8294:4;8270:39;;;14402:34:266;-1:-1:-1;;;;;14472:15:266;;;14452:18;;;14445:43;8312:1:187;;8270:15;;;;;;14337:18:266;;8270:39:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;8266:78;;;8315:29;-1:-1:-1;;;;;8315:17:187;;8333:7;8342:1;8315:17;:29::i;3894:216:197:-;4061:42;;-1:-1:-1;;;4061:42:197;;-1:-1:-1;;;;;4437:32:266;;;4061:42:197;;;4419:51:266;4017:25:197;;4061:35;;;;;;4392:18:266;;4061:42:197;4258:218:266;4116:237:197;4207:21;4230:26;4318:13;-1:-1:-1;;;;;4318:26:197;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4268:78:197;;;;-1:-1:-1;4116:237:197;;-1:-1:-1;;;;;;;4116:237:197:o;4359:135::-;4430:14;4465:13;-1:-1:-1;;;;;4465:20:197;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1331:505:225:-;1507:9;;;1638:19;;1631:27;1663:9;;1677;;;1674:16;;1660:31;1627:65;1617:121;;1722:1;1719;1712:12;1617:121;1801:19;;1331:505;-1:-1:-1;;1331:505:225:o;14:140:266:-;-1:-1:-1;;;;;98:31:266;;88:42;;78:70;;144:1;141;134:12;159:341;244:6;252;305:2;293:9;284:7;280:23;276:32;273:52;;;321:1;318;311:12;273:52;360:9;347:23;379:40;413:5;379:40;:::i;:::-;438:5;490:2;475:18;;;;462:32;;-1:-1:-1;;;159:341:266:o;1076:127::-;1137:10;1132:3;1128:20;1125:1;1118:31;1168:4;1165:1;1158:15;1192:4;1189:1;1182:15;1208:247;1275:2;1269:9;1317:3;1305:16;;1351:18;1336:34;;1372:22;;;1333:62;1330:88;;;1398:18;;:::i;:::-;1434:2;1427:22;1208:247;:::o;1460:718::-;1502:5;1555:3;1548:4;1540:6;1536:17;1532:27;1522:55;;1573:1;1570;1563:12;1522:55;1609:6;1596:20;1635:18;1672:2;1668;1665:10;1662:36;;;1678:18;;:::i;:::-;1753:2;1747:9;1721:2;1807:13;;-1:-1:-1;;1803:22:266;;;1827:2;1799:31;1795:40;1783:53;;;1851:18;;;1871:22;;;1848:46;1845:72;;;1897:18;;:::i;:::-;1937:10;1933:2;1926:22;1972:2;1964:6;1957:18;2018:3;2011:4;2006:2;1998:6;1994:15;1990:26;1987:35;1984:55;;;2035:1;2032;2025:12;1984:55;2099:2;2092:4;2084:6;2080:17;2073:4;2065:6;2061:17;2048:54;2146:1;2139:4;2134:2;2126:6;2122:15;2118:26;2111:37;2166:6;2157:15;;;;;;1460:718;;;;:::o;2183:607::-;2278:6;2286;2294;2347:2;2335:9;2326:7;2322:23;2318:32;2315:52;;;2363:1;2360;2353:12;2315:52;2399:9;2386:23;2376:33;;2460:2;2449:9;2445:18;2432:32;2483:18;2524:2;2516:6;2513:14;2510:34;;;2540:1;2537;2530:12;2510:34;2563:49;2604:7;2595:6;2584:9;2580:22;2563:49;:::i;:::-;2553:59;;2665:2;2654:9;2650:18;2637:32;2621:48;;2694:2;2684:8;2681:16;2678:36;;;2710:1;2707;2700:12;2678:36;;2733:51;2776:7;2765:8;2754:9;2750:24;2733:51;:::i;:::-;2723:61;;;2183:607;;;;;:::o;2795:273::-;2871:6;2924:2;2912:9;2903:7;2899:23;2895:32;2892:52;;;2940:1;2937;2930:12;2892:52;2979:9;2966:23;2998:40;3032:5;2998:40;:::i;3073:320::-;3141:6;3194:2;3182:9;3173:7;3169:23;3165:32;3162:52;;;3210:1;3207;3200:12;3162:52;3250:9;3237:23;3283:18;3275:6;3272:30;3269:50;;;3315:1;3312;3305:12;3269:50;3338:49;3379:7;3370:6;3359:9;3355:22;3338:49;:::i;3580:673::-;3766:2;3818:21;;;3888:13;;3791:18;;;3910:22;;;3737:4;;3766:2;3989:15;;;;3963:2;3948:18;;;3737:4;4032:195;4046:6;4043:1;4040:13;4032:195;;;4111:13;;-1:-1:-1;;;;;4107:39:266;4095:52;;4202:15;;;;4167:12;;;;4143:1;4061:9;4032:195;;;-1:-1:-1;4244:3:266;;3580:673;-1:-1:-1;;;;;;3580:673:266:o;4481:752::-;4585:6;4593;4601;4609;4662:3;4650:9;4641:7;4637:23;4633:33;4630:53;;;4679:1;4676;4669:12;4630:53;4715:9;4702:23;4692:33;;4775:2;4764:9;4760:18;4747:32;4788:40;4822:5;4788:40;:::i;:::-;4847:5;-1:-1:-1;4903:2:266;4888:18;;4875:32;4926:18;4956:14;;;4953:34;;;4983:1;4980;4973:12;4953:34;5006:49;5047:7;5038:6;5027:9;5023:22;5006:49;:::i;:::-;4996:59;;5108:2;5097:9;5093:18;5080:32;5064:48;;5137:2;5127:8;5124:16;5121:36;;;5153:1;5150;5143:12;5121:36;;5176:51;5219:7;5208:8;5197:9;5193:24;5176:51;:::i;:::-;5166:61;;;4481:752;;;;;;;:::o;5238:421::-;5321:6;5329;5382:2;5370:9;5361:7;5357:23;5353:32;5350:52;;;5398:1;5395;5388:12;5350:52;5437:9;5424:23;5456:40;5490:5;5456:40;:::i;:::-;5515:5;-1:-1:-1;5572:2:266;5557:18;;5544:32;5585:42;5544:32;5585:42;:::i;:::-;5646:7;5636:17;;;5238:421;;;;;:::o;5664:539::-;5750:6;5758;5811:2;5799:9;5790:7;5786:23;5782:32;5779:52;;;5827:1;5824;5817:12;5779:52;5867:9;5854:23;5896:18;5937:2;5929:6;5926:14;5923:34;;;5953:1;5950;5943:12;5923:34;5976:49;6017:7;6008:6;5997:9;5993:22;5976:49;:::i;:::-;5966:59;;6078:2;6067:9;6063:18;6050:32;6034:48;;6107:2;6097:8;6094:16;6091:36;;;6123:1;6120;6113:12;6091:36;;6146:51;6189:7;6178:8;6167:9;6163:24;6146:51;:::i;:::-;6136:61;;;5664:539;;;;;:::o;6416:277::-;6503:6;6556:2;6544:9;6535:7;6531:23;6527:32;6524:52;;;6572:1;6569;6562:12;6524:52;6604:9;6598:16;6623:40;6657:5;6623:40;:::i;7101:127::-;7162:10;7157:3;7153:20;7150:1;7143:31;7193:4;7190:1;7183:15;7217:4;7214:1;7207:15;7233:701;7430:6;7419:9;7412:25;7393:4;7456:2;7508:6;7501:14;7494:22;7489:2;7478:9;7474:18;7467:50;7553:2;7548;7537:9;7533:18;7526:30;7585:6;7579:13;7628:6;7623:2;7612:9;7608:18;7601:34;7653:1;7663:141;7677:6;7674:1;7671:13;7663:141;;;7773:14;;;7769:23;;7763:30;7738:17;;;7757:3;7734:27;7727:67;7692:10;;7663:141;;;7667:3;7854:1;7848:3;7839:6;7828:9;7824:22;7820:32;7813:43;7924:3;7917:2;7913:7;7908:2;7900:6;7896:15;7892:29;7881:9;7877:45;7873:55;7865:63;;;;7233:701;;;;;;:::o;8222:167::-;8300:13;;8353:10;8342:22;;8332:33;;8322:61;;8379:1;8376;8369:12;8322:61;8222:167;;;:::o;8394:206::-;8463:6;8516:2;8504:9;8495:7;8491:23;8487:32;8484:52;;;8532:1;8529;8522:12;8484:52;8555:39;8584:9;8555:39;:::i;8803:277::-;8870:6;8923:2;8911:9;8902:7;8898:23;8894:32;8891:52;;;8939:1;8936;8929:12;8891:52;8971:9;8965:16;9024:5;9017:13;9010:21;9003:5;9000:32;8990:60;;9046:1;9043;9036:12;9443:741;9548:6;9601:3;9589:9;9580:7;9576:23;9572:33;9569:53;;;9618:1;9615;9608:12;9569:53;9644:17;;:::i;:::-;9691:9;9685:16;9710:42;9744:7;9710:42;:::i;:::-;9761:22;;9815:48;9859:2;9844:18;;9815:48;:::i;:::-;9810:2;9799:14;;9792:72;9909:2;9894:18;;9888:25;-1:-1:-1;;;;;9944:33:266;;9932:46;;9922:74;;9992:1;9989;9982:12;9922:74;10023:2;10012:14;;10005:31;10089:2;10074:18;;;10068:25;10052:14;;;10045:49;10148:3;10133:19;;;10127:26;10110:15;;;10103:51;;;;-1:-1:-1;10016:5:266;9443:741;-1:-1:-1;9443:741:266:o;10189:265::-;10262:9;;;10293;;10310:15;;;10304:22;;10290:37;10280:168;;10370:10;10365:3;10361:20;10358:1;10351:31;10405:4;10402:1;10395:15;10433:4;10430:1;10423:15;10459:217;10499:1;10525;10515:132;;10569:10;10564:3;10560:20;10557:1;10550:31;10604:4;10601:1;10594:15;10632:4;10629:1;10622:15;10515:132;-1:-1:-1;10661:9:266;;10459:217::o;10681:175::-;10759:13;;10812:18;10801:30;;10791:41;;10781:69;;10846:1;10843;10836:12;10861:192;10940:13;;10993:34;10982:46;;10972:57;;10962:85;;11043:1;11040;11033:12;11058:526;11128:5;11176:4;11164:9;11159:3;11155:19;11151:30;11148:50;;;11194:1;11191;11184:12;11148:50;11227:4;11221:11;11271:4;11263:6;11259:17;11342:6;11330:10;11327:22;11306:18;11294:10;11291:34;11288:62;11285:88;;;11353:18;;:::i;:::-;11389:4;11382:24;11424:6;-1:-1:-1;11424:6:266;11454:40;11484:9;11454:40;:::i;:::-;11446:6;11439:56;11528:49;11573:2;11562:9;11558:18;11528:49;:::i;:::-;11523:2;11515:6;11511:15;11504:74;;11058:526;;;;:::o;11589:1176::-;11800:6;11808;11816;11824;11832;11840;11884:9;11875:7;11871:23;11914:3;11910:2;11906:12;11903:32;;;11931:1;11928;11921:12;11903:32;11960:9;11954:16;11944:26;;12010:2;11999:9;11995:18;11989:25;11979:35;;12054:2;12043:9;12039:18;12033:25;12023:35;;12092:4;12086:2;12082:7;12078:2;12074:16;12070:27;12067:47;;;12110:1;12107;12100:12;12067:47;;12136:17;;:::i;:::-;12176:48;12220:2;12209:9;12205:18;12176:48;:::i;:::-;12169:5;12162:63;12257:49;12301:3;12290:9;12286:19;12257:49;:::i;:::-;12252:2;12245:5;12241:14;12234:73;12339:50;12383:4;12372:9;12368:20;12339:50;:::i;:::-;12334:2;12327:5;12323:14;12316:74;12422:49;12466:3;12455:9;12451:19;12422:49;:::i;:::-;12417:2;12410:5;12406:14;12399:73;12505:49;12549:3;12538:9;12534:19;12505:49;:::i;:::-;12499:3;12488:15;;12481:74;12492:5;-1:-1:-1;12598:71:266;12661:7;12655:3;12640:19;;12598:71;:::i;:::-;12588:81;;12688:71;12751:7;12745:3;12734:9;12730:19;12688:71;:::i;:::-;12678:81;;11589:1176;;;;;;;;:::o;12770:184::-;12840:6;12893:2;12881:9;12872:7;12868:23;12864:32;12861:52;;;12909:1;12906;12899:12;12861:52;-1:-1:-1;12932:16:266;;12770:184;-1:-1:-1;12770:184:266:o;14499:616::-;14632:6;14640;14648;14656;14664;14672;14680;14688;14741:3;14729:9;14720:7;14716:23;14712:33;14709:53;;;14758:1;14755;14748:12;14709:53;-1:-1:-1;;14781:16:266;;14837:2;14822:18;;14816:25;14881:2;14866:18;;14860:25;14925:2;14910:18;;14904:25;14969:3;14954:19;;14948:26;15014:3;14999:19;;14993:26;15059:3;15044:19;;15038:26;15104:3;15089:19;;;15083:26;14781:16;;14816:25;;-1:-1:-1;14860:25:266;;14904;;-1:-1:-1;14948:26:266;-1:-1:-1;14993:26:266;;-1:-1:-1;15038:26:266;-1:-1:-1;15083:26:266;;-1:-1:-1;14499:616:266;-1:-1:-1;14499:616:266:o",
    "linkReferences": {},
    "immutableReferences": {
      "78959": [
        {
          "start": 539,
          "length": 32
        }
      ],
      "78962": [
        {
          "start": 287,
          "length": 32
        },
        {
          "start": 894,
          "length": 32
        }
      ],
      "78965": [
        {
          "start": 347,
          "length": 32
        },
        {
          "start": 717,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ACCOUNT_FOR_INTEREST()": "19877557",
    "FRAX()": "b0e4556f",
    "assetOf(bytes)": "e170a9bf",
    "assetsUsed(bytes)": "aeffddde",
    "balanceOf(bytes)": "78415365",
    "borrowFromFraxlend(address,uint256)": "1586ffbb",
    "callAddInterest(address)": "6dd659fd",
    "deposit(uint256,bytes,bytes)": "69445c31",
    "identifier()": "7998a1c4",
    "isDebt()": "89353a09",
    "minimumHealthFactor()": "1caff8b1",
    "repayFraxlendDebt(address,uint256)": "8b9b9d40",
    "revokeApproval(address,address)": "d3bfe76a",
    "slippage()": "3e032a3b",
    "withdraw(uint256,address,bytes,bytes)": "c9111bd7",
    "withdrawableFrom(bytes,bytes)": "fa50e5d2"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_accountForInterest\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_frax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseAdaptor__ConstructorHealthFactorTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseAdaptor__ExternalReceiverBlocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BaseAdaptor__PricingNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseAdaptor__Slippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseAdaptor__UserDepositsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseAdaptor__UserWithdrawsNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fraxlendPair\",\"type\":\"address\"}],\"name\":\"DebtFTokenAdaptor__CannotRepayNoDebt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fraxlendPair\",\"type\":\"address\"}],\"name\":\"DebtFTokenAdaptor__FraxlendPairPositionsMustBeTracked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fraxlendPair\",\"type\":\"address\"}],\"name\":\"DebtFTokenAdaptor__HealthFactorTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCOUNT_FOR_INTEREST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRAX\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"adaptorData\",\"type\":\"bytes\"}],\"name\":\"assetOf\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"adaptorData\",\"type\":\"bytes\"}],\"name\":\"assetsUsed\",\"outputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"adaptorData\",\"type\":\"bytes\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFToken\",\"name\":\"fraxlendPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBorrow\",\"type\":\"uint256\"}],\"name\":\"borrowFromFraxlend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFToken\",\"name\":\"_fraxlendPair\",\"type\":\"address\"}],\"name\":\"callAddInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFToken\",\"name\":\"_fraxlendPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenRepayAmount\",\"type\":\"uint256\"}],\"name\":\"repayFraxlendDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdrawableFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"crispymangoes, 0xEinCodes NOTE: repayAssetWithCollateral() is not allowed from strategist to call in FraxlendCore for cellar.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(bytes)\":{\"params\":{\"adaptorData\":\"encoded fraxlendPair (fToken) for this position\"}},\"borrowFromFraxlend(address,uint256)\":{\"params\":{\"amountToBorrow\":\"the amount of `debtTokenToBorrow` to borrow on Fraxlend. NOTE: `borrowAsset` is the same btw v1 and v2 FraxlendPairs\",\"fraxlendPair\":\"the Fraxlend Pair to borrow from.\"}},\"callAddInterest(address)\":{\"details\":\"A strategist might want to do this if a Frax Lend pair has not been interacted      in a while, and the strategist does not plan on interacting with it during a      rebalance.Calling this can increase the share price during the rebalance,      so a strategist should consider moving some assets into reserves.\",\"params\":{\"_fraxlendPair\":\"The specified Fraxlend Pair\"}},\"identifier()\":{\"details\":\"Identifier unique to this adaptor for a shared registry. Normally the identifier would just be the address of this contract, but this Identifier is needed during Cellar Delegate Call Operations, so getting the address of the adaptor is more difficult.\"},\"repayFraxlendDebt(address,uint256)\":{\"details\":\"Uses `_maxAvailable` helper function, see BaseAdaptor.sol\",\"params\":{\"_debtTokenRepayAmount\":\"the amount of `debtToken` to repay with.\",\"_fraxlendPair\":\"the Fraxlend Pair to repay debt from.\"}},\"revokeApproval(address,address)\":{\"params\":{\"asset\":\"the ERC20 asset to revoke `spender`s approval for\",\"spender\":\"the address to revoke approval for\"}}},\"title\":\"FraxLend Debt Token Adaptor\",\"version\":1},\"userdoc\":{\"errors\":{\"BaseAdaptor__ConstructorHealthFactorTooLow()\":[{\"notice\":\"Attempted to set a constructor minimum health factor to a value         below `MINIMUM_CONSTRUCTOR_HEALTH_FACTOR()`.\"}],\"BaseAdaptor__ExternalReceiverBlocked()\":[{\"notice\":\"Attempted to specify an external receiver during a Cellar `callOnAdaptor` call.\"}],\"BaseAdaptor__PricingNotSupported(address)\":[{\"notice\":\"Attempted swap used unsupported output asset.\"}],\"BaseAdaptor__Slippage()\":[{\"notice\":\"Attempted swap has bad slippage.\"}],\"BaseAdaptor__UserDepositsNotAllowed()\":[{\"notice\":\"Attempted to deposit to a position where user deposits were not allowed.\"}],\"BaseAdaptor__UserWithdrawsNotAllowed()\":[{\"notice\":\"Attempted to withdraw from a position where user withdraws were not allowed.\"}],\"DebtFTokenAdaptor__CannotRepayNoDebt(address)\":[{\"notice\":\"Attempted repayment when no debt position in fraxlendPair for cellar\"}],\"DebtFTokenAdaptor__FraxlendPairPositionsMustBeTracked(address)\":[{\"notice\":\"Attempted to interact with an fraxlendPair the Cellar is not using.\"}],\"DebtFTokenAdaptor__HealthFactorTooLow(address)\":[{\"notice\":\"Attempted tx that results in unhealthy cellar\"}]},\"kind\":\"user\",\"methods\":{\"ACCOUNT_FOR_INTEREST()\":{\"notice\":\"This bool determines how this adaptor accounts for interest.         True: Account for pending interest to be paid when calling `balanceOf` or `withdrawableFrom`.         False: Do not account for pending interest to be paid when calling `balanceOf` or `withdrawableFrom`.\"},\"FRAX()\":{\"notice\":\"The FRAX contract on current network.For mainnet use 0x853d955aCEf822Db058eb8505911ED77F175b99e.\"},\"assetOf(bytes)\":{\"notice\":\"Returns `assetContract` from respective fraxlend pair, but this is most likely going to be FRAX.\"},\"assetsUsed(bytes)\":{\"notice\":\"When positions are added to the Registry, this function can be used in order to figure out         what assets this adaptor needs to price, and confirm pricing is properly setup.\"},\"balanceOf(bytes)\":{\"notice\":\"Returns the cellar's balance of the respective Fraxlend debtToken calculated from cellar borrow shares\"},\"borrowFromFraxlend(address,uint256)\":{\"notice\":\"Allows strategists to borrow assets from Fraxlend.`debtTokenToBorrow` must be the debtToken, NOT the underlying ERC20.\"},\"callAddInterest(address)\":{\"notice\":\"Allows a strategist to call `addInterest` on a Frax Pair they are using.\"},\"deposit(uint256,bytes,bytes)\":{\"notice\":\"User deposits are NOT allowed into this position.\"},\"isDebt()\":{\"notice\":\"This adaptor reports values in terms of debt.\"},\"minimumHealthFactor()\":{\"notice\":\"Minimum Health Factor enforced after every borrow.Overwrites strategist set minimums if they are lower.\"},\"repayFraxlendDebt(address,uint256)\":{\"notice\":\"Allows strategists to repay loan debt on Fraxlend Pair. Make sure to call addInterest() beforehand to ensure we are repaying what is required.\"},\"revokeApproval(address,address)\":{\"notice\":\"Allows strategists to zero out an approval for a given `asset`.\"},\"slippage()\":{\"notice\":\"Max possible slippage when making a swap router swap.\"},\"withdraw(uint256,address,bytes,bytes)\":{\"notice\":\"User withdraws are NOT allowed from this position.\"},\"withdrawableFrom(bytes,bytes)\":{\"notice\":\"This position is a debt position, and user withdraws are not allowed so         this position must return 0 for withdrawableFrom.\"}},\"notice\":\"Allows Cellars to borrow assets from FraxLend pairs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/modules/adaptors/Frax/DebtFTokenAdaptor.sol\":\"DebtFTokenAdaptor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@balancer-labs/=lib/balancer-v2-monorepo/../../node_modules/@balancer-labs/\",\":@balancer/=lib/balancer-v2-monorepo/pkg/\",\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/forge-std/lib/ds-test/src/\",\":@forge-std/=lib/forge-std/src/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":@uniswap/v3-core/=lib/v3-core/\",\":@uniswap/v3-periphery/=lib/v3-periphery/\",\":@uniswapV3C/=lib/v3-core/contracts/\",\":@uniswapV3P/=lib/v3-periphery/contracts/\",\":axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/\",\":balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\":chainlink/=lib/chainlink/integration-tests/contracts/ethereum/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/\",\":solmate/=lib/solmate/src/\",\":v3-core/=lib/v3-core/contracts/\",\":v3-periphery/=lib/v3-periphery/contracts/\"]},\"sources\":{\"lib/chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f39ad60071af2c115e064ebeb1686097efa83b26da0e2c814c635538538b7465\",\"dweb:/ipfs/QmYRARVDA1XZUqZNKNnArYHWbffNeeSVZQjt67ZXKGm85a\"]},\"lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c3f481f69f3ee07d6bb91b38d1cd61f9fa72de29c63d778c98956db70ecd57b\",\"dweb:/ipfs/QmPeJrNHTZF8CrXk3BgLJCamwf1dUEzHyQsMYrdd4v1NEG\"]},\"lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3beaa37ee61e4ab615e250fbf01601ae481de843fd0ef55e6b44fd9d5fff8a7\",\"dweb:/ipfs/QmeZUVwd26LzK4Mfp8Zba5JbQNkZFfTzFu1A6FVMMZDg9c\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae2d274bf3d56a6d49a9bbd0a4871c54997a82551eb3eb1c0c39dc98698ff8bf\",\"dweb:/ipfs/QmTT7ty5DPGAmRnx94Xu3TUDYGSPDVLN2bppJAjjedrg1e\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ad84b5dbf40ba9e944cc25bd0a98c51bafd49cff30efe5ef5aef921a70081de\",\"dweb:/ipfs/Qme8iCeqe9VdNgWktTTsSxUfHcJEXuvPaJpshWDzoWj56V\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x182ad835742e188a50bc98b938287d28bf74ad87d01e2bbc1d207c2ba36e1adb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c2ba26b6252bb52b39ffb18b2de027544619e3f71b78e5476eba52becfaae929\",\"dweb:/ipfs/Qmb7NqEzs7aWkrzpskxXCRb799XmPenZMDtpzRvNUph1Bg\"]},\"lib/solmate/src/auth/Owned.sol\":{\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://1ff52bbee698b9cf9e4574615e6550be0887ccf355f6571e23d6f25b332e79b4\",\"dweb:/ipfs/QmVorA2apojVRStzS7h8aFccR3Uv32G6HVtBtFHZrE7YXx\"]},\"lib/solmate/src/mixins/ERC4626.sol\":{\"keccak256\":\"0xa404f6f45bd53f24a90cc5ffe95e16b52e3f2dfd88f0d7a1edcb35f815919a7b\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://9f01e32d713e05cc58c1563e9938a1c5e096b1da9f52c7ea8424f2317b94adc1\",\"dweb:/ipfs/QmVt5SsbA3kezM5pyovupN7iZLy6QVqY5qQRZKLFqxKJUs\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/FixedPointMathLib.sol\":{\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://b7b38b977c5305b18ceefbeed4c9ceaaaefa419b520de62de6604ea661f8c0a9\",\"dweb:/ipfs/QmecMRzgfMyDVa2pvBqMMDLYBappaj7Aa3qcMoQYEQrhWi\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]},\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0x4e64844c56061cd90e0a80de73534a9166704c43eed579eb83f90bc2780ce968\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://cba4fab5cebdddf644b901994a7f0f52b98885d4c56012f4dc51d52c2bf9de0e\",\"dweb:/ipfs/QmVyyrRmqXrAiapewWunRVgiPVFJHpH2hKiE1py1svMSNV\"]},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol\":{\"keccak256\":\"0xf80abf13fb1fafc127ba4e792f240dd8ea7c8c893978cdfd8439c27fae9a037b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b04fc72a656bbf3631e9c2e67b9870a2d9d235185e833fe050e9606e6816a9aa\",\"dweb:/ipfs/QmUcz4bkEkJ9pwzFu1C3n97hBQ3st9U6qTAqCdyFwddKco\"]},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x44fa2ce1182f6c2f6bead3d1737804bf7e112252ae86e0f2e92f9b8249603f43\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://54154e8665b98d65f5dc91b256551852cb47882180b501b260657122d207c0ea\",\"dweb:/ipfs/QmcfemK1A2PXYrWB5SBFGERpMCderbFRb8BtTzQDj1sUBp\"]},\"lib/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f44f4614d31e3d4864c7eb13620555253b84f6a69180f8745b7c6e246a9d125\",\"dweb:/ipfs/QmfNQUcXj3KL8h9u5PqbtEC6yRtwDbKNb48uMPjdwxsKnd\"]},\"lib/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1e994c24fd891ef8a3f5dbf5eba42b34feaf05e0376a29f91322faa18054449c\",\"dweb:/ipfs/QmNdUJGUQxd1dPkMbnA5f5UNqakxRkQE5r7bTZJAuHeapS\"]},\"lib/v3-periphery/contracts/libraries/OracleLibrary.sol\":{\"keccak256\":\"0xe313f89c69c0f1c91f0722868313b4ceb14479b3e7a0abf52a1b9bbd9c18e81b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8ad09b061f3f533c116618c20cf01510108eebebb7ff8847b0f245b8ba368d53\",\"dweb:/ipfs/QmU6vdi5JjJfjK2KqonWvRg9NeuQWarj4B1YFN22Dh9VJM\"]},\"src/Registry.sol\":{\"keccak256\":\"0x2f5f6d61ffc1c9336c628a2cff52b424377feb20c3390f37418fbef1c8995edd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1eabb4a5f6bc4ea2c407f3a70efefae52ebe43a5c200cbf828d0e0a3ed676af2\",\"dweb:/ipfs/QmT6nEdMQx6WzTj8x8ZLayH6hpK5NyXSb97vu2juQ4kS4h\"]},\"src/base/Cellar.sol\":{\"keccak256\":\"0xc5c29f881503e070d2ccc098a7a46d9b03dd47144ae213cc086add626fda9d1a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5cf3ddc46f4ac3fe22ad9b1a54e2da8f7c7080d17d9bab1f0483eb0e425c4744\",\"dweb:/ipfs/QmNRfJvUqSkzSUX5KjiFygjr8sKHkVvERTy7W9LZ9DNc6q\"]},\"src/interfaces/external/Frax/IFToken.sol\":{\"keccak256\":\"0xb71f1b560b5de3a0f5c4ea6cf248073fc641bfcdf84101fd2b69371d469b95fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c365f9fb9c915e6bb1a85729faf707c17b78c40d2ca46bbe7e2175837b6138f1\",\"dweb:/ipfs/QmTQqbhSvrgyK2GwweMn86GFTvqPmoeJzuA971j1BxgxPK\"]},\"src/interfaces/external/IChainlinkAggregator.sol\":{\"keccak256\":\"0x6cabe293cd867cfd1b4e5c378f08aac66951cbdfacbd37627c2fe5c02661808f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://87b4e658a11189c690571f456a47fc644ff15926bdf634c66d05a1f711bea3ac\",\"dweb:/ipfs/QmUDdZ8YxHEt3dTk1vWmNVDQFRp3kEqhwUUZEnRS8Sqb3u\"]},\"src/interfaces/external/UniswapV3Pool.sol\":{\"keccak256\":\"0xf6a71bfbc0665b1d0aad7148b685f3b2254e1be2a3672c2c6671b7fc20db26bb\",\"urls\":[\"bzz-raw://393871fdf75656c49a3bb83bc8110a93af2cbd805df9cc6574a058f3cbf100a9\",\"dweb:/ipfs/QmZugnPctGBiWkFjXXtiKy3AQTWphA9tjZmSBVZRMg9urh\"]},\"src/modules/adaptors/BaseAdaptor.sol\":{\"keccak256\":\"0x1b4922623253dd0e1fba8dab5122e6f42929f3816beee83ff5f1d89a1db122dc\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8cd0c28afe2fc51c8b5fec2f3a97e80bda5fd0417b3edf3a23abcfac558a6840\",\"dweb:/ipfs/QmbgKgVGjJTakWsDa8JBsUuvTAFPVzZnG1ivUfkpLv9N2Q\"]},\"src/modules/adaptors/Frax/DebtFTokenAdaptor.sol\":{\"keccak256\":\"0xff226895aeaf6739ca55c86c27a1647627e1ec6deedf971c1a3348ad5309c9f0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9219e577a024f2804774de2558dfac99a293ba10ee2c8b39cea2c51976508aaa\",\"dweb:/ipfs/QmZp3GWfRGajaNee5CQWPGBtonXocRCoPVcRqWUP9HpCWk\"]},\"src/modules/adaptors/Frax/FraxlendHealthFactorLogic.sol\":{\"keccak256\":\"0xa8b01b483c5f25380926e14f748aaae0f45e6c3b406a34572c3c372e331295d0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://88961c581b4bfd0196e705bce9477f7485d5903cda5864f9e89a89204b6dc80c\",\"dweb:/ipfs/QmfRe24DvEGV2Y5ehasiWDpFqsnN1LYN4d7eMSN5eePAxe\"]},\"src/modules/price-router/Extensions/Extension.sol\":{\"keccak256\":\"0x974e612d503d25b2a0c2e424dd9743ba605a3b3660bd69cafbeb143dabdb3101\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bf97ce81e995cd034dd814ae1a04832a4864b22d0372c07ecc31779643d9e3ad\",\"dweb:/ipfs/Qmauuf11TpCS2rZ7SU4iexnkuSBPJWmyF6nisSXseTqPF4\"]},\"src/modules/price-router/PriceRouter.sol\":{\"keccak256\":\"0x6e2e31227c601a10289dbbe7ae7a96adebcf3a62065b9b9d9edbcb4f57cc79dd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://25b1132fee46f95204107215d5d82eb1ffc0ceebfd360ac9495d43451861510e\",\"dweb:/ipfs/QmWsY9usC61zsdAzafPEvmrv44vUMyCtzAtEESr3ioDTN1\"]},\"src/utils/Math.sol\":{\"keccak256\":\"0x8cc188510f9657ad17e7903cfeded703dd36901ef39069dd6019ffb7e9cfb8bc\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d1a66351eb53f333f62652f62c754f4c23ad76c98093e39265d06b84aef165c1\",\"dweb:/ipfs/QmZNqeAaVwAvZosvKdwUFvnjHsYUcJDwDfDupEZ8uKx949\"]},\"src/utils/Uint32Array.sol\":{\"keccak256\":\"0xd887a816c5b1b66163cab06aa453e0a44e734e2d90484018d0b602ed2f42adb7\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://99cfce0b643a810adfa861893a485e786f76be344a3c6c9348a0791f9f225218\",\"dweb:/ipfs/QmPWf4GbBe6xqUuZJFLYp5Gwv9KTVc3h5phYEb4BMh7fxf\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_accountForInterest",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "_frax",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_healthFactor",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__ConstructorHealthFactorTooLow"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__ExternalReceiverBlocked"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "BaseAdaptor__PricingNotSupported"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__Slippage"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__UserDepositsNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__UserWithdrawsNotAllowed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "fraxlendPair",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "DebtFTokenAdaptor__CannotRepayNoDebt"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "fraxlendPair",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "DebtFTokenAdaptor__FraxlendPairPositionsMustBeTracked"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "fraxlendPair",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "DebtFTokenAdaptor__HealthFactorTooLow"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ACCOUNT_FOR_INTEREST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "FRAX",
          "outputs": [
            {
              "internalType": "contract ERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "adaptorData",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "assetOf",
          "outputs": [
            {
              "internalType": "contract ERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "adaptorData",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "assetsUsed",
          "outputs": [
            {
              "internalType": "contract ERC20[]",
              "name": "assets",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "adaptorData",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IFToken",
              "name": "fraxlendPair",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountToBorrow",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "borrowFromFraxlend"
        },
        {
          "inputs": [
            {
              "internalType": "contract IFToken",
              "name": "_fraxlendPair",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "callAddInterest"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "deposit"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "identifier",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isDebt",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "minimumHealthFactor",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IFToken",
              "name": "_fraxlendPair",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_debtTokenRepayAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "repayFraxlendDebt"
        },
        {
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeApproval"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "slippage",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "withdraw"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "withdrawableFrom",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOf(bytes)": {
            "params": {
              "adaptorData": "encoded fraxlendPair (fToken) for this position"
            }
          },
          "borrowFromFraxlend(address,uint256)": {
            "params": {
              "amountToBorrow": "the amount of `debtTokenToBorrow` to borrow on Fraxlend. NOTE: `borrowAsset` is the same btw v1 and v2 FraxlendPairs",
              "fraxlendPair": "the Fraxlend Pair to borrow from."
            }
          },
          "callAddInterest(address)": {
            "details": "A strategist might want to do this if a Frax Lend pair has not been interacted      in a while, and the strategist does not plan on interacting with it during a      rebalance.Calling this can increase the share price during the rebalance,      so a strategist should consider moving some assets into reserves.",
            "params": {
              "_fraxlendPair": "The specified Fraxlend Pair"
            }
          },
          "identifier()": {
            "details": "Identifier unique to this adaptor for a shared registry. Normally the identifier would just be the address of this contract, but this Identifier is needed during Cellar Delegate Call Operations, so getting the address of the adaptor is more difficult."
          },
          "repayFraxlendDebt(address,uint256)": {
            "details": "Uses `_maxAvailable` helper function, see BaseAdaptor.sol",
            "params": {
              "_debtTokenRepayAmount": "the amount of `debtToken` to repay with.",
              "_fraxlendPair": "the Fraxlend Pair to repay debt from."
            }
          },
          "revokeApproval(address,address)": {
            "params": {
              "asset": "the ERC20 asset to revoke `spender`s approval for",
              "spender": "the address to revoke approval for"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ACCOUNT_FOR_INTEREST()": {
            "notice": "This bool determines how this adaptor accounts for interest.         True: Account for pending interest to be paid when calling `balanceOf` or `withdrawableFrom`.         False: Do not account for pending interest to be paid when calling `balanceOf` or `withdrawableFrom`."
          },
          "FRAX()": {
            "notice": "The FRAX contract on current network.For mainnet use 0x853d955aCEf822Db058eb8505911ED77F175b99e."
          },
          "assetOf(bytes)": {
            "notice": "Returns `assetContract` from respective fraxlend pair, but this is most likely going to be FRAX."
          },
          "assetsUsed(bytes)": {
            "notice": "When positions are added to the Registry, this function can be used in order to figure out         what assets this adaptor needs to price, and confirm pricing is properly setup."
          },
          "balanceOf(bytes)": {
            "notice": "Returns the cellar's balance of the respective Fraxlend debtToken calculated from cellar borrow shares"
          },
          "borrowFromFraxlend(address,uint256)": {
            "notice": "Allows strategists to borrow assets from Fraxlend.`debtTokenToBorrow` must be the debtToken, NOT the underlying ERC20."
          },
          "callAddInterest(address)": {
            "notice": "Allows a strategist to call `addInterest` on a Frax Pair they are using."
          },
          "deposit(uint256,bytes,bytes)": {
            "notice": "User deposits are NOT allowed into this position."
          },
          "isDebt()": {
            "notice": "This adaptor reports values in terms of debt."
          },
          "minimumHealthFactor()": {
            "notice": "Minimum Health Factor enforced after every borrow.Overwrites strategist set minimums if they are lower."
          },
          "repayFraxlendDebt(address,uint256)": {
            "notice": "Allows strategists to repay loan debt on Fraxlend Pair. Make sure to call addInterest() beforehand to ensure we are repaying what is required."
          },
          "revokeApproval(address,address)": {
            "notice": "Allows strategists to zero out an approval for a given `asset`."
          },
          "slippage()": {
            "notice": "Max possible slippage when making a swap router swap."
          },
          "withdraw(uint256,address,bytes,bytes)": {
            "notice": "User withdraws are NOT allowed from this position."
          },
          "withdrawableFrom(bytes,bytes)": {
            "notice": "This position is a debt position, and user withdraws are not allowed so         this position must return 0 for withdrawableFrom."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@balancer-labs/=lib/balancer-v2-monorepo/../../node_modules/@balancer-labs/",
        "@balancer/=lib/balancer-v2-monorepo/pkg/",
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/forge-std/lib/ds-test/src/",
        "@forge-std/=lib/forge-std/src/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@solmate/=lib/solmate/src/",
        "@uniswap/v3-core/=lib/v3-core/",
        "@uniswap/v3-periphery/=lib/v3-periphery/",
        "@uniswapV3C/=lib/v3-core/contracts/",
        "@uniswapV3P/=lib/v3-periphery/contracts/",
        "axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/",
        "balancer-v2-monorepo/=lib/balancer-v2-monorepo/",
        "chainlink/=lib/chainlink/integration-tests/contracts/ethereum/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/",
        "solmate/=lib/solmate/src/",
        "v3-core/=lib/v3-core/contracts/",
        "v3-periphery/=lib/v3-periphery/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/modules/adaptors/Frax/DebtFTokenAdaptor.sol": "DebtFTokenAdaptor"
      },
      "libraries": {}
    },
    "sources": {
      "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
        "keccak256": "0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7",
        "urls": [
          "bzz-raw://f39ad60071af2c115e064ebeb1686097efa83b26da0e2c814c635538538b7465",
          "dweb:/ipfs/QmYRARVDA1XZUqZNKNnArYHWbffNeeSVZQjt67ZXKGm85a"
        ],
        "license": "MIT"
      },
      "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
        "keccak256": "0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2",
        "urls": [
          "bzz-raw://7c3f481f69f3ee07d6bb91b38d1cd61f9fa72de29c63d778c98956db70ecd57b",
          "dweb:/ipfs/QmPeJrNHTZF8CrXk3BgLJCamwf1dUEzHyQsMYrdd4v1NEG"
        ],
        "license": "MIT"
      },
      "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
        "keccak256": "0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846",
        "urls": [
          "bzz-raw://b3beaa37ee61e4ab615e250fbf01601ae481de843fd0ef55e6b44fd9d5fff8a7",
          "dweb:/ipfs/QmeZUVwd26LzK4Mfp8Zba5JbQNkZFfTzFu1A6FVMMZDg9c"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
        "urls": [
          "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
          "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol": {
        "keccak256": "0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028",
        "urls": [
          "bzz-raw://ae2d274bf3d56a6d49a9bbd0a4871c54997a82551eb3eb1c0c39dc98698ff8bf",
          "dweb:/ipfs/QmTT7ty5DPGAmRnx94Xu3TUDYGSPDVLN2bppJAjjedrg1e"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700",
        "urls": [
          "bzz-raw://2ad84b5dbf40ba9e944cc25bd0a98c51bafd49cff30efe5ef5aef921a70081de",
          "dweb:/ipfs/Qme8iCeqe9VdNgWktTTsSxUfHcJEXuvPaJpshWDzoWj56V"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x182ad835742e188a50bc98b938287d28bf74ad87d01e2bbc1d207c2ba36e1adb",
        "urls": [
          "bzz-raw://c2ba26b6252bb52b39ffb18b2de027544619e3f71b78e5476eba52becfaae929",
          "dweb:/ipfs/Qmb7NqEzs7aWkrzpskxXCRb799XmPenZMDtpzRvNUph1Bg"
        ],
        "license": "MIT"
      },
      "lib/solmate/src/auth/Owned.sol": {
        "keccak256": "0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea",
        "urls": [
          "bzz-raw://1ff52bbee698b9cf9e4574615e6550be0887ccf355f6571e23d6f25b332e79b4",
          "dweb:/ipfs/QmVorA2apojVRStzS7h8aFccR3Uv32G6HVtBtFHZrE7YXx"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/mixins/ERC4626.sol": {
        "keccak256": "0xa404f6f45bd53f24a90cc5ffe95e16b52e3f2dfd88f0d7a1edcb35f815919a7b",
        "urls": [
          "bzz-raw://9f01e32d713e05cc58c1563e9938a1c5e096b1da9f52c7ea8424f2317b94adc1",
          "dweb:/ipfs/QmVt5SsbA3kezM5pyovupN7iZLy6QVqY5qQRZKLFqxKJUs"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/tokens/ERC20.sol": {
        "keccak256": "0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10",
        "urls": [
          "bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35",
          "dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/utils/FixedPointMathLib.sol": {
        "keccak256": "0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843",
        "urls": [
          "bzz-raw://b7b38b977c5305b18ceefbeed4c9ceaaaefa419b520de62de6604ea661f8c0a9",
          "dweb:/ipfs/QmecMRzgfMyDVa2pvBqMMDLYBappaj7Aa3qcMoQYEQrhWi"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/utils/SafeTransferLib.sol": {
        "keccak256": "0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a",
        "urls": [
          "bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4",
          "dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
        "keccak256": "0x4e64844c56061cd90e0a80de73534a9166704c43eed579eb83f90bc2780ce968",
        "urls": [
          "bzz-raw://cba4fab5cebdddf644b901994a7f0f52b98885d4c56012f4dc51d52c2bf9de0e",
          "dweb:/ipfs/QmVyyrRmqXrAiapewWunRVgiPVFJHpH2hKiE1py1svMSNV"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
        "keccak256": "0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634",
        "urls": [
          "bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5",
          "dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
        "keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
        "urls": [
          "bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
          "dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol": {
        "keccak256": "0xf80abf13fb1fafc127ba4e792f240dd8ea7c8c893978cdfd8439c27fae9a037b",
        "urls": [
          "bzz-raw://b04fc72a656bbf3631e9c2e67b9870a2d9d235185e833fe050e9606e6816a9aa",
          "dweb:/ipfs/QmUcz4bkEkJ9pwzFu1C3n97hBQ3st9U6qTAqCdyFwddKco"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
        "keccak256": "0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd",
        "urls": [
          "bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03",
          "dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
        "keccak256": "0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7",
        "urls": [
          "bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047",
          "dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
        "keccak256": "0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235",
        "urls": [
          "bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735",
          "dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
        "keccak256": "0x44fa2ce1182f6c2f6bead3d1737804bf7e112252ae86e0f2e92f9b8249603f43",
        "urls": [
          "bzz-raw://54154e8665b98d65f5dc91b256551852cb47882180b501b260657122d207c0ea",
          "dweb:/ipfs/QmcfemK1A2PXYrWB5SBFGERpMCderbFRb8BtTzQDj1sUBp"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-core/contracts/libraries/FullMath.sol": {
        "keccak256": "0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645",
        "urls": [
          "bzz-raw://8f44f4614d31e3d4864c7eb13620555253b84f6a69180f8745b7c6e246a9d125",
          "dweb:/ipfs/QmfNQUcXj3KL8h9u5PqbtEC6yRtwDbKNb48uMPjdwxsKnd"
        ],
        "license": "MIT"
      },
      "lib/v3-core/contracts/libraries/TickMath.sol": {
        "keccak256": "0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129",
        "urls": [
          "bzz-raw://1e994c24fd891ef8a3f5dbf5eba42b34feaf05e0376a29f91322faa18054449c",
          "dweb:/ipfs/QmNdUJGUQxd1dPkMbnA5f5UNqakxRkQE5r7bTZJAuHeapS"
        ],
        "license": "GPL-2.0-or-later"
      },
      "lib/v3-periphery/contracts/libraries/OracleLibrary.sol": {
        "keccak256": "0xe313f89c69c0f1c91f0722868313b4ceb14479b3e7a0abf52a1b9bbd9c18e81b",
        "urls": [
          "bzz-raw://8ad09b061f3f533c116618c20cf01510108eebebb7ff8847b0f245b8ba368d53",
          "dweb:/ipfs/QmU6vdi5JjJfjK2KqonWvRg9NeuQWarj4B1YFN22Dh9VJM"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/Registry.sol": {
        "keccak256": "0x2f5f6d61ffc1c9336c628a2cff52b424377feb20c3390f37418fbef1c8995edd",
        "urls": [
          "bzz-raw://1eabb4a5f6bc4ea2c407f3a70efefae52ebe43a5c200cbf828d0e0a3ed676af2",
          "dweb:/ipfs/QmT6nEdMQx6WzTj8x8ZLayH6hpK5NyXSb97vu2juQ4kS4h"
        ],
        "license": "Apache-2.0"
      },
      "src/base/Cellar.sol": {
        "keccak256": "0xc5c29f881503e070d2ccc098a7a46d9b03dd47144ae213cc086add626fda9d1a",
        "urls": [
          "bzz-raw://5cf3ddc46f4ac3fe22ad9b1a54e2da8f7c7080d17d9bab1f0483eb0e425c4744",
          "dweb:/ipfs/QmNRfJvUqSkzSUX5KjiFygjr8sKHkVvERTy7W9LZ9DNc6q"
        ],
        "license": "Apache-2.0"
      },
      "src/interfaces/external/Frax/IFToken.sol": {
        "keccak256": "0xb71f1b560b5de3a0f5c4ea6cf248073fc641bfcdf84101fd2b69371d469b95fd",
        "urls": [
          "bzz-raw://c365f9fb9c915e6bb1a85729faf707c17b78c40d2ca46bbe7e2175837b6138f1",
          "dweb:/ipfs/QmTQqbhSvrgyK2GwweMn86GFTvqPmoeJzuA971j1BxgxPK"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/IChainlinkAggregator.sol": {
        "keccak256": "0x6cabe293cd867cfd1b4e5c378f08aac66951cbdfacbd37627c2fe5c02661808f",
        "urls": [
          "bzz-raw://87b4e658a11189c690571f456a47fc644ff15926bdf634c66d05a1f711bea3ac",
          "dweb:/ipfs/QmUDdZ8YxHEt3dTk1vWmNVDQFRp3kEqhwUUZEnRS8Sqb3u"
        ],
        "license": "Apache-2.0"
      },
      "src/interfaces/external/UniswapV3Pool.sol": {
        "keccak256": "0xf6a71bfbc0665b1d0aad7148b685f3b2254e1be2a3672c2c6671b7fc20db26bb",
        "urls": [
          "bzz-raw://393871fdf75656c49a3bb83bc8110a93af2cbd805df9cc6574a058f3cbf100a9",
          "dweb:/ipfs/QmZugnPctGBiWkFjXXtiKy3AQTWphA9tjZmSBVZRMg9urh"
        ],
        "license": null
      },
      "src/modules/adaptors/BaseAdaptor.sol": {
        "keccak256": "0x1b4922623253dd0e1fba8dab5122e6f42929f3816beee83ff5f1d89a1db122dc",
        "urls": [
          "bzz-raw://8cd0c28afe2fc51c8b5fec2f3a97e80bda5fd0417b3edf3a23abcfac558a6840",
          "dweb:/ipfs/QmbgKgVGjJTakWsDa8JBsUuvTAFPVzZnG1ivUfkpLv9N2Q"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/adaptors/Frax/DebtFTokenAdaptor.sol": {
        "keccak256": "0xff226895aeaf6739ca55c86c27a1647627e1ec6deedf971c1a3348ad5309c9f0",
        "urls": [
          "bzz-raw://9219e577a024f2804774de2558dfac99a293ba10ee2c8b39cea2c51976508aaa",
          "dweb:/ipfs/QmZp3GWfRGajaNee5CQWPGBtonXocRCoPVcRqWUP9HpCWk"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/adaptors/Frax/FraxlendHealthFactorLogic.sol": {
        "keccak256": "0xa8b01b483c5f25380926e14f748aaae0f45e6c3b406a34572c3c372e331295d0",
        "urls": [
          "bzz-raw://88961c581b4bfd0196e705bce9477f7485d5903cda5864f9e89a89204b6dc80c",
          "dweb:/ipfs/QmfRe24DvEGV2Y5ehasiWDpFqsnN1LYN4d7eMSN5eePAxe"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/price-router/Extensions/Extension.sol": {
        "keccak256": "0x974e612d503d25b2a0c2e424dd9743ba605a3b3660bd69cafbeb143dabdb3101",
        "urls": [
          "bzz-raw://bf97ce81e995cd034dd814ae1a04832a4864b22d0372c07ecc31779643d9e3ad",
          "dweb:/ipfs/Qmauuf11TpCS2rZ7SU4iexnkuSBPJWmyF6nisSXseTqPF4"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/price-router/PriceRouter.sol": {
        "keccak256": "0x6e2e31227c601a10289dbbe7ae7a96adebcf3a62065b9b9d9edbcb4f57cc79dd",
        "urls": [
          "bzz-raw://25b1132fee46f95204107215d5d82eb1ffc0ceebfd360ac9495d43451861510e",
          "dweb:/ipfs/QmWsY9usC61zsdAzafPEvmrv44vUMyCtzAtEESr3ioDTN1"
        ],
        "license": "Apache-2.0"
      },
      "src/utils/Math.sol": {
        "keccak256": "0x8cc188510f9657ad17e7903cfeded703dd36901ef39069dd6019ffb7e9cfb8bc",
        "urls": [
          "bzz-raw://d1a66351eb53f333f62652f62c754f4c23ad76c98093e39265d06b84aef165c1",
          "dweb:/ipfs/QmZNqeAaVwAvZosvKdwUFvnjHsYUcJDwDfDupEZ8uKx949"
        ],
        "license": "Apache-2.0"
      },
      "src/utils/Uint32Array.sol": {
        "keccak256": "0xd887a816c5b1b66163cab06aa453e0a44e734e2d90484018d0b602ed2f42adb7",
        "urls": [
          "bzz-raw://99cfce0b643a810adfa861893a485e786f76be344a3c6c9348a0791f9f225218",
          "dweb:/ipfs/QmPWf4GbBe6xqUuZJFLYp5Gwv9KTVc3h5phYEb4BMh7fxf"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/modules/adaptors/Frax/DebtFTokenAdaptor.sol",
    "id": 79448,
    "exportedSymbols": {
      "BaseAdaptor": [
        77495
      ],
      "Cellar": [
        61030
      ],
      "DebtFTokenAdaptor": [
        79447
      ],
      "ERC20": [
        51130
      ],
      "FraxlendHealthFactorLogic": [
        80549
      ],
      "IFToken": [
        66209
      ],
      "Math": [
        92983
      ],
      "PriceRouter": [
        89874
      ],
      "SafeTransferLib": [
        51551
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:14148:193",
    "nodes": [
      {
        "id": 78917,
        "nodeType": "PragmaDirective",
        "src": "39:23:193",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".21"
        ]
      },
      {
        "id": 78924,
        "nodeType": "ImportDirective",
        "src": "64:118:193",
        "nodes": [],
        "absolutePath": "src/modules/adaptors/BaseAdaptor.sol",
        "file": "src/modules/adaptors/BaseAdaptor.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79448,
        "sourceUnit": 77496,
        "symbolAliases": [
          {
            "foreign": {
              "id": 78918,
              "name": "BaseAdaptor",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 77495,
              "src": "73:11:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 78919,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 51130,
              "src": "86:5:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 78920,
              "name": "SafeTransferLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 51551,
              "src": "93:15:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 78921,
              "name": "Cellar",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 61030,
              "src": "110:6:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 78922,
              "name": "PriceRouter",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 89874,
              "src": "118:11:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 78923,
              "name": "Math",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 92983,
              "src": "131:4:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 78926,
        "nodeType": "ImportDirective",
        "src": "183:67:193",
        "nodes": [],
        "absolutePath": "src/interfaces/external/Frax/IFToken.sol",
        "file": "src/interfaces/external/Frax/IFToken.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79448,
        "sourceUnit": 66210,
        "symbolAliases": [
          {
            "foreign": {
              "id": 78925,
              "name": "IFToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 66209,
              "src": "192:7:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 78928,
        "nodeType": "ImportDirective",
        "src": "251:100:193",
        "nodes": [],
        "absolutePath": "src/modules/adaptors/Frax/FraxlendHealthFactorLogic.sol",
        "file": "src/modules/adaptors/Frax/FraxlendHealthFactorLogic.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79448,
        "sourceUnit": 80550,
        "symbolAliases": [
          {
            "foreign": {
              "id": 78927,
              "name": "FraxlendHealthFactorLogic",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 80549,
              "src": "260:25:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79447,
        "nodeType": "ContractDefinition",
        "src": "603:13583:193",
        "nodes": [
          {
            "id": 78937,
            "nodeType": "UsingForDirective",
            "src": "678:32:193",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 78934,
              "name": "SafeTransferLib",
              "nameLocations": [
                "684:15:193"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 51551,
              "src": "684:15:193"
            },
            "typeName": {
              "id": 78936,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 78935,
                "name": "ERC20",
                "nameLocations": [
                  "704:5:193"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 51130,
                "src": "704:5:193"
              },
              "referencedDeclaration": 51130,
              "src": "704:5:193",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$51130",
                "typeString": "contract ERC20"
              }
            }
          },
          {
            "id": 78940,
            "nodeType": "UsingForDirective",
            "src": "715:23:193",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 78938,
              "name": "Math",
              "nameLocations": [
                "721:4:193"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 92983,
              "src": "721:4:193"
            },
            "typeName": {
              "id": 78939,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "730:7:193",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 78945,
            "nodeType": "ErrorDefinition",
            "src": "1851:82:193",
            "nodes": [],
            "documentation": {
              "id": 78941,
              "nodeType": "StructuredDocumentation",
              "src": "1752:94:193",
              "text": " @notice Attempted to interact with an fraxlendPair the Cellar is not using."
            },
            "errorSelector": "fad081de",
            "name": "DebtFTokenAdaptor__FraxlendPairPositionsMustBeTracked",
            "nameLocation": "1857:53:193",
            "parameters": {
              "id": 78944,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 78943,
                  "mutability": "mutable",
                  "name": "fraxlendPair",
                  "nameLocation": "1919:12:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 78945,
                  "src": "1911:20:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 78942,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1911:7:193",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1910:22:193"
            }
          },
          {
            "id": 78950,
            "nodeType": "ErrorDefinition",
            "src": "2016:66:193",
            "nodes": [],
            "documentation": {
              "id": 78946,
              "nodeType": "StructuredDocumentation",
              "src": "1939:72:193",
              "text": " @notice Attempted tx that results in unhealthy cellar"
            },
            "errorSelector": "c4bbf5fd",
            "name": "DebtFTokenAdaptor__HealthFactorTooLow",
            "nameLocation": "2022:37:193",
            "parameters": {
              "id": 78949,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 78948,
                  "mutability": "mutable",
                  "name": "fraxlendPair",
                  "nameLocation": "2068:12:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 78950,
                  "src": "2060:20:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 78947,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2060:7:193",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2059:22:193"
            }
          },
          {
            "id": 78955,
            "nodeType": "ErrorDefinition",
            "src": "2188:65:193",
            "nodes": [],
            "documentation": {
              "id": 78951,
              "nodeType": "StructuredDocumentation",
              "src": "2088:95:193",
              "text": " @notice Attempted repayment when no debt position in fraxlendPair for cellar"
            },
            "errorSelector": "78d1784d",
            "name": "DebtFTokenAdaptor__CannotRepayNoDebt",
            "nameLocation": "2194:36:193",
            "parameters": {
              "id": 78954,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 78953,
                  "mutability": "mutable",
                  "name": "fraxlendPair",
                  "nameLocation": "2239:12:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 78955,
                  "src": "2231:20:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 78952,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2231:7:193",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2230:22:193"
            }
          },
          {
            "id": 78959,
            "nodeType": "VariableDeclaration",
            "src": "2403:27:193",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 78956,
              "nodeType": "StructuredDocumentation",
              "src": "2259:139:193",
              "text": " @notice The FRAX contract on current network.\n @notice For mainnet use 0x853d955aCEf822Db058eb8505911ED77F175b99e."
            },
            "functionSelector": "b0e4556f",
            "mutability": "immutable",
            "name": "FRAX",
            "nameLocation": "2426:4:193",
            "scope": 79447,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ERC20_$51130",
              "typeString": "contract ERC20"
            },
            "typeName": {
              "id": 78958,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 78957,
                "name": "ERC20",
                "nameLocations": [
                  "2403:5:193"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 51130,
                "src": "2403:5:193"
              },
              "referencedDeclaration": 51130,
              "src": "2403:5:193",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$51130",
                "typeString": "contract ERC20"
              }
            },
            "visibility": "public"
          },
          {
            "id": 78962,
            "nodeType": "VariableDeclaration",
            "src": "2755:42:193",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 78960,
              "nodeType": "StructuredDocumentation",
              "src": "2437:313:193",
              "text": " @notice This bool determines how this adaptor accounts for interest.\n         True: Account for pending interest to be paid when calling `balanceOf` or `withdrawableFrom`.\n         False: Do not account for pending interest to be paid when calling `balanceOf` or `withdrawableFrom`."
            },
            "functionSelector": "19877557",
            "mutability": "immutable",
            "name": "ACCOUNT_FOR_INTEREST",
            "nameLocation": "2777:20:193",
            "scope": 79447,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 78961,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "2755:4:193",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "id": 78965,
            "nodeType": "VariableDeclaration",
            "src": "2955:44:193",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 78963,
              "nodeType": "StructuredDocumentation",
              "src": "2804:146:193",
              "text": " @notice Minimum Health Factor enforced after every borrow.\n @notice Overwrites strategist set minimums if they are lower."
            },
            "functionSelector": "1caff8b1",
            "mutability": "immutable",
            "name": "minimumHealthFactor",
            "nameLocation": "2980:19:193",
            "scope": 79447,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 78964,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2955:7:193",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 78993,
            "nodeType": "FunctionDefinition",
            "src": "3006:271:193",
            "nodes": [],
            "body": {
              "id": 78992,
              "nodeType": "Block",
              "src": "3082:195:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 78975,
                        "name": "_healthFactor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78971,
                        "src": "3130:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 78974,
                      "name": "_verifyConstructorMinimumHealthFactor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 77477,
                      "src": "3092:37:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) pure"
                      }
                    },
                    "id": 78976,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3092:52:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 78977,
                  "nodeType": "ExpressionStatement",
                  "src": "3092:52:193"
                },
                {
                  "expression": {
                    "id": 78980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 78978,
                      "name": "ACCOUNT_FOR_INTEREST",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78962,
                      "src": "3154:20:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 78979,
                      "name": "_accountForInterest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78967,
                      "src": "3177:19:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3154:42:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 78981,
                  "nodeType": "ExpressionStatement",
                  "src": "3154:42:193"
                },
                {
                  "expression": {
                    "id": 78986,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 78982,
                      "name": "FRAX",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78959,
                      "src": "3206:4:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$51130",
                        "typeString": "contract ERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 78984,
                          "name": "_frax",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78969,
                          "src": "3219:5:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 78983,
                        "name": "ERC20",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 51130,
                        "src": "3213:5:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC20_$51130_$",
                          "typeString": "type(contract ERC20)"
                        }
                      },
                      "id": 78985,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3213:12:193",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$51130",
                        "typeString": "contract ERC20"
                      }
                    },
                    "src": "3206:19:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$51130",
                      "typeString": "contract ERC20"
                    }
                  },
                  "id": 78987,
                  "nodeType": "ExpressionStatement",
                  "src": "3206:19:193"
                },
                {
                  "expression": {
                    "id": 78990,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 78988,
                      "name": "minimumHealthFactor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78965,
                      "src": "3235:19:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 78989,
                      "name": "_healthFactor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78971,
                      "src": "3257:13:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3235:35:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 78991,
                  "nodeType": "ExpressionStatement",
                  "src": "3235:35:193"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 78972,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 78967,
                  "mutability": "mutable",
                  "name": "_accountForInterest",
                  "nameLocation": "3023:19:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 78993,
                  "src": "3018:24:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 78966,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3018:4:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 78969,
                  "mutability": "mutable",
                  "name": "_frax",
                  "nameLocation": "3052:5:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 78993,
                  "src": "3044:13:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 78968,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3044:7:193",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 78971,
                  "mutability": "mutable",
                  "name": "_healthFactor",
                  "nameLocation": "3067:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 78993,
                  "src": "3059:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 78970,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3059:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3017:64:193"
            },
            "returnParameters": {
              "id": 78973,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3082:0:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79008,
            "nodeType": "FunctionDefinition",
            "src": "3696:152:193",
            "nodes": [],
            "body": {
              "id": 79007,
              "nodeType": "Block",
              "src": "3765:83:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "467261784c656e642064656274546f6b656e56322041646170746f72205620312e30",
                            "id": 79003,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3803:36:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_0f3e468a1a8b575cd99aff8dfccab77eda19232cac2573088dbda63e0636c2e1",
                              "typeString": "literal_string \"FraxLend debtTokenV2 Adaptor V 1.0\""
                            },
                            "value": "FraxLend debtTokenV2 Adaptor V 1.0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_0f3e468a1a8b575cd99aff8dfccab77eda19232cac2573088dbda63e0636c2e1",
                              "typeString": "literal_string \"FraxLend debtTokenV2 Adaptor V 1.0\""
                            }
                          ],
                          "expression": {
                            "id": 79001,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3792:3:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 79002,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "3796:6:193",
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "3792:10:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 79004,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3792:48:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 79000,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "3782:9:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 79005,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3782:59:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 78999,
                  "id": 79006,
                  "nodeType": "Return",
                  "src": "3775:66:193"
                }
              ]
            },
            "baseFunctions": [
              77261
            ],
            "documentation": {
              "id": 78994,
              "nodeType": "StructuredDocumentation",
              "src": "3395:296:193",
              "text": " @dev Identifier unique to this adaptor for a shared registry.\n Normally the identifier would just be the address of this contract, but this\n Identifier is needed during Cellar Delegate Call Operations, so getting the address\n of the adaptor is more difficult."
            },
            "functionSelector": "7998a1c4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "identifier",
            "nameLocation": "3705:10:193",
            "overrides": {
              "id": 78996,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3738:8:193"
            },
            "parameters": {
              "id": 78995,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3715:2:193"
            },
            "returnParameters": {
              "id": 78999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 78998,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79008,
                  "src": "3756:7:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 78997,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3756:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3755:9:193"
            },
            "scope": 79447,
            "stateMutability": "pure",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 79023,
            "nodeType": "FunctionDefinition",
            "src": "4056:136:193",
            "nodes": [],
            "body": {
              "id": 79022,
              "nodeType": "Block",
              "src": "4131:61:193",
              "nodes": [],
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 79019,
                      "name": "BaseAdaptor__UserDepositsNotAllowed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 77233,
                      "src": "4148:35:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 79020,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4148:37:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79021,
                  "nodeType": "RevertStatement",
                  "src": "4141:44:193"
                }
              ]
            },
            "baseFunctions": [
              77305
            ],
            "documentation": {
              "id": 79009,
              "nodeType": "StructuredDocumentation",
              "src": "3975:76:193",
              "text": " @notice User deposits are NOT allowed into this position."
            },
            "functionSelector": "69445c31",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nameLocation": "4065:7:193",
            "overrides": {
              "id": 79017,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4122:8:193"
            },
            "parameters": {
              "id": 79016,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79011,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79023,
                  "src": "4073:7:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79010,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4073:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79013,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79023,
                  "src": "4082:12:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79012,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4082:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79015,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79023,
                  "src": "4096:12:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79014,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4096:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4072:37:193"
            },
            "returnParameters": {
              "id": 79018,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4131:0:193"
            },
            "scope": 79447,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79040,
            "nodeType": "FunctionDefinition",
            "src": "4280:147:193",
            "nodes": [],
            "body": {
              "id": 79039,
              "nodeType": "Block",
              "src": "4365:62:193",
              "nodes": [],
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 79036,
                      "name": "BaseAdaptor__UserWithdrawsNotAllowed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 77236,
                      "src": "4382:36:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 79037,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4382:38:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79038,
                  "nodeType": "RevertStatement",
                  "src": "4375:45:193"
                }
              ]
            },
            "baseFunctions": [
              77317
            ],
            "documentation": {
              "id": 79024,
              "nodeType": "StructuredDocumentation",
              "src": "4198:77:193",
              "text": " @notice User withdraws are NOT allowed from this position."
            },
            "functionSelector": "c9111bd7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "4289:8:193",
            "overrides": {
              "id": 79034,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4356:8:193"
            },
            "parameters": {
              "id": 79033,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79026,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79040,
                  "src": "4298:7:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79025,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4298:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79028,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79040,
                  "src": "4307:7:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79027,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4307:7:193",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79030,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79040,
                  "src": "4316:12:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79029,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4316:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79032,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79040,
                  "src": "4330:12:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79031,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4330:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4297:46:193"
            },
            "returnParameters": {
              "id": 79035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4365:0:193"
            },
            "scope": 79447,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79054,
            "nodeType": "FunctionDefinition",
            "src": "4601:118:193",
            "nodes": [],
            "body": {
              "id": 79053,
              "nodeType": "Block",
              "src": "4694:25:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 79051,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4711:1:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 79050,
                  "id": 79052,
                  "nodeType": "Return",
                  "src": "4704:8:193"
                }
              ]
            },
            "baseFunctions": [
              77335
            ],
            "documentation": {
              "id": 79041,
              "nodeType": "StructuredDocumentation",
              "src": "4433:163:193",
              "text": " @notice This position is a debt position, and user withdraws are not allowed so\n         this position must return 0 for withdrawableFrom."
            },
            "functionSelector": "fa50e5d2",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawableFrom",
            "nameLocation": "4610:16:193",
            "overrides": {
              "id": 79047,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4667:8:193"
            },
            "parameters": {
              "id": 79046,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79043,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79054,
                  "src": "4627:12:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79042,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4627:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79045,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79054,
                  "src": "4641:12:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79044,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4641:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4626:28:193"
            },
            "returnParameters": {
              "id": 79050,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79049,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79054,
                  "src": "4685:7:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79048,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4685:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4684:9:193"
            },
            "scope": 79447,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79089,
            "nodeType": "FunctionDefinition",
            "src": "4933:323:193",
            "nodes": [],
            "body": {
              "id": 79088,
              "nodeType": "Block",
              "src": "5017:239:193",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    79065
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79065,
                      "mutability": "mutable",
                      "name": "fraxlendPair",
                      "nameLocation": "5035:12:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79088,
                      "src": "5027:20:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IFToken_$66209",
                        "typeString": "contract IFToken"
                      },
                      "typeName": {
                        "id": 79064,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 79063,
                          "name": "IFToken",
                          "nameLocations": [
                            "5027:7:193"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 66209,
                          "src": "5027:7:193"
                        },
                        "referencedDeclaration": 66209,
                        "src": "5027:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79072,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79068,
                        "name": "adaptorData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79057,
                        "src": "5061:11:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 79069,
                            "name": "IFToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 66209,
                            "src": "5075:7:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IFToken_$66209_$",
                              "typeString": "type(contract IFToken)"
                            }
                          }
                        ],
                        "id": 79070,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "5074:9:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IFToken_$66209_$",
                          "typeString": "type(contract IFToken)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_type$_t_contract$_IFToken_$66209_$",
                          "typeString": "type(contract IFToken)"
                        }
                      ],
                      "expression": {
                        "id": 79066,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "5050:3:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 79067,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "5054:6:193",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "5050:10:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 79071,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5050:34:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5027:57:193"
                },
                {
                  "assignments": [
                    79074
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79074,
                      "mutability": "mutable",
                      "name": "borrowShares",
                      "nameLocation": "5102:12:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79088,
                      "src": "5094:20:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 79073,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5094:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79080,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79076,
                        "name": "fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79065,
                        "src": "5135:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      {
                        "expression": {
                          "id": 79077,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5149:3:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 79078,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5153:6:193",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5149:10:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 79075,
                      "name": "_userBorrowShares",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80497,
                      "src": "5117:17:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (contract IFToken,address) view returns (uint256)"
                      }
                    },
                    "id": 79079,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5117:43:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5094:66:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79082,
                        "name": "fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79065,
                        "src": "5193:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      {
                        "id": 79083,
                        "name": "borrowShares",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79074,
                        "src": "5207:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 79084,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5221:5:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      },
                      {
                        "id": 79085,
                        "name": "ACCOUNT_FOR_INTEREST",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78962,
                        "src": "5228:20:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 79081,
                      "name": "_toBorrowAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80480,
                      "src": "5177:15:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$_t_uint256_$_t_bool_$_t_bool_$returns$_t_uint256_$",
                        "typeString": "function (contract IFToken,uint256,bool,bool) view returns (uint256)"
                      }
                    },
                    "id": 79086,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5177:72:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 79062,
                  "id": 79087,
                  "nodeType": "Return",
                  "src": "5170:79:193"
                }
              ]
            },
            "baseFunctions": [
              77325
            ],
            "documentation": {
              "id": 79055,
              "nodeType": "StructuredDocumentation",
              "src": "4725:203:193",
              "text": " @notice Returns the cellar's balance of the respective Fraxlend debtToken calculated from cellar borrow shares\n @param adaptorData encoded fraxlendPair (fToken) for this position"
            },
            "functionSelector": "78415365",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "4942:9:193",
            "overrides": {
              "id": 79059,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4990:8:193"
            },
            "parameters": {
              "id": 79058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79057,
                  "mutability": "mutable",
                  "name": "adaptorData",
                  "nameLocation": "4965:11:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79089,
                  "src": "4952:24:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79056,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4952:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4951:26:193"
            },
            "returnParameters": {
              "id": 79062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79061,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79089,
                  "src": "5008:7:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79060,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5008:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5007:9:193"
            },
            "scope": 79447,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79116,
            "nodeType": "FunctionDefinition",
            "src": "5390:210:193",
            "nodes": [],
            "body": {
              "id": 79115,
              "nodeType": "Block",
              "src": "5470:130:193",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    79101
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79101,
                      "mutability": "mutable",
                      "name": "fraxlendPair",
                      "nameLocation": "5488:12:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79115,
                      "src": "5480:20:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IFToken_$66209",
                        "typeString": "contract IFToken"
                      },
                      "typeName": {
                        "id": 79100,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 79099,
                          "name": "IFToken",
                          "nameLocations": [
                            "5480:7:193"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 66209,
                          "src": "5480:7:193"
                        },
                        "referencedDeclaration": 66209,
                        "src": "5480:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79108,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79104,
                        "name": "adaptorData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79092,
                        "src": "5514:11:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 79105,
                            "name": "IFToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 66209,
                            "src": "5528:7:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IFToken_$66209_$",
                              "typeString": "type(contract IFToken)"
                            }
                          }
                        ],
                        "id": 79106,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "5527:9:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IFToken_$66209_$",
                          "typeString": "type(contract IFToken)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_type$_t_contract$_IFToken_$66209_$",
                          "typeString": "type(contract IFToken)"
                        }
                      ],
                      "expression": {
                        "id": 79102,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "5503:3:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 79103,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "5507:6:193",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "5503:10:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 79107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5503:34:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5480:57:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 79111,
                            "name": "fraxlendPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79101,
                            "src": "5579:12:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          ],
                          "id": 79110,
                          "name": "_fraxlendPairAsset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79351,
                          "src": "5560:18:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$returns$_t_address_$",
                            "typeString": "function (contract IFToken) view returns (address)"
                          }
                        },
                        "id": 79112,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5560:32:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 79109,
                      "name": "ERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 51130,
                      "src": "5554:5:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC20_$51130_$",
                        "typeString": "type(contract ERC20)"
                      }
                    },
                    "id": 79113,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5554:39:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$51130",
                      "typeString": "contract ERC20"
                    }
                  },
                  "functionReturnParameters": 79098,
                  "id": 79114,
                  "nodeType": "Return",
                  "src": "5547:46:193"
                }
              ]
            },
            "baseFunctions": [
              77344
            ],
            "documentation": {
              "id": 79090,
              "nodeType": "StructuredDocumentation",
              "src": "5262:123:193",
              "text": " @notice Returns `assetContract` from respective fraxlend pair, but this is most likely going to be FRAX."
            },
            "functionSelector": "e170a9bf",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "assetOf",
            "nameLocation": "5399:7:193",
            "overrides": {
              "id": 79094,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5445:8:193"
            },
            "parameters": {
              "id": 79093,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79092,
                  "mutability": "mutable",
                  "name": "adaptorData",
                  "nameLocation": "5420:11:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79116,
                  "src": "5407:24:193",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 79091,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5407:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5406:26:193"
            },
            "returnParameters": {
              "id": 79098,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79097,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79116,
                  "src": "5463:5:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$51130",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 79096,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79095,
                      "name": "ERC20",
                      "nameLocations": [
                        "5463:5:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 51130,
                      "src": "5463:5:193"
                    },
                    "referencedDeclaration": 51130,
                    "src": "5463:5:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$51130",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5462:7:193"
            },
            "scope": 79447,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79126,
            "nodeType": "FunctionDefinition",
            "src": "5683:82:193",
            "nodes": [],
            "body": {
              "id": 79125,
              "nodeType": "Block",
              "src": "5737:28:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 79123,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5754:4:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 79122,
                  "id": 79124,
                  "nodeType": "Return",
                  "src": "5747:11:193"
                }
              ]
            },
            "baseFunctions": [
              77378
            ],
            "documentation": {
              "id": 79117,
              "nodeType": "StructuredDocumentation",
              "src": "5606:72:193",
              "text": " @notice This adaptor reports values in terms of debt."
            },
            "functionSelector": "89353a09",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isDebt",
            "nameLocation": "5692:6:193",
            "overrides": {
              "id": 79119,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5713:8:193"
            },
            "parameters": {
              "id": 79118,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5698:2:193"
            },
            "returnParameters": {
              "id": 79122,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79121,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79126,
                  "src": "5731:4:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79120,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5731:4:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5730:6:193"
            },
            "scope": 79447,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79167,
            "nodeType": "FunctionDefinition",
            "src": "6289:560:193",
            "nodes": [],
            "body": {
              "id": 79166,
              "nodeType": "Block",
              "src": "6370:479:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79136,
                        "name": "fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79130,
                        "src": "6396:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      ],
                      "id": 79135,
                      "name": "_validateFToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79337,
                      "src": "6380:15:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$returns$__$",
                        "typeString": "function (contract IFToken) view"
                      }
                    },
                    "id": 79137,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6380:29:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79138,
                  "nodeType": "ExpressionStatement",
                  "src": "6380:29:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79140,
                        "name": "amountToBorrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79132,
                        "src": "6432:14:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 79141,
                        "name": "fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79130,
                        "src": "6448:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      ],
                      "id": 79139,
                      "name": "_borrowAsset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79409,
                      "src": "6419:12:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_contract$_IFToken_$66209_$returns$__$",
                        "typeString": "function (uint256,contract IFToken)"
                      }
                    },
                    "id": 79142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6419:42:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79143,
                  "nodeType": "ExpressionStatement",
                  "src": "6419:42:193"
                },
                {
                  "assignments": [
                    79145
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79145,
                      "mutability": "mutable",
                      "name": "_exchangeRate",
                      "nameLocation": "6533:13:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79166,
                      "src": "6525:21:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 79144,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6525:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79149,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79147,
                        "name": "fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79130,
                        "src": "6570:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      ],
                      "id": 79146,
                      "name": "_getExchangeRateInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79426,
                      "src": "6549:20:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IFToken_$66209_$returns$_t_uint256_$",
                        "typeString": "function (contract IFToken) returns (uint256)"
                      }
                    },
                    "id": 79148,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6549:34:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6525:58:193"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 79156,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 79150,
                      "name": "minimumHealthFactor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78965,
                      "src": "6680:19:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "components": [
                        {
                          "arguments": [
                            {
                              "id": 79152,
                              "name": "fraxlendPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79130,
                              "src": "6720:12:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IFToken_$66209",
                                "typeString": "contract IFToken"
                              }
                            },
                            {
                              "id": 79153,
                              "name": "_exchangeRate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79145,
                              "src": "6734:13:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IFToken_$66209",
                                "typeString": "contract IFToken"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 79151,
                            "name": "_getHealthFactor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80457,
                            "src": "6703:16:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (contract IFToken,uint256) view returns (uint256)"
                            }
                          },
                          "id": 79154,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6703:45:193",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 79155,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6702:47:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6680:69:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79165,
                  "nodeType": "IfStatement",
                  "src": "6676:167:193",
                  "trueBody": {
                    "id": 79164,
                    "nodeType": "Block",
                    "src": "6751:92:193",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 79160,
                                  "name": "fraxlendPair",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 79130,
                                  "src": "6818:12:193",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IFToken_$66209",
                                    "typeString": "contract IFToken"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IFToken_$66209",
                                    "typeString": "contract IFToken"
                                  }
                                ],
                                "id": 79159,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "6810:7:193",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 79158,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "6810:7:193",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 79161,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6810:21:193",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 79157,
                            "name": "DebtFTokenAdaptor__HealthFactorTooLow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 78950,
                            "src": "6772:37:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                              "typeString": "function (address) pure"
                            }
                          },
                          "id": 79162,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6772:60:193",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 79163,
                        "nodeType": "RevertStatement",
                        "src": "6765:67:193"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 79127,
              "nodeType": "StructuredDocumentation",
              "src": "5909:375:193",
              "text": " @notice Allows strategists to borrow assets from Fraxlend.\n @notice `debtTokenToBorrow` must be the debtToken, NOT the underlying ERC20.\n @param fraxlendPair the Fraxlend Pair to borrow from.\n @param amountToBorrow the amount of `debtTokenToBorrow` to borrow on Fraxlend.\n NOTE: `borrowAsset` is the same btw v1 and v2 FraxlendPairs"
            },
            "functionSelector": "1586ffbb",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "borrowFromFraxlend",
            "nameLocation": "6298:18:193",
            "parameters": {
              "id": 79133,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79130,
                  "mutability": "mutable",
                  "name": "fraxlendPair",
                  "nameLocation": "6325:12:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79167,
                  "src": "6317:20:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79129,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79128,
                      "name": "IFToken",
                      "nameLocations": [
                        "6317:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "6317:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "6317:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79132,
                  "mutability": "mutable",
                  "name": "amountToBorrow",
                  "nameLocation": "6347:14:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79167,
                  "src": "6339:22:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79131,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6339:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6316:46:193"
            },
            "returnParameters": {
              "id": 79134,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6370:0:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79263,
            "nodeType": "FunctionDefinition",
            "src": "7262:1157:193",
            "nodes": [],
            "body": {
              "id": 79262,
              "nodeType": "Block",
              "src": "7350:1069:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79177,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79171,
                        "src": "7376:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      ],
                      "id": 79176,
                      "name": "_validateFToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79337,
                      "src": "7360:15:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$returns$__$",
                        "typeString": "function (contract IFToken) view"
                      }
                    },
                    "id": 79178,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7360:30:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79179,
                  "nodeType": "ExpressionStatement",
                  "src": "7360:30:193"
                },
                {
                  "assignments": [
                    79182
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79182,
                      "mutability": "mutable",
                      "name": "tokenToRepay",
                      "nameLocation": "7406:12:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79262,
                      "src": "7400:18:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$51130",
                        "typeString": "contract ERC20"
                      },
                      "typeName": {
                        "id": 79181,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 79180,
                          "name": "ERC20",
                          "nameLocations": [
                            "7400:5:193"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 51130,
                          "src": "7400:5:193"
                        },
                        "referencedDeclaration": 51130,
                        "src": "7400:5:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$51130",
                          "typeString": "contract ERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79188,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 79185,
                            "name": "_fraxlendPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79171,
                            "src": "7446:13:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          ],
                          "id": 79184,
                          "name": "_fraxlendPairAsset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79351,
                          "src": "7427:18:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$returns$_t_address_$",
                            "typeString": "function (contract IFToken) view returns (address)"
                          }
                        },
                        "id": 79186,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7427:33:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 79183,
                      "name": "ERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 51130,
                      "src": "7421:5:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC20_$51130_$",
                        "typeString": "type(contract ERC20)"
                      }
                    },
                    "id": 79187,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7421:40:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$51130",
                      "typeString": "contract ERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7400:61:193"
                },
                {
                  "assignments": [
                    79190
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79190,
                      "mutability": "mutable",
                      "name": "debtTokenToRepay",
                      "nameLocation": "7479:16:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79262,
                      "src": "7471:24:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 79189,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7471:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79195,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79192,
                        "name": "tokenToRepay",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79182,
                        "src": "7512:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$51130",
                          "typeString": "contract ERC20"
                        }
                      },
                      {
                        "id": 79193,
                        "name": "_debtTokenRepayAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79173,
                        "src": "7526:21:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_ERC20_$51130",
                          "typeString": "contract ERC20"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 79191,
                      "name": "_maxAvailable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 77408,
                      "src": "7498:13:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_ERC20_$51130_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (contract ERC20,uint256) view returns (uint256)"
                      }
                    },
                    "id": 79194,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7498:50:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7471:77:193"
                },
                {
                  "assignments": [
                    79197
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79197,
                      "mutability": "mutable",
                      "name": "sharesToRepay",
                      "nameLocation": "7566:13:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79262,
                      "src": "7558:21:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 79196,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7558:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79204,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79199,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79171,
                        "src": "7597:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      {
                        "id": 79200,
                        "name": "debtTokenToRepay",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79190,
                        "src": "7612:16:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 79201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7630:5:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      },
                      {
                        "hexValue": "74727565",
                        "id": 79202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7637:4:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 79198,
                      "name": "_toAssetShares",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79388,
                      "src": "7582:14:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$_t_uint256_$_t_bool_$_t_bool_$returns$_t_uint256_$",
                        "typeString": "function (contract IFToken,uint256,bool,bool) view returns (uint256)"
                      }
                    },
                    "id": 79203,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7582:60:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7558:84:193"
                },
                {
                  "assignments": [
                    79206
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79206,
                      "mutability": "mutable",
                      "name": "sharesAccToFraxlend",
                      "nameLocation": "7660:19:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79262,
                      "src": "7652:27:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 79205,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7652:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79214,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79208,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79171,
                        "src": "7700:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 79211,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "7723:4:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                              "typeString": "contract DebtFTokenAdaptor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                              "typeString": "contract DebtFTokenAdaptor"
                            }
                          ],
                          "id": 79210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7715:7:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 79209,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7715:7:193",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 79212,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7715:13:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 79207,
                      "name": "_userBorrowShares",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80497,
                      "src": "7682:17:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (contract IFToken,address) view returns (uint256)"
                      }
                    },
                    "id": 79213,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7682:47:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7652:77:193"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 79217,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 79215,
                      "name": "sharesAccToFraxlend",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79206,
                      "src": "7792:19:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 79216,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7815:1:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "7792:24:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79225,
                  "nodeType": "IfStatement",
                  "src": "7788:97:193",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 79221,
                              "name": "_fraxlendPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79171,
                              "src": "7870:13:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IFToken_$66209",
                                "typeString": "contract IFToken"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IFToken_$66209",
                                "typeString": "contract IFToken"
                              }
                            ],
                            "id": 79220,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7862:7:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 79219,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7862:7:193",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 79222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7862:22:193",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 79218,
                        "name": "DebtFTokenAdaptor__CannotRepayNoDebt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78955,
                        "src": "7825:36:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                          "typeString": "function (address) pure"
                        }
                      },
                      "id": 79223,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7825:60:193",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 79224,
                    "nodeType": "RevertStatement",
                    "src": "7818:67:193"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 79228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 79226,
                      "name": "sharesAccToFraxlend",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79206,
                      "src": "8115:19:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 79227,
                      "name": "sharesToRepay",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79197,
                      "src": "8137:13:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8115:35:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79234,
                  "nodeType": "IfStatement",
                  "src": "8111:101:193",
                  "trueBody": {
                    "id": 79233,
                    "nodeType": "Block",
                    "src": "8152:60:193",
                    "statements": [
                      {
                        "expression": {
                          "id": 79231,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 79229,
                            "name": "sharesToRepay",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79197,
                            "src": "8166:13:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 79230,
                            "name": "sharesAccToFraxlend",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79206,
                            "src": "8182:19:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8166:35:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 79232,
                        "nodeType": "ExpressionStatement",
                        "src": "8166:35:193"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 79240,
                            "name": "_fraxlendPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79171,
                            "src": "8254:13:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          ],
                          "id": 79239,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8246:7:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 79238,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8246:7:193",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 79241,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8246:22:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 79244,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8275:7:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 79243,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "8275:7:193",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              }
                            ],
                            "id": 79242,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "8270:4:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 79245,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8270:13:193",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint256",
                            "typeString": "type(uint256)"
                          }
                        },
                        "id": 79246,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "8284:3:193",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "8270:17:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 79235,
                        "name": "tokenToRepay",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79182,
                        "src": "8221:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$51130",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 79237,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8234:11:193",
                      "memberName": "safeApprove",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 51550,
                      "src": "8221:24:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$51130_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_ERC20_$51130_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 79247,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8221:67:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79248,
                  "nodeType": "ExpressionStatement",
                  "src": "8221:67:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79250,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79171,
                        "src": "8311:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      {
                        "id": 79251,
                        "name": "sharesToRepay",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79197,
                        "src": "8326:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 79249,
                      "name": "_repayAsset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79446,
                      "src": "8299:11:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IFToken_$66209_$_t_uint256_$returns$__$",
                        "typeString": "function (contract IFToken,uint256)"
                      }
                    },
                    "id": 79252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8299:41:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79253,
                  "nodeType": "ExpressionStatement",
                  "src": "8299:41:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79255,
                        "name": "tokenToRepay",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79182,
                        "src": "8375:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$51130",
                          "typeString": "contract ERC20"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 79258,
                            "name": "_fraxlendPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79171,
                            "src": "8397:13:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          ],
                          "id": 79257,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8389:7:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 79256,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8389:7:193",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 79259,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8389:22:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_ERC20_$51130",
                          "typeString": "contract ERC20"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 79254,
                      "name": "_revokeExternalApproval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 77436,
                      "src": "8351:23:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$51130_$_t_address_$returns$__$",
                        "typeString": "function (contract ERC20,address)"
                      }
                    },
                    "id": 79260,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8351:61:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79261,
                  "nodeType": "ExpressionStatement",
                  "src": "8351:61:193"
                }
              ]
            },
            "documentation": {
              "id": 79168,
              "nodeType": "StructuredDocumentation",
              "src": "6875:382:193",
              "text": " @notice Allows strategists to repay loan debt on Fraxlend Pair. Make sure to call addInterest() beforehand to ensure we are repaying what is required.\n @dev Uses `_maxAvailable` helper function, see BaseAdaptor.sol\n @param _fraxlendPair the Fraxlend Pair to repay debt from.\n @param _debtTokenRepayAmount the amount of `debtToken` to repay with."
            },
            "functionSelector": "8b9b9d40",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "repayFraxlendDebt",
            "nameLocation": "7271:17:193",
            "parameters": {
              "id": 79174,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79171,
                  "mutability": "mutable",
                  "name": "_fraxlendPair",
                  "nameLocation": "7297:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79263,
                  "src": "7289:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79170,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79169,
                      "name": "IFToken",
                      "nameLocations": [
                        "7289:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "7289:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "7289:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79173,
                  "mutability": "mutable",
                  "name": "_debtTokenRepayAmount",
                  "nameLocation": "7320:21:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79263,
                  "src": "7312:29:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79172,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7312:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7288:54:193"
            },
            "returnParameters": {
              "id": 79175,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7350:0:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79279,
            "nodeType": "FunctionDefinition",
            "src": "8942:139:193",
            "nodes": [],
            "body": {
              "id": 79278,
              "nodeType": "Block",
              "src": "8997:84:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79271,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79267,
                        "src": "9023:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      ],
                      "id": 79270,
                      "name": "_validateFToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79337,
                      "src": "9007:15:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IFToken_$66209_$returns$__$",
                        "typeString": "function (contract IFToken) view"
                      }
                    },
                    "id": 79272,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9007:30:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79273,
                  "nodeType": "ExpressionStatement",
                  "src": "9007:30:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79275,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79267,
                        "src": "9060:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      ],
                      "id": 79274,
                      "name": "_addInterest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79365,
                      "src": "9047:12:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IFToken_$66209_$returns$__$",
                        "typeString": "function (contract IFToken)"
                      }
                    },
                    "id": 79276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9047:27:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79277,
                  "nodeType": "ExpressionStatement",
                  "src": "9047:27:193"
                }
              ]
            },
            "documentation": {
              "id": 79264,
              "nodeType": "StructuredDocumentation",
              "src": "8425:512:193",
              "text": " @notice Allows a strategist to call `addInterest` on a Frax Pair they are using.\n @param _fraxlendPair The specified Fraxlend Pair\n @dev A strategist might want to do this if a Frax Lend pair has not been interacted\n      in a while, and the strategist does not plan on interacting with it during a\n      rebalance.\n @dev Calling this can increase the share price during the rebalance,\n      so a strategist should consider moving some assets into reserves."
            },
            "functionSelector": "6dd659fd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "callAddInterest",
            "nameLocation": "8951:15:193",
            "parameters": {
              "id": 79268,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79267,
                  "mutability": "mutable",
                  "name": "_fraxlendPair",
                  "nameLocation": "8975:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79279,
                  "src": "8967:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79266,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79265,
                      "name": "IFToken",
                      "nameLocations": [
                        "8967:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "8967:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "8967:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8966:23:193"
            },
            "returnParameters": {
              "id": 79269,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8997:0:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79337,
            "nodeType": "FunctionDefinition",
            "src": "9326:444:193",
            "nodes": [],
            "body": {
              "id": 79336,
              "nodeType": "Block",
              "src": "9388:382:193",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    79287
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79287,
                      "mutability": "mutable",
                      "name": "positionHash",
                      "nameLocation": "9406:12:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79336,
                      "src": "9398:20:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 79286,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "9398:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79303,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 79291,
                              "name": "identifier",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                79008
                              ],
                              "referencedDeclaration": 79008,
                              "src": "9442:10:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_bytes32_$",
                                "typeString": "function () pure returns (bytes32)"
                              }
                            },
                            "id": 79292,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9442:12:193",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "hexValue": "74727565",
                            "id": 79293,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9456:4:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 79298,
                                    "name": "_fraxlendPair",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 79283,
                                    "src": "9481:13:193",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IFToken_$66209",
                                      "typeString": "contract IFToken"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_IFToken_$66209",
                                      "typeString": "contract IFToken"
                                    }
                                  ],
                                  "id": 79297,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "9473:7:193",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 79296,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9473:7:193",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 79299,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9473:22:193",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 79294,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "9462:3:193",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 79295,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "9466:6:193",
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "9462:10:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 79300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9462:34:193",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 79289,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "9431:3:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 79290,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "9435:6:193",
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "9431:10:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 79301,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9431:66:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 79288,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "9421:9:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 79302,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9421:77:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9398:100:193"
                },
                {
                  "assignments": [
                    79305
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79305,
                      "mutability": "mutable",
                      "name": "positionId",
                      "nameLocation": "9515:10:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 79336,
                      "src": "9508:17:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 79304,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "9508:6:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 79317,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 79315,
                        "name": "positionHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79287,
                        "src": "9589:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 79309,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "9543:4:193",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                                      "typeString": "contract DebtFTokenAdaptor"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                                      "typeString": "contract DebtFTokenAdaptor"
                                    }
                                  ],
                                  "id": 79308,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "9535:7:193",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 79307,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9535:7:193",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 79310,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9535:13:193",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 79306,
                              "name": "Cellar",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61030,
                              "src": "9528:6:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Cellar_$61030_$",
                                "typeString": "type(contract Cellar)"
                              }
                            },
                            "id": 79311,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9528:21:193",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Cellar_$61030",
                              "typeString": "contract Cellar"
                            }
                          },
                          "id": 79312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9550:8:193",
                          "memberName": "registry",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 58935,
                          "src": "9528:30:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_Registry_$57893_$",
                            "typeString": "function () view external returns (contract Registry)"
                          }
                        },
                        "id": 79313,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9528:32:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Registry_$57893",
                          "typeString": "contract Registry"
                        }
                      },
                      "id": 79314,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9561:27:193",
                      "memberName": "getPositionHashToPositionId",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 57601,
                      "src": "9528:60:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_uint32_$",
                        "typeString": "function (bytes32) view external returns (uint32)"
                      }
                    },
                    "id": 79316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9528:74:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9508:94:193"
                },
                {
                  "condition": {
                    "id": 79327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "9616:49:193",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 79325,
                          "name": "positionId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79305,
                          "src": "9654:10:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 79321,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "9632:4:193",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                                    "typeString": "contract DebtFTokenAdaptor"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                                    "typeString": "contract DebtFTokenAdaptor"
                                  }
                                ],
                                "id": 79320,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9624:7:193",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 79319,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9624:7:193",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 79322,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9624:13:193",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 79318,
                            "name": "Cellar",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61030,
                            "src": "9617:6:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Cellar_$61030_$",
                              "typeString": "type(contract Cellar)"
                            }
                          },
                          "id": 79323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9617:21:193",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Cellar_$61030",
                            "typeString": "contract Cellar"
                          }
                        },
                        "id": 79324,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9639:14:193",
                        "memberName": "isPositionUsed",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 58190,
                        "src": "9617:36:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
                          "typeString": "function (uint256) view external returns (bool)"
                        }
                      },
                      "id": 79326,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9617:48:193",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79335,
                  "nodeType": "IfStatement",
                  "src": "9612:151:193",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 79331,
                              "name": "_fraxlendPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79283,
                              "src": "9748:13:193",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IFToken_$66209",
                                "typeString": "contract IFToken"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IFToken_$66209",
                                "typeString": "contract IFToken"
                              }
                            ],
                            "id": 79330,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9740:7:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 79329,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9740:7:193",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 79332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9740:22:193",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 79328,
                        "name": "DebtFTokenAdaptor__FraxlendPairPositionsMustBeTracked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78945,
                        "src": "9686:53:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                          "typeString": "function (address) pure"
                        }
                      },
                      "id": 79333,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9686:77:193",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 79334,
                    "nodeType": "RevertStatement",
                    "src": "9679:84:193"
                  }
                }
              ]
            },
            "documentation": {
              "id": 79280,
              "nodeType": "StructuredDocumentation",
              "src": "9087:234:193",
              "text": " @notice Validates that a given fraxlendPair is set up as a position in the Cellar.\n @param _fraxlendPair The specified Fraxlend Pair\n @dev This function uses `address(this)` as the address of the Cellar."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_validateFToken",
            "nameLocation": "9335:15:193",
            "parameters": {
              "id": 79284,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79283,
                  "mutability": "mutable",
                  "name": "_fraxlendPair",
                  "nameLocation": "9359:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79337,
                  "src": "9351:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79282,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79281,
                      "name": "IFToken",
                      "nameLocations": [
                        "9351:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "9351:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "9351:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9350:23:193"
            },
            "returnParameters": {
              "id": 79285,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9388:0:193"
            },
            "scope": 79447,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 79351,
            "nodeType": "FunctionDefinition",
            "src": "11570:142:193",
            "nodes": [],
            "body": {
              "id": 79350,
              "nodeType": "Block",
              "src": "11667:45:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 79346,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79341,
                        "src": "11684:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      "id": 79347,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11698:5:193",
                      "memberName": "asset",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66173,
                      "src": "11684:19:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 79348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11684:21:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 79345,
                  "id": 79349,
                  "nodeType": "Return",
                  "src": "11677:28:193"
                }
              ]
            },
            "documentation": {
              "id": 79338,
              "nodeType": "StructuredDocumentation",
              "src": "11399:166:193",
              "text": " @notice gets the asset of the specified fraxlend pair\n @param _fraxlendPair The specified Fraxlend Pair\n @return asset of fraxlend pair"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_fraxlendPairAsset",
            "nameLocation": "11579:18:193",
            "parameters": {
              "id": 79342,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79341,
                  "mutability": "mutable",
                  "name": "_fraxlendPair",
                  "nameLocation": "11606:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79351,
                  "src": "11598:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79340,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79339,
                      "name": "IFToken",
                      "nameLocations": [
                        "11598:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "11598:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "11598:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11597:23:193"
            },
            "returnParameters": {
              "id": 79345,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79344,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "11660:5:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79351,
                  "src": "11652:13:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79343,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11652:7:193",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11651:15:193"
            },
            "scope": 79447,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 79365,
            "nodeType": "FunctionDefinition",
            "src": "11969:109:193",
            "nodes": [],
            "body": {
              "id": 79364,
              "nodeType": "Block",
              "src": "12030:48:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "66616c7365",
                        "id": 79361,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12065:5:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 79358,
                        "name": "fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79355,
                        "src": "12040:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      "id": 79360,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "12053:11:193",
                      "memberName": "addInterest",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66087,
                      "src": "12040:24:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bool_$returns$_t_uint256_$_t_uint256_$_t_uint256_$_t_struct$_CurrentRateInfo_$66031_memory_ptr_$_t_struct$_VaultAccount_$66036_memory_ptr_$_t_struct$_VaultAccount_$66036_memory_ptr_$",
                        "typeString": "function (bool) external returns (uint256,uint256,uint256,struct IFToken.CurrentRateInfo memory,struct IFToken.VaultAccount memory,struct IFToken.VaultAccount memory)"
                      }
                    },
                    "id": 79362,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12040:31:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_struct$_CurrentRateInfo_$66031_memory_ptr_$_t_struct$_VaultAccount_$66036_memory_ptr_$_t_struct$_VaultAccount_$66036_memory_ptr_$",
                      "typeString": "tuple(uint256,uint256,uint256,struct IFToken.CurrentRateInfo memory,struct IFToken.VaultAccount memory,struct IFToken.VaultAccount memory)"
                    }
                  },
                  "id": 79363,
                  "nodeType": "ExpressionStatement",
                  "src": "12040:31:193"
                }
              ]
            },
            "documentation": {
              "id": 79352,
              "nodeType": "StructuredDocumentation",
              "src": "11718:246:193",
              "text": " @notice Caller calls `addInterest` on specified 'v2' Fraxlend Pair\n @dev fraxlendPair.addInterest() calls into the respective version (v2 by default) of Fraxlend Pair\n @param fraxlendPair The specified Fraxlend Pair"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_addInterest",
            "nameLocation": "11978:12:193",
            "parameters": {
              "id": 79356,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79355,
                  "mutability": "mutable",
                  "name": "fraxlendPair",
                  "nameLocation": "11999:12:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79365,
                  "src": "11991:20:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79354,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79353,
                      "name": "IFToken",
                      "nameLocations": [
                        "11991:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "11991:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "11991:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11990:22:193"
            },
            "returnParameters": {
              "id": 79357,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12030:0:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 79388,
            "nodeType": "FunctionDefinition",
            "src": "12642:248:193",
            "nodes": [],
            "body": {
              "id": 79387,
              "nodeType": "Block",
              "src": "12812:78:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79382,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79371,
                        "src": "12850:6:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 79383,
                        "name": "roundUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79373,
                        "src": "12858:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "id": 79384,
                        "name": "previewInterest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79375,
                        "src": "12867:15:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 79380,
                        "name": "fToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79369,
                        "src": "12829:6:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      "id": 79381,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "12836:13:193",
                      "memberName": "toAssetShares",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66058,
                      "src": "12829:20:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$_t_bool_$_t_bool_$returns$_t_uint256_$",
                        "typeString": "function (uint256,bool,bool) view external returns (uint256)"
                      }
                    },
                    "id": 79385,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12829:54:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 79379,
                  "id": 79386,
                  "nodeType": "Return",
                  "src": "12822:61:193"
                }
              ]
            },
            "documentation": {
              "id": 79366,
              "nodeType": "StructuredDocumentation",
              "src": "12084:553:193",
              "text": " @notice Converts a given asset amount to a number of asset shares (fTokens) from specified 'v2' Fraxlend Pair\n @dev This is one of the adjusted functions from v1 to v2. ftoken.toAssetShares() calls into the respective version (v2 by default) of Fraxlend Pair\n @param fToken The specified Fraxlend Pair\n @param amount The amount of asset\n @param roundUp Whether to round up after division\n @param previewInterest Whether to preview interest accrual before calculation\n @return number of asset shares"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_toAssetShares",
            "nameLocation": "12651:14:193",
            "parameters": {
              "id": 79376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79369,
                  "mutability": "mutable",
                  "name": "fToken",
                  "nameLocation": "12683:6:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79388,
                  "src": "12675:14:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79368,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79367,
                      "name": "IFToken",
                      "nameLocations": [
                        "12675:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "12675:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "12675:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79371,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "12707:6:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79388,
                  "src": "12699:14:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79370,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12699:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79373,
                  "mutability": "mutable",
                  "name": "roundUp",
                  "nameLocation": "12728:7:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79388,
                  "src": "12723:12:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79372,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "12723:4:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79375,
                  "mutability": "mutable",
                  "name": "previewInterest",
                  "nameLocation": "12750:15:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79388,
                  "src": "12745:20:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79374,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "12745:4:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12665:106:193"
            },
            "returnParameters": {
              "id": 79379,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79378,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79388,
                  "src": "12803:7:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79377,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12803:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12802:9:193"
            },
            "scope": 79447,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 79409,
            "nodeType": "FunctionDefinition",
            "src": "13115:312:193",
            "nodes": [],
            "body": {
              "id": 79408,
              "nodeType": "Block",
              "src": "13200:227:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79400,
                        "name": "_borrowAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79391,
                        "src": "13236:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 79401,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13251:1:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "arguments": [
                          {
                            "id": 79404,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "13262:4:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                              "typeString": "contract DebtFTokenAdaptor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                              "typeString": "contract DebtFTokenAdaptor"
                            }
                          ],
                          "id": 79403,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "13254:7:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 79402,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "13254:7:193",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 79405,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13254:13:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 79397,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79394,
                        "src": "13210:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      "id": 79399,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "13224:11:193",
                      "memberName": "borrowAsset",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66013,
                      "src": "13210:25:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,uint256,address) external"
                      }
                    },
                    "id": 79406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13210:58:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79407,
                  "nodeType": "ExpressionStatement",
                  "src": "13210:58:193"
                }
              ]
            },
            "documentation": {
              "id": 79389,
              "nodeType": "StructuredDocumentation",
              "src": "12896:214:193",
              "text": " @notice Borrow amount of borrowAsset in cellar account within fraxlend pair\n @param _borrowAmount The amount of borrowAsset to borrow\n @param _fraxlendPair The specified Fraxlend Pair"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_borrowAsset",
            "nameLocation": "13124:12:193",
            "parameters": {
              "id": 79395,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79391,
                  "mutability": "mutable",
                  "name": "_borrowAmount",
                  "nameLocation": "13145:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79409,
                  "src": "13137:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79390,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13137:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79394,
                  "mutability": "mutable",
                  "name": "_fraxlendPair",
                  "nameLocation": "13168:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79409,
                  "src": "13160:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79393,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79392,
                      "name": "IFToken",
                      "nameLocations": [
                        "13160:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "13160:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "13160:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13136:46:193"
            },
            "returnParameters": {
              "id": 79396,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13200:0:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 79426,
            "nodeType": "FunctionDefinition",
            "src": "13658:182:193",
            "nodes": [],
            "body": {
              "id": 79425,
              "nodeType": "Block",
              "src": "13759:81:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79418,
                      "name": "exchangeRate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79416,
                      "src": "13769:12:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 79419,
                            "name": "_fraxlendPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79413,
                            "src": "13784:13:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IFToken_$66209",
                              "typeString": "contract IFToken"
                            }
                          },
                          "id": 79420,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "13798:16:193",
                          "memberName": "exchangeRateInfo",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 66208,
                          "src": "13784:30:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_struct$_ExchangeRateInfo_$66202_memory_ptr_$",
                            "typeString": "function () view external returns (struct IFToken.ExchangeRateInfo memory)"
                          }
                        },
                        "id": 79421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13784:32:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ExchangeRateInfo_$66202_memory_ptr",
                          "typeString": "struct IFToken.ExchangeRateInfo memory"
                        }
                      },
                      "id": 79422,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "13817:16:193",
                      "memberName": "highExchangeRate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66201,
                      "src": "13784:49:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13769:64:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 79424,
                  "nodeType": "ExpressionStatement",
                  "src": "13769:64:193"
                }
              ]
            },
            "documentation": {
              "id": 79410,
              "nodeType": "StructuredDocumentation",
              "src": "13433:220:193",
              "text": " @notice Caller calls `updateExchangeRate()` on specified FraxlendV2 Pair\n @param _fraxlendPair The specified FraxLendPair\n @return exchangeRate needed to calculate the current health factor"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getExchangeRateInfo",
            "nameLocation": "13667:20:193",
            "parameters": {
              "id": 79414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79413,
                  "mutability": "mutable",
                  "name": "_fraxlendPair",
                  "nameLocation": "13696:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79426,
                  "src": "13688:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79412,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79411,
                      "name": "IFToken",
                      "nameLocations": [
                        "13688:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "13688:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "13688:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13687:23:193"
            },
            "returnParameters": {
              "id": 79417,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79416,
                  "mutability": "mutable",
                  "name": "exchangeRate",
                  "nameLocation": "13745:12:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79426,
                  "src": "13737:20:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79415,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13737:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13736:22:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 79446,
            "nodeType": "FunctionDefinition",
            "src": "14029:155:193",
            "nodes": [],
            "body": {
              "id": 79445,
              "nodeType": "Block",
              "src": "14113:71:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79438,
                        "name": "sharesToRepay",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79432,
                        "src": "14148:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 79441,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "14171:4:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                              "typeString": "contract DebtFTokenAdaptor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_DebtFTokenAdaptor_$79447",
                              "typeString": "contract DebtFTokenAdaptor"
                            }
                          ],
                          "id": 79440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14163:7:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 79439,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "14163:7:193",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 79442,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14163:13:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 79435,
                        "name": "_fraxlendPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79430,
                        "src": "14123:13:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFToken_$66209",
                          "typeString": "contract IFToken"
                        }
                      },
                      "id": 79437,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "14137:10:193",
                      "memberName": "repayAsset",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66020,
                      "src": "14123:24:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address) external"
                      }
                    },
                    "id": 79443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14123:54:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79444,
                  "nodeType": "ExpressionStatement",
                  "src": "14123:54:193"
                }
              ]
            },
            "documentation": {
              "id": 79427,
              "nodeType": "StructuredDocumentation",
              "src": "13846:178:193",
              "text": " @notice Repay fraxlend pair debt by an amount\n @param _fraxlendPair The specified Fraxlend Pair\n @param sharesToRepay The amount of shares to repay"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_repayAsset",
            "nameLocation": "14038:11:193",
            "parameters": {
              "id": 79433,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79430,
                  "mutability": "mutable",
                  "name": "_fraxlendPair",
                  "nameLocation": "14058:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79446,
                  "src": "14050:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IFToken_$66209",
                    "typeString": "contract IFToken"
                  },
                  "typeName": {
                    "id": 79429,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79428,
                      "name": "IFToken",
                      "nameLocations": [
                        "14050:7:193"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66209,
                      "src": "14050:7:193"
                    },
                    "referencedDeclaration": 66209,
                    "src": "14050:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IFToken_$66209",
                      "typeString": "contract IFToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79432,
                  "mutability": "mutable",
                  "name": "sharesToRepay",
                  "nameLocation": "14081:13:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 79446,
                  "src": "14073:21:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79431,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14073:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14049:46:193"
            },
            "returnParameters": {
              "id": 79434,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14113:0:193"
            },
            "scope": 79447,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 78930,
              "name": "BaseAdaptor",
              "nameLocations": [
                "633:11:193"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 77495,
              "src": "633:11:193"
            },
            "id": 78931,
            "nodeType": "InheritanceSpecifier",
            "src": "633:11:193"
          },
          {
            "baseName": {
              "id": 78932,
              "name": "FraxlendHealthFactorLogic",
              "nameLocations": [
                "646:25:193"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 80549,
              "src": "646:25:193"
            },
            "id": 78933,
            "nodeType": "InheritanceSpecifier",
            "src": "646:25:193"
          }
        ],
        "canonicalName": "DebtFTokenAdaptor",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 78929,
          "nodeType": "StructuredDocumentation",
          "src": "353:249:193",
          "text": " @title FraxLend Debt Token Adaptor\n @notice Allows Cellars to borrow assets from FraxLend pairs.\n @author crispymangoes, 0xEinCodes\n NOTE: repayAssetWithCollateral() is not allowed from strategist to call in FraxlendCore for cellar."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          79447,
          80549,
          77495
        ],
        "name": "DebtFTokenAdaptor",
        "nameLocation": "612:17:193",
        "scope": 79448,
        "usedErrors": [
          77230,
          77233,
          77236,
          77239,
          77244,
          77247,
          78945,
          78950,
          78955
        ],
        "usedEvents": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 193
}
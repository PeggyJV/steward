{
  "abi": [
    {
      "inputs": [],
      "name": "BaseAdaptor__ExternalReceiverBlocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "BaseAdaptor__PricingNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__Slippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__UserDepositsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseAdaptor__UserWithdrawsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addAssetsToReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "assetOf",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "adaptorData",
          "type": "bytes"
        }
      ],
      "name": "assetsUsed",
      "outputs": [
        {
          "internalType": "contract ERC20[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newFrequency",
          "type": "uint64"
        }
      ],
      "name": "changeUpkeepFrequency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newMaxGas",
          "type": "uint64"
        }
      ],
      "name": "changeUpkeepMaxGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesAndReserves",
      "outputs": [
        {
          "internalType": "contract FeesAndReserves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDebt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "prepareFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "managementFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "performanceFee",
          "type": "uint32"
        }
      ],
      "name": "setupMetaData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "managementFee",
          "type": "uint32"
        }
      ],
      "name": "updateManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "performanceFee",
          "type": "uint32"
        }
      ],
      "name": "updatePerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAssetsFromReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdrawableFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b50610d64806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063aeffddde116100ad578063e170a9bf11610071578063e170a9bf1461025c578063f2a44d4e1461026a578063f5f30a5e1461027d578063fa50e5d214610290578063fa531255146102a357600080fd5b8063aeffddde146101f0578063c1cc8d7f14610210578063c9111bd714610223578063cabad50a14610236578063d3bfe76a1461024957600080fd5b806369445c31116100f457806369445c311461019157806378415365146101a45780637998a1c4146101c657806389353a09146101ce578063a5a36dd2146101dd57600080fd5b80630b050709146101265780633e032a3b146101595780635303907d14610169578063556d18df1461017e575b600080fd5b73a0cb889707d426a7a386870a03bc70d1b06975985b6040516001600160a01b0390911681526020015b60405180910390f35b6040516123288152602001610150565b61017c6101773660046108be565b6102b6565b005b61017c61018c3660046108ec565b61031f565b61017c61019f3660046109b3565b61035c565b6101b86101b2366004610a20565b50600090565b604051908152602001610150565b6101b8610375565b60405160008152602001610150565b61017c6101eb366004610a73565b6103d3565b6102036101fe366004610a20565b610414565b6040516101509190610a90565b61017c61021e3660046108ec565b610470565b61017c610231366004610af2565b6104ad565b61017c6102443660046108be565b6104c6565b61017c610257366004610b72565b610614565b61013c6101b2366004610a20565b61017c610278366004610a73565b610629565b61017c61028b3660046108be565b61066a565b6101b861029e366004610bab565b6106a2565b61017c6102b1366004610c0f565b6106ab565b604051635303907d60e01b81526004810182905273a0cb889707d426a7a386870a03bc70d1b069759890635303907d906024015b600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b5050505050565b60405163556d18df60e01b815263ffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063556d18df906024016102ea565b604051633204ed5b60e21b815260040160405180910390fd5b60006040516020016103b8906020808252601f908201527f4665657320416e642052657365727665732041646170746f72205620312e3000604082015260600190565b60405160208183030381529060405280519060200120905090565b6040516352d1b6e960e11b815267ffffffffffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063a5a36dd2906024016102ea565b6040805160018082528183019092526060916020808301908036833701905050905060008160008151811061044b5761044b610c3d565b60200260200101906001600160a01b031690816001600160a01b031681525050919050565b60405163c1cc8d7f60e01b815263ffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063c1cc8d7f906024016102ea565b604051635f5003c560e11b815260040160405180910390fd5b600073a0cb889707d426a7a386870a03bc70d1b0697598604051630686ddd960e01b81523060048201526001600160a01b039190911690630686ddd99060240161014060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610c69565b505050505050505050905061055d818361072d565b91506105876001600160a01b03821673a0cb889707d426a7a386870a03bc70d1b0697598846107ae565b60405163655d6a8560e11b81526004810183905273a0cb889707d426a7a386870a03bc70d1b06975989063cabad50a90602401600060405180830381600087803b1580156105d457600080fd5b505af11580156105e8573d6000803e3d6000fd5b505050506106108161060b73a0cb889707d426a7a386870a03bc70d1b069759890565b61082f565b5050565b6106106001600160a01b0383168260006107ae565b60405163795226a760e11b815267ffffffffffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063f2a44d4e906024016102ea565b604051637af9852f60e11b81526004810182905273a0cb889707d426a7a386870a03bc70d1b06975989063f5f30a5e906024016102ea565b60005b92915050565b73a0cb889707d426a7a386870a03bc70d1b069759860405163fa53125560e01b815263ffffffff8085166004830152831660248201526001600160a01b03919091169063fa53125590604401600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050505050565b600060001982036107a7576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190610d15565b90506106a5565b50806106a5565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806108295760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e90604401602060405180830381865afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190610d15565b1115610610576106106001600160a01b0383168260006107ae565b6000602082840312156108d057600080fd5b5035919050565b63ffffffff811681146108e957600080fd5b50565b6000602082840312156108fe57600080fd5b8135610909816108d7565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261093757600080fd5b813567ffffffffffffffff8082111561095257610952610910565b604051601f8301601f19908116603f0116810190828211818310171561097a5761097a610910565b8160405283815286602085880101111561099357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156109c857600080fd5b83359250602084013567ffffffffffffffff808211156109e757600080fd5b6109f387838801610926565b93506040860135915080821115610a0957600080fd5b50610a1686828701610926565b9150509250925092565b600060208284031215610a3257600080fd5b813567ffffffffffffffff811115610a4957600080fd5b610a5584828501610926565b949350505050565b67ffffffffffffffff811681146108e957600080fd5b600060208284031215610a8557600080fd5b813561090981610a5d565b6020808252825182820181905260009190848201906040850190845b81811015610ad15783516001600160a01b031683529284019291840191600101610aac565b50909695505050505050565b6001600160a01b03811681146108e957600080fd5b60008060008060808587031215610b0857600080fd5b843593506020850135610b1a81610add565b9250604085013567ffffffffffffffff80821115610b3757600080fd5b610b4388838901610926565b93506060870135915080821115610b5957600080fd5b50610b6687828801610926565b91505092959194509250565b60008060408385031215610b8557600080fd5b8235610b9081610add565b91506020830135610ba081610add565b809150509250929050565b60008060408385031215610bbe57600080fd5b823567ffffffffffffffff80821115610bd657600080fd5b610be286838701610926565b93506020850135915080821115610bf857600080fd5b50610c0585828601610926565b9150509250929050565b60008060408385031215610c2257600080fd5b8235610c2d816108d7565b91506020830135610ba0816108d7565b634e487b7160e01b600052603260045260246000fd5b805160ff81168114610c6457600080fd5b919050565b6000806000806000806000806000806101408b8d031215610c8957600080fd5b8a51610c9481610add565b60208c0151909a50610ca5816108d7565b60408c0151909950610cb681610a5d565b8098505060608b0151965060808b0151955060a08b0151945060c08b01519350610ce260e08c01610c53565b9250610cf16101008c01610c53565b91506101208b0151610d02816108d7565b809150509295989b9194979a5092959850565b600060208284031215610d2757600080fd5b505191905056fea26469706673582212200c03454aa1f57ec254742035d0b062563ae63fc86ce51f0a32056d109082bfb564736f6c63430008100033",
    "sourceMap": "540:4522:84:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063aeffddde116100ad578063e170a9bf11610071578063e170a9bf1461025c578063f2a44d4e1461026a578063f5f30a5e1461027d578063fa50e5d214610290578063fa531255146102a357600080fd5b8063aeffddde146101f0578063c1cc8d7f14610210578063c9111bd714610223578063cabad50a14610236578063d3bfe76a1461024957600080fd5b806369445c31116100f457806369445c311461019157806378415365146101a45780637998a1c4146101c657806389353a09146101ce578063a5a36dd2146101dd57600080fd5b80630b050709146101265780633e032a3b146101595780635303907d14610169578063556d18df1461017e575b600080fd5b73a0cb889707d426a7a386870a03bc70d1b06975985b6040516001600160a01b0390911681526020015b60405180910390f35b6040516123288152602001610150565b61017c6101773660046108be565b6102b6565b005b61017c61018c3660046108ec565b61031f565b61017c61019f3660046109b3565b61035c565b6101b86101b2366004610a20565b50600090565b604051908152602001610150565b6101b8610375565b60405160008152602001610150565b61017c6101eb366004610a73565b6103d3565b6102036101fe366004610a20565b610414565b6040516101509190610a90565b61017c61021e3660046108ec565b610470565b61017c610231366004610af2565b6104ad565b61017c6102443660046108be565b6104c6565b61017c610257366004610b72565b610614565b61013c6101b2366004610a20565b61017c610278366004610a73565b610629565b61017c61028b3660046108be565b61066a565b6101b861029e366004610bab565b6106a2565b61017c6102b1366004610c0f565b6106ab565b604051635303907d60e01b81526004810182905273a0cb889707d426a7a386870a03bc70d1b069759890635303907d906024015b600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b5050505050565b60405163556d18df60e01b815263ffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063556d18df906024016102ea565b604051633204ed5b60e21b815260040160405180910390fd5b60006040516020016103b8906020808252601f908201527f4665657320416e642052657365727665732041646170746f72205620312e3000604082015260600190565b60405160208183030381529060405280519060200120905090565b6040516352d1b6e960e11b815267ffffffffffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063a5a36dd2906024016102ea565b6040805160018082528183019092526060916020808301908036833701905050905060008160008151811061044b5761044b610c3d565b60200260200101906001600160a01b031690816001600160a01b031681525050919050565b60405163c1cc8d7f60e01b815263ffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063c1cc8d7f906024016102ea565b604051635f5003c560e11b815260040160405180910390fd5b600073a0cb889707d426a7a386870a03bc70d1b0697598604051630686ddd960e01b81523060048201526001600160a01b039190911690630686ddd99060240161014060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610c69565b505050505050505050905061055d818361072d565b91506105876001600160a01b03821673a0cb889707d426a7a386870a03bc70d1b0697598846107ae565b60405163655d6a8560e11b81526004810183905273a0cb889707d426a7a386870a03bc70d1b06975989063cabad50a90602401600060405180830381600087803b1580156105d457600080fd5b505af11580156105e8573d6000803e3d6000fd5b505050506106108161060b73a0cb889707d426a7a386870a03bc70d1b069759890565b61082f565b5050565b6106106001600160a01b0383168260006107ae565b60405163795226a760e11b815267ffffffffffffffff8216600482015273a0cb889707d426a7a386870a03bc70d1b06975989063f2a44d4e906024016102ea565b604051637af9852f60e11b81526004810182905273a0cb889707d426a7a386870a03bc70d1b06975989063f5f30a5e906024016102ea565b60005b92915050565b73a0cb889707d426a7a386870a03bc70d1b069759860405163fa53125560e01b815263ffffffff8085166004830152831660248201526001600160a01b03919091169063fa53125590604401600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050505050565b600060001982036107a7576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190610d15565b90506106a5565b50806106a5565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806108295760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e90604401602060405180830381865afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190610d15565b1115610610576106106001600160a01b0383168260006107ae565b6000602082840312156108d057600080fd5b5035919050565b63ffffffff811681146108e957600080fd5b50565b6000602082840312156108fe57600080fd5b8135610909816108d7565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261093757600080fd5b813567ffffffffffffffff8082111561095257610952610910565b604051601f8301601f19908116603f0116810190828211818310171561097a5761097a610910565b8160405283815286602085880101111561099357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156109c857600080fd5b83359250602084013567ffffffffffffffff808211156109e757600080fd5b6109f387838801610926565b93506040860135915080821115610a0957600080fd5b50610a1686828701610926565b9150509250925092565b600060208284031215610a3257600080fd5b813567ffffffffffffffff811115610a4957600080fd5b610a5584828501610926565b949350505050565b67ffffffffffffffff811681146108e957600080fd5b600060208284031215610a8557600080fd5b813561090981610a5d565b6020808252825182820181905260009190848201906040850190845b81811015610ad15783516001600160a01b031683529284019291840191600101610aac565b50909695505050505050565b6001600160a01b03811681146108e957600080fd5b60008060008060808587031215610b0857600080fd5b843593506020850135610b1a81610add565b9250604085013567ffffffffffffffff80821115610b3757600080fd5b610b4388838901610926565b93506060870135915080821115610b5957600080fd5b50610b6687828801610926565b91505092959194509250565b60008060408385031215610b8557600080fd5b8235610b9081610add565b91506020830135610ba081610add565b809150509250929050565b60008060408385031215610bbe57600080fd5b823567ffffffffffffffff80821115610bd657600080fd5b610be286838701610926565b93506020850135915080821115610bf857600080fd5b50610c0585828601610926565b9150509250929050565b60008060408385031215610c2257600080fd5b8235610c2d816108d7565b91506020830135610ba0816108d7565b634e487b7160e01b600052603260045260246000fd5b805160ff81168114610c6457600080fd5b919050565b6000806000806000806000806000806101408b8d031215610c8957600080fd5b8a51610c9481610add565b60208c0151909a50610ca5816108d7565b60408c0151909950610cb681610a5d565b8098505060608b0151965060808b0151955060a08b0151945060c08b01519350610ce260e08c01610c53565b9250610cf16101008c01610c53565b91506101208b0151610d02816108d7565b809150509295989b9194979a5092959850565b600060208284031215610d2757600080fd5b505191905056fea26469706673582212200c03454aa1f57ec254742035d0b062563ae63fc86ce51f0a32056d109082bfb564736f6c63430008100033",
    "sourceMap": "540:4522:84:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1771:156;1877:42;1771:156;;;-1:-1:-1;;;;;203:32:98;;;185:51;;173:2;158:18;1771:156:84;;;;;;;;2203:78:78;;;2269:5;391:42:98;;379:2;364:18;2203:78:78;247:192:98;4962:98:84;;;;;;:::i;:::-;;:::i;:::-;;2358:131;;;;;;:::i;:::-;;:::i;510:136:86:-;;;;;;:::i;:::-;;:::i;1150:97::-;;;;;;:::i;:::-;-1:-1:-1;1213:7:86;;1150:97;;;;2943:25:98;;;2931:2;2916:18;1150:97:86;2797:177:98;1561:141:84;;;:::i;1535:83:86:-;;;1583:4;3301:41:98;;3289:2;3274:18;1535:83:86;3161:187:98;3050:129:84;;;;;;:::i;:::-;;:::i;5441:180:78:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2802:127:84:-;;;;;;:::i;:::-;;:::i;715:147:86:-;;;;;;:::i;:::-;;:::i;3942:467:84:-;;;;;;:::i;:::-;;:::i;8378:107:78:-;;;;;;:::i;:::-;;:::i;1340:109:86:-;;;;;;:::i;3303:117:84:-;;;;;;:::i;:::-;;:::i;4671:128::-;;;;;;:::i;:::-;;:::i;947:118:86:-;;;;;;:::i;:::-;;:::i;3526:154:84:-;;;;;;:::i;:::-;;:::i;4962:98::-;5016:37;;-1:-1:-1;;;5016:37:84;;;;;2943:25:98;;;1877:42:84;;5016:29;;2916:18:98;;5016:37:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4962:98;:::o;2358:131::-;2428:54;;-1:-1:-1;;;2428:54:84;;;409:23:98;;2428:54:84;;;391:42:98;1877::84;;2428:38;;364:18:98;;2428:54:84;247:192:98;510:136:86;602:37;;-1:-1:-1;;;602:37:86;;;;;;;;;;;1561:141:84;1613:7;1649:45;;;;;;7065:2:98;7047:21;;;7104:2;7084:18;;;7077:30;7143:33;7138:2;7123:18;;7116:61;7209:2;7194:18;;6863:355;1649:45:84;;;;;;;;;;;;;1639:56;;;;;;1632:63;;1561:141;:::o;3050:129::-;3119:53;;-1:-1:-1;;;3119:53:84;;7397:18:98;7385:31;;3119:53:84;;;7367:50:98;1877:42:84;;3119:39;;7340:18:98;;3119:53:84;7223:200:98;5441:180:78;5558:14;;;5570:1;5558:14;;;;;;;;;5516:21;;5558:14;;;;;;;;;;;-1:-1:-1;;5549:23:78;-1:-1:-1;1213:7:86;5582:6:78;5589:1;5582:9;;;;;;;;:::i;:::-;;;;;;:32;-1:-1:-1;;;;;5582:32:78;;;-1:-1:-1;;;;;5582:32:78;;;;;5441:180;;;:::o;2802:127:84:-;2870:52;;-1:-1:-1;;;2870:52:84;;;409:23:98;;2870:52:84;;;391:42:98;1877::84;;2870:37;;364:18:98;;2870:52:84;247:192:98;715:147:86;817:38;;-1:-1:-1;;;817:38:86;;;;;;;;;;;3942:467:84;4005:11;1877:42;4038:49;;-1:-1:-1;;;4038:49:84;;4080:4;4038:49;;;185:51:98;-1:-1:-1;;;;;4038:26:84;;;;;;;158:18:98;;4038:49:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4004:83;;;;;;;;;;;4106:28;4120:5;4127:6;4106:13;:28::i;:::-;4097:37;-1:-1:-1;4144:53:84;-1:-1:-1;;;;;4144:17:84;;1877:42;4097:37;4144:17;:53::i;:::-;4207:45;;-1:-1:-1;;;4207:45:84;;;;;2943:25:98;;;1877:42:84;;4207:37;;2916:18:98;;4207:45:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4344:58;4368:5;4383:17;1877:42;;1771:156;4383:17;4344:23;:58::i;:::-;3994:415;3942:467;:::o;8378:107:78:-;8449:29;-1:-1:-1;;;;;8449:17:78;;8467:7;8476:1;8449:17;:29::i;3303:117:84:-;3366:47;;-1:-1:-1;;;3366:47:84;;7397:18:98;7385:31;;3366:47:84;;;7367:50:98;1877:42:84;;3366:36;;7340:18:98;;3366:47:84;7223:200:98;4671:128:84;4740:52;;-1:-1:-1;;;4740:52:84;;;;;2943:25:98;;;1877:42:84;;4740:44;;2916:18:98;;4740:52:84;2797:177:98;947:118:86;1031:7;947:118;;;;;:::o;3526:154:84:-;1877:42;3611:62;;-1:-1:-1;;;3611:62:84;;;9246:15:98;;;3611:62:84;;;9228:34:98;9298:15;;9278:18;;;9271:43;-1:-1:-1;;;;;3611:31:84;;;;;;;9172:18:98;;3611:62:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3526:154;;:::o;7323:207:78:-;7406:7;-1:-1:-1;;7429:6:78;:27;7425:98;;7465:30;;-1:-1:-1;;;7465:30:78;;7489:4;7465:30;;;185:51:98;-1:-1:-1;;;;;7465:15:78;;;;;158:18:98;;7465:30:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7458:37;;;;7425:98;-1:-1:-1;7517:6:78;7510:13;;4327:1454:48;4438:12;4565:4;4559:11;-1:-1:-1;;;4688:17:48;4681:93;4821:2;4817:1;4798:17;4794:25;4787:37;4901:6;4896:2;4877:17;4873:26;4866:42;5703:2;5700:1;5696:2;5677:17;5674:1;5667:5;5660;5655:51;5224:16;5217:24;5211:2;5193:16;5190:24;5186:1;5182;5176:8;5173:15;5169:46;5166:76;4966:754;4955:765;;;5748:7;5740:34;;;;-1:-1:-1;;;5740:34:48;;9924:2:98;5740:34:48;;;9906:21:98;9963:2;9943:18;;;9936:30;-1:-1:-1;;;9982:18:98;;;9975:44;10036:18;;5740:34:48;;;;;;;;4428:1353;4327:1454;;;:::o;7665:167:78:-;7751:39;;-1:-1:-1;;;7751:39:78;;7775:4;7751:39;;;10277:34:98;-1:-1:-1;;;;;10347:15:98;;;10327:18;;;10320:43;7793:1:78;;7751:15;;;;;;10212:18:98;;7751:39:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;7747:78;;;7796:29;-1:-1:-1;;;;;7796:17:78;;7814:7;7823:1;7796:17;:29::i;444:180:98:-;503:6;556:2;544:9;535:7;531:23;527:32;524:52;;;572:1;569;562:12;524:52;-1:-1:-1;595:23:98;;444:180;-1:-1:-1;444:180:98:o;629:121::-;714:10;707:5;703:22;696:5;693:33;683:61;;740:1;737;730:12;683:61;629:121;:::o;755:245::-;813:6;866:2;854:9;845:7;841:23;837:32;834:52;;;882:1;879;872:12;834:52;921:9;908:23;940:30;964:5;940:30;:::i;:::-;989:5;755:245;-1:-1:-1;;;755:245:98:o;1005:127::-;1066:10;1061:3;1057:20;1054:1;1047:31;1097:4;1094:1;1087:15;1121:4;1118:1;1111:15;1137:718;1179:5;1232:3;1225:4;1217:6;1213:17;1209:27;1199:55;;1250:1;1247;1240:12;1199:55;1286:6;1273:20;1312:18;1349:2;1345;1342:10;1339:36;;;1355:18;;:::i;:::-;1430:2;1424:9;1398:2;1484:13;;-1:-1:-1;;1480:22:98;;;1504:2;1476:31;1472:40;1460:53;;;1528:18;;;1548:22;;;1525:46;1522:72;;;1574:18;;:::i;:::-;1614:10;1610:2;1603:22;1649:2;1641:6;1634:18;1695:3;1688:4;1683:2;1675:6;1671:15;1667:26;1664:35;1661:55;;;1712:1;1709;1702:12;1661:55;1776:2;1769:4;1761:6;1757:17;1750:4;1742:6;1738:17;1725:54;1823:1;1816:4;1811:2;1803:6;1799:15;1795:26;1788:37;1843:6;1834:15;;;;;;1137:718;;;;:::o;1860:607::-;1955:6;1963;1971;2024:2;2012:9;2003:7;1999:23;1995:32;1992:52;;;2040:1;2037;2030:12;1992:52;2076:9;2063:23;2053:33;;2137:2;2126:9;2122:18;2109:32;2160:18;2201:2;2193:6;2190:14;2187:34;;;2217:1;2214;2207:12;2187:34;2240:49;2281:7;2272:6;2261:9;2257:22;2240:49;:::i;:::-;2230:59;;2342:2;2331:9;2327:18;2314:32;2298:48;;2371:2;2361:8;2358:16;2355:36;;;2387:1;2384;2377:12;2355:36;;2410:51;2453:7;2442:8;2431:9;2427:24;2410:51;:::i;:::-;2400:61;;;1860:607;;;;;:::o;2472:320::-;2540:6;2593:2;2581:9;2572:7;2568:23;2564:32;2561:52;;;2609:1;2606;2599:12;2561:52;2649:9;2636:23;2682:18;2674:6;2671:30;2668:50;;;2714:1;2711;2704:12;2668:50;2737:49;2778:7;2769:6;2758:9;2754:22;2737:49;:::i;:::-;2727:59;2472:320;-1:-1:-1;;;;2472:320:98:o;3353:129::-;3438:18;3431:5;3427:30;3420:5;3417:41;3407:69;;3472:1;3469;3462:12;3487:245;3545:6;3598:2;3586:9;3577:7;3573:23;3569:32;3566:52;;;3614:1;3611;3604:12;3566:52;3653:9;3640:23;3672:30;3696:5;3672:30;:::i;3737:673::-;3923:2;3975:21;;;4045:13;;3948:18;;;4067:22;;;3894:4;;3923:2;4146:15;;;;4120:2;4105:18;;;3894:4;4189:195;4203:6;4200:1;4197:13;4189:195;;;4268:13;;-1:-1:-1;;;;;4264:39:98;4252:52;;4359:15;;;;4324:12;;;;4300:1;4218:9;4189:195;;;-1:-1:-1;4401:3:98;;3737:673;-1:-1:-1;;;;;;3737:673:98:o;4415:131::-;-1:-1:-1;;;;;4490:31:98;;4480:42;;4470:70;;4536:1;4533;4526:12;4551:743;4655:6;4663;4671;4679;4732:3;4720:9;4711:7;4707:23;4703:33;4700:53;;;4749:1;4746;4739:12;4700:53;4785:9;4772:23;4762:33;;4845:2;4834:9;4830:18;4817:32;4858:31;4883:5;4858:31;:::i;:::-;4908:5;-1:-1:-1;4964:2:98;4949:18;;4936:32;4987:18;5017:14;;;5014:34;;;5044:1;5041;5034:12;5014:34;5067:49;5108:7;5099:6;5088:9;5084:22;5067:49;:::i;:::-;5057:59;;5169:2;5158:9;5154:18;5141:32;5125:48;;5198:2;5188:8;5185:16;5182:36;;;5214:1;5211;5204:12;5182:36;;5237:51;5280:7;5269:8;5258:9;5254:24;5237:51;:::i;:::-;5227:61;;;4551:743;;;;;;;:::o;5299:403::-;5382:6;5390;5443:2;5431:9;5422:7;5418:23;5414:32;5411:52;;;5459:1;5456;5449:12;5411:52;5498:9;5485:23;5517:31;5542:5;5517:31;:::i;:::-;5567:5;-1:-1:-1;5624:2:98;5609:18;;5596:32;5637:33;5596:32;5637:33;:::i;:::-;5689:7;5679:17;;;5299:403;;;;;:::o;5930:539::-;6016:6;6024;6077:2;6065:9;6056:7;6052:23;6048:32;6045:52;;;6093:1;6090;6083:12;6045:52;6133:9;6120:23;6162:18;6203:2;6195:6;6192:14;6189:34;;;6219:1;6216;6209:12;6189:34;6242:49;6283:7;6274:6;6263:9;6259:22;6242:49;:::i;:::-;6232:59;;6344:2;6333:9;6329:18;6316:32;6300:48;;6373:2;6363:8;6360:16;6357:36;;;6389:1;6386;6379:12;6357:36;;6412:51;6455:7;6444:8;6433:9;6429:24;6412:51;:::i;:::-;6402:61;;;5930:539;;;;;:::o;6474:384::-;6540:6;6548;6601:2;6589:9;6580:7;6576:23;6572:32;6569:52;;;6617:1;6614;6607:12;6569:52;6656:9;6643:23;6675:30;6699:5;6675:30;:::i;:::-;6724:5;-1:-1:-1;6781:2:98;6766:18;;6753:32;6794;6753;6794;:::i;7428:127::-;7489:10;7484:3;7480:20;7477:1;7470:31;7520:4;7517:1;7510:15;7544:4;7541:1;7534:15;7784:160;7861:13;;7914:4;7903:16;;7893:27;;7883:55;;7934:1;7931;7924:12;7883:55;7784:160;;;:::o;7949:1075::-;8108:6;8116;8124;8132;8140;8148;8156;8164;8172;8180;8233:3;8221:9;8212:7;8208:23;8204:33;8201:53;;;8250:1;8247;8240:12;8201:53;8282:9;8276:16;8301:31;8326:5;8301:31;:::i;:::-;8401:2;8386:18;;8380:25;8351:5;;-1:-1:-1;8414:32:98;8380:25;8414:32;:::i;:::-;8517:2;8502:18;;8496:25;8465:7;;-1:-1:-1;8530:32:98;8496:25;8530:32;:::i;:::-;8581:7;8571:17;;;8628:2;8617:9;8613:18;8607:25;8597:35;;8672:3;8661:9;8657:19;8651:26;8641:36;;8717:3;8706:9;8702:19;8696:26;8686:36;;8762:3;8751:9;8747:19;8741:26;8731:36;;8786:48;8829:3;8818:9;8814:19;8786:48;:::i;:::-;8776:58;;8853:48;8896:3;8885:9;8881:19;8853:48;:::i;:::-;8843:58;;8946:3;8935:9;8931:19;8925:26;8960:32;8984:7;8960:32;:::i;:::-;9011:7;9001:17;;;7949:1075;;;;;;;;;;;;;:::o;9533:184::-;9603:6;9656:2;9644:9;9635:7;9631:23;9627:32;9624:52;;;9672:1;9669;9662:12;9624:52;-1:-1:-1;9695:16:98;;9533:184;-1:-1:-1;9533:184:98:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addAssetsToReserves(uint256)": "cabad50a",
    "assetOf(bytes)": "e170a9bf",
    "assetsUsed(bytes)": "aeffddde",
    "balanceOf(bytes)": "78415365",
    "changeUpkeepFrequency(uint64)": "a5a36dd2",
    "changeUpkeepMaxGas(uint64)": "f2a44d4e",
    "deposit(uint256,bytes,bytes)": "69445c31",
    "feesAndReserves()": "0b050709",
    "identifier()": "7998a1c4",
    "isDebt()": "89353a09",
    "prepareFees(uint256)": "5303907d",
    "revokeApproval(address,address)": "d3bfe76a",
    "setupMetaData(uint32,uint32)": "fa531255",
    "slippage()": "3e032a3b",
    "updateManagementFee(uint32)": "c1cc8d7f",
    "updatePerformanceFee(uint32)": "556d18df",
    "withdraw(uint256,address,bytes,bytes)": "c9111bd7",
    "withdrawAssetsFromReserves(uint256)": "f5f30a5e",
    "withdrawableFrom(bytes,bytes)": "fa50e5d2"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseAdaptor__ExternalReceiverBlocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BaseAdaptor__PricingNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseAdaptor__Slippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseAdaptor__UserDepositsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseAdaptor__UserWithdrawsNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addAssetsToReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"assetOf\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"adaptorData\",\"type\":\"bytes\"}],\"name\":\"assetsUsed\",\"outputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newFrequency\",\"type\":\"uint64\"}],\"name\":\"changeUpkeepFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newMaxGas\",\"type\":\"uint64\"}],\"name\":\"changeUpkeepMaxGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesAndReserves\",\"outputs\":[{\"internalType\":\"contract FeesAndReserves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"prepareFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"managementFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"performanceFee\",\"type\":\"uint32\"}],\"name\":\"setupMetaData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"managementFee\",\"type\":\"uint32\"}],\"name\":\"updateManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceFee\",\"type\":\"uint32\"}],\"name\":\"updatePerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAssetsFromReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdrawableFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"crispymangoes\",\"kind\":\"dev\",\"methods\":{\"identifier()\":{\"details\":\"Identifier unique to this adaptor for a shared registry. Normally the identifier would just be the address of this contract, but this Identifier is needed during Cellar Delegate Call Operations, so getting the address of the adaptor is more difficult.\"},\"revokeApproval(address,address)\":{\"params\":{\"asset\":\"the ERC20 asset to revoke `spender`s approval for\",\"spender\":\"the address to revoke approval for\"}}},\"title\":\"Fees And Reserves Adaptor\",\"version\":1},\"userdoc\":{\"errors\":{\"BaseAdaptor__ExternalReceiverBlocked()\":[{\"notice\":\"Attempted to specify an external receiver during a Cellar `callOnAdaptor` call.\"}],\"BaseAdaptor__PricingNotSupported(address)\":[{\"notice\":\"Attempted swap used unsupported output asset.\"}],\"BaseAdaptor__Slippage()\":[{\"notice\":\"Attempted swap has bad slippage.\"}],\"BaseAdaptor__UserDepositsNotAllowed()\":[{\"notice\":\"Attempted to deposit to a position where user deposits were not allowed.\"}],\"BaseAdaptor__UserWithdrawsNotAllowed()\":[{\"notice\":\"Attempted to withdraw from a position where user withdraws were not allowed.\"}]},\"kind\":\"user\",\"methods\":{\"addAssetsToReserves(uint256)\":{\"notice\":\"Strategists are free to add/remove assets to reserves because it allows them to         inject yield into the cellar during time of under performance, and reserve yield         during times of over performance.\"},\"assetOf(bytes)\":{\"notice\":\"There is no underlying position so return zero address.\"},\"assetsUsed(bytes)\":{\"notice\":\"When positions are added to the Registry, this function can be used in order to figure out         what assets this adaptor needs to price, and confirm pricing is properly setup.\"},\"balanceOf(bytes)\":{\"notice\":\"There is no underlying position so return zero.\"},\"changeUpkeepFrequency(uint64)\":{\"notice\":\"Allows strategist to change how frequently they want their cellars fees calculated.\"},\"changeUpkeepMaxGas(uint64)\":{\"notice\":\"Allows strategist to change the max gas they are willing to pay for fee calculations..\"},\"deposit(uint256,bytes,bytes)\":{\"notice\":\"User deposits are NOT allowed.\"},\"feesAndReserves()\":{\"notice\":\"FeesAndReserves on ETH Mainnet.\"},\"isDebt()\":{\"notice\":\"There is no underlying position so return false.\"},\"prepareFees(uint256)\":{\"notice\":\"Allows strategists to take pending fees owed, and set them up to be distributed using `sendFees` in FeesAndReserves contract.\"},\"revokeApproval(address,address)\":{\"notice\":\"Allows strategists to zero out an approval for a given `asset`.\"},\"setupMetaData(uint32,uint32)\":{\"notice\":\"Setup function strategist must call in order to use FeesAndReserves.\"},\"slippage()\":{\"notice\":\"Max possible slippage when making a swap router swap.\"},\"updateManagementFee(uint32)\":{\"notice\":\"Strategists are free to update their cellar's management fee as they see fit.         Ultimately the competition between strategists will keep this in check, since         a strategist could out perform another strategist simply because they take a smaller fee.\"},\"updatePerformanceFee(uint32)\":{\"notice\":\"Strategists are free to update their cellar's performance fee as they see fit.         Ultimately the competition between strategists will keep this in check, since         a strategist could out perform another strategist simply because they take a smaller fee.\"},\"withdraw(uint256,address,bytes,bytes)\":{\"notice\":\"User withdraws are NOT allowed.\"},\"withdrawAssetsFromReserves(uint256)\":{\"notice\":\"Strategists are free to add/remove assets to reserves because it allows them to         inject yield into the cellar during time of under performance, and reserve yield         during times of over performance.\"},\"withdrawableFrom(bytes,bytes)\":{\"notice\":\"There is no underlying position so return zero.\"}},\"notice\":\"Allows Cellars to interact with Sommelier FeesAndReserves contract         in order to store/withdraw reserves and take fees.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/modules/adaptors/FeesAndReserves/FeesAndReservesAdaptor.sol\":\"FeesAndReservesAdaptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/forge-std/lib/ds-test/src/\",\":@forge-std/=lib/forge-std/src/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":@uniswap/v3-core/=lib/v3-core/\",\":@uniswap/v3-periphery/=lib/v3-periphery/\",\":@uniswapV3C/=lib/v3-core.git/contracts/\",\":@uniswapV3P/=lib/v3-periphery.git/contracts/\",\":chainlink/=lib/chainlink/integration-tests/contracts/ethereum/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\",\":v3-core.git/=lib/v3-core.git/contracts/\",\":v3-periphery.git/=lib/v3-periphery.git/contracts/\"]},\"sources\":{\"lib/chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f39ad60071af2c115e064ebeb1686097efa83b26da0e2c814c635538538b7465\",\"dweb:/ipfs/QmYRARVDA1XZUqZNKNnArYHWbffNeeSVZQjt67ZXKGm85a\"]},\"lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c3f481f69f3ee07d6bb91b38d1cd61f9fa72de29c63d778c98956db70ecd57b\",\"dweb:/ipfs/QmPeJrNHTZF8CrXk3BgLJCamwf1dUEzHyQsMYrdd4v1NEG\"]},\"lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3beaa37ee61e4ab615e250fbf01601ae481de843fd0ef55e6b44fd9d5fff8a7\",\"dweb:/ipfs/QmeZUVwd26LzK4Mfp8Zba5JbQNkZFfTzFu1A6FVMMZDg9c\"]},\"lib/chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b738dba680a6fbc4afc85819743f13f5b7f4790ec8634c9894e1160327b11b6e\",\"dweb:/ipfs/Qmbv3euvQppeBm2g61khcJSRMZWi78xUWzbnjKAvDBnka4\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae2d274bf3d56a6d49a9bbd0a4871c54997a82551eb3eb1c0c39dc98698ff8bf\",\"dweb:/ipfs/QmTT7ty5DPGAmRnx94Xu3TUDYGSPDVLN2bppJAjjedrg1e\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ad84b5dbf40ba9e944cc25bd0a98c51bafd49cff30efe5ef5aef921a70081de\",\"dweb:/ipfs/Qme8iCeqe9VdNgWktTTsSxUfHcJEXuvPaJpshWDzoWj56V\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x182ad835742e188a50bc98b938287d28bf74ad87d01e2bbc1d207c2ba36e1adb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c2ba26b6252bb52b39ffb18b2de027544619e3f71b78e5476eba52becfaae929\",\"dweb:/ipfs/Qmb7NqEzs7aWkrzpskxXCRb799XmPenZMDtpzRvNUph1Bg\"]},\"lib/solmate/src/auth/Owned.sol\":{\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://1ff52bbee698b9cf9e4574615e6550be0887ccf355f6571e23d6f25b332e79b4\",\"dweb:/ipfs/QmVorA2apojVRStzS7h8aFccR3Uv32G6HVtBtFHZrE7YXx\"]},\"lib/solmate/src/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xb282dd78aa7375d6b200b9a5d8dd214b2e5df1004f8217a4b4c2b07f0c5bfd01\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://5fca62eb8d3dbd2b3b7e4bb051f6da16f4d0ff9cee61c39cebb80f031f6a8800\",\"dweb:/ipfs/QmbrsXPK91iBFwHKwJs2HLRud2KzMoBDRiWYMUtyV5H57j\"]},\"src/Registry.sol\":{\"keccak256\":\"0x72690631323f459be3da7dd7c4644a7678a509ff6fd9a76fc6f77124ba96bcb3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://237231d6746fbf8d95ec0fc07ee1ddc0978ae77ef12fe00f445e9f22232d1108\",\"dweb:/ipfs/QmbSKScTxX8nxNnjogci32r3fRexDfFG4sH4myE85AewQp\"]},\"src/base/Cellar.sol\":{\"keccak256\":\"0x851d6f03d13fcd1e4e55d40ab04908677ef1ec92dbcaf3c02ee492602c368d67\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0eff90da37039eb4fb743024373d46ce6ccc198b5cb5c61c628f7a160d94fd0b\",\"dweb:/ipfs/QmUoLuGxVU5UqKNUB75BxMvYnpTxxcq8ZiUskrTTx8WbJA\"]},\"src/base/ERC20.sol\":{\"keccak256\":\"0x6aeb5d5df72734774379b54cf7fdce21206275047f4fcaa536448fefb1bd7b02\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://e9d380b96bb23fe5e04a4a1f97e047c43dab65c9bbb69c9e0bf0def04fa042e4\",\"dweb:/ipfs/QmdNwDQXnNxbvxaAhiNDjvEdLC8qtom43H2d68NMAyrtyf\"]},\"src/base/ERC4626.sol\":{\"keccak256\":\"0x13989d2c6e0dcda91407ffb7c28a52ab627db289a4d75dd5f3e4deb219dca9e7\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://d493aa7fdcb779cd22f6b89089964ece46ea6d4fa0f99858cf181efb4cbee469\",\"dweb:/ipfs/QmZ2zHAHNmGi3iGcynGcPSppW97xYPh3yHDnxW7Ev7RasE\"]},\"src/base/Multicall.sol\":{\"keccak256\":\"0xcbb4381e9a730f94f98b2712167a6b369c27088d56dc1c1c45dff3b9f67626b9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b44d36d06c372cd871596a1147f69cc4a5fee42a0619517797db1c4426cc7b8c\",\"dweb:/ipfs/QmYeevkoTG2RmUPNzjikoJwp4SQkdSs9iPj7hjQh2Y9e5K\"]},\"src/base/SafeTransferLib.sol\":{\"keccak256\":\"0xb57fc6788a996b929a66b113fc47e5819778ce05e9f29beb9dd9ab2e26b22324\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://5dbce65cf972cbb4ea1173b4590ccbbdd134c24ad144484d2b9eb3006fdb860a\",\"dweb:/ipfs/QmeRkh21aTiZ9kiFr8grzFDzJvbydWeowZEBkG5kxtfQN3\"]},\"src/interfaces/IMulticall.sol\":{\"keccak256\":\"0xd10f58af0778cfc7f3758154066fc0ebbd3e360b1a6959c283ccf7c2a9e9634e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b218fd6c1571e3a16e8dc75f0237f797905b9a449d523e48d9dcb99473ed6ba0\",\"dweb:/ipfs/Qmet1GzEJ3Fq1FbKhr3MNFb8LpUkx37ynFCvoFKjkmBCU5\"]},\"src/interfaces/external/IAaveToken.sol\":{\"keccak256\":\"0x77cd64637e4c0fd379b2d4d826bcd9f64fc706a291ce77d023f693d1eb8e45d8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e87630603401ff3374cb610b765e46a3a235ef294fab212cf3116a35db7c4d58\",\"dweb:/ipfs/Qma8awSuYptmpBsWUMz9NZBogVRtVQwXF5cvfsVWpNKhc3\"]},\"src/interfaces/external/IChainlinkAggregator.sol\":{\"keccak256\":\"0x5fc642cff679c1cc6e93b5eadd2089b6adb85a1a8c46106388c836a1447e228d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9f6a5dc12a8d3c06463eb6ed638349fd0502d7fedb75da873f888416755ea3b2\",\"dweb:/ipfs/QmdDnsLaaGvKKxuvdGTiroKrXMP3eW75GjSW3HK7GySfVs\"]},\"src/interfaces/external/ICurvePool.sol\":{\"keccak256\":\"0x9ae71865252aeca89fd6c74013eded1d8029eccc46e3604291be16e97b89a5da\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://f504248ab846844bcd771226f7b2984455ddcc746357924fce50a41b65eec9e2\",\"dweb:/ipfs/QmQVe1VZUgxUab9ocsbrX42Ust3hs83BU3bpA1j6Cx1xo6\"]},\"src/interfaces/external/IGravity.sol\":{\"keccak256\":\"0xb862f0644274b9c268f508e9dc880770962b9095f340695a97a1cb2eb9789a11\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://533a9626cafd2260be6aa9cd9fbe305eb60e4208e43119c17ac0d33d41d07c51\",\"dweb:/ipfs/QmdmsXd9oozXdmCP4Fyt59VtKqm1spMgtU21LeuS85nG4c\"]},\"src/interfaces/external/IUniswapV2Router02.sol\":{\"keccak256\":\"0xee672165cfe63278b41b7e9c0ae34ad18d75f432c6c5583e9940c207a1a2464f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://10443d195fd79197bb27b110345d5cef5b49fc1acff5e82164abd8cd04cbf47a\",\"dweb:/ipfs/QmNnVhv7YNuMWUS7S1kDpZLAcoKdmSm9ADwGoxL5wgzTGo\"]},\"src/interfaces/external/IUniswapV3Router.sol\":{\"keccak256\":\"0x2c8578bd46f2de289ca1eb8c7a5c4412f3abdc6d61acbb07ec565ff1e5e80355\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2b82a6d1fc71e09611d80dce96286f0546d1629bdee4e3686d6d528473187fd\",\"dweb:/ipfs/QmciPSKvHDjnFHRtjDwmdoiihwtDCFRZu1wfjnxuhYivMK\"]},\"src/modules/FeesAndReserves.sol\":{\"keccak256\":\"0x7b5fb1a3c2a46dc27653521fd2048a6189edd6e24f0a28630c0abea884b6498e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9db767723210052f20faf483bb7fe46f0f77ade338c1ac0683adc5d36b6ea8cf\",\"dweb:/ipfs/QmdyJwJ4ocKvF4rrLGXHDXKkZFKdi3fppHKrcFuUmaz5vy\"]},\"src/modules/adaptors/BaseAdaptor.sol\":{\"keccak256\":\"0xb45700da63110e41cbb1879c3d261763644bc851effa798721cf7eca3e039f9a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7810084abb53310d5d50f5ca55557e9dcdc8fef6c987e55d82a7748aad467e27\",\"dweb:/ipfs/QmaieqMfgwWJvFy8q3jVrx8Fifo6M9UZM8cBjpmyNFPc5j\"]},\"src/modules/adaptors/FeesAndReserves/FeesAndReservesAdaptor.sol\":{\"keccak256\":\"0xa12e98e5d2c32f8723b05a0acaf460f44f7b2493173f778a614e5b44b24da43a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2ca442626aefdf36486f689329d8e4365f6affed16a1dfdda8e93a4c1af92499\",\"dweb:/ipfs/QmSDQCtihFqfW2nd1KS66k7GKFX3UGtrDZg1t1SuQaZSnU\"]},\"src/modules/adaptors/PositionlessAdaptor.sol\":{\"keccak256\":\"0x18c88c51bcdc7aeeba72f42ad6e761831f8246c1f58852406279b163d0a68c67\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://734b5e5d9514a5e1b531346f339cb2f628168586ece79092756ad227da02383d\",\"dweb:/ipfs/QmU6vGcQ67EDFSHJVKvfeosp9p1QjCnZwUFvFCsMG3cNQi\"]},\"src/modules/price-router/PriceRouter.sol\":{\"keccak256\":\"0x3d0fb1c107cfbd5b72660b548a9749dfd0d07d9a0b5abdf554d593ee00569550\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://f90a60a3097007a1dcd2871db79b0df74cf2a18de5126fc2bd2896f2715e93af\",\"dweb:/ipfs/QmTDqnNN9Rv29MYHCAzZsKzsDbTBMYYQi17VEwhmbE6KYC\"]},\"src/modules/swap-router/SwapRouter.sol\":{\"keccak256\":\"0x2cc9c40333f0cb43d937124d8db088334e48280c8af2b9ebef7675daf167eb80\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://87efec51915ae91561e3ee7ea97f3a0daff4826c0f5974ba404f4fa25aa46818\",\"dweb:/ipfs/QmSig68SbFz12nvm3MkLVvtyKQMFX8W1tMNqn6RCNhAVGr\"]},\"src/utils/Math.sol\":{\"keccak256\":\"0xdec791a31325162117ed7856d7042f3f58885d29044a5ab7fa266a68551c485f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://87be5c0da99226925af33c0121802fc009ddee39becdcce2e60db01813bc8312\",\"dweb:/ipfs/QmXxgS5tfWBQF5pYHoX5HMbcRMW27iTALZGKyyVuAi7A8r\"]},\"src/utils/Uint32Array.sol\":{\"keccak256\":\"0x418cd655203ebf671b76cbae3a1594c44356b5ca91c9f9e7eb5de07013e300d9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b31b9db2d85bd7c41949307ef37903ff347f57b21f4b8d81a637dbfc1deed944\",\"dweb:/ipfs/QmScY9Jm2rsihu7QToNYuxLWADjmRjwxbScEGRwvXK29p3\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__ExternalReceiverBlocked"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "BaseAdaptor__PricingNotSupported"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__Slippage"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__UserDepositsNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseAdaptor__UserWithdrawsNotAllowed"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addAssetsToReserves"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "assetOf",
          "outputs": [
            {
              "internalType": "contract ERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "adaptorData",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "assetsUsed",
          "outputs": [
            {
              "internalType": "contract ERC20[]",
              "name": "assets",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "newFrequency",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeUpkeepFrequency"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "newMaxGas",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeUpkeepMaxGas"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "deposit"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "feesAndReserves",
          "outputs": [
            {
              "internalType": "contract FeesAndReserves",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "identifier",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isDebt",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "prepareFees"
        },
        {
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeApproval"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "managementFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "performanceFee",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setupMetaData"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "slippage",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "managementFee",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateManagementFee"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "performanceFee",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updatePerformanceFee"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "withdraw"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawAssetsFromReserves"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "withdrawableFrom",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "identifier()": {
            "details": "Identifier unique to this adaptor for a shared registry. Normally the identifier would just be the address of this contract, but this Identifier is needed during Cellar Delegate Call Operations, so getting the address of the adaptor is more difficult."
          },
          "revokeApproval(address,address)": {
            "params": {
              "asset": "the ERC20 asset to revoke `spender`s approval for",
              "spender": "the address to revoke approval for"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addAssetsToReserves(uint256)": {
            "notice": "Strategists are free to add/remove assets to reserves because it allows them to         inject yield into the cellar during time of under performance, and reserve yield         during times of over performance."
          },
          "assetOf(bytes)": {
            "notice": "There is no underlying position so return zero address."
          },
          "assetsUsed(bytes)": {
            "notice": "When positions are added to the Registry, this function can be used in order to figure out         what assets this adaptor needs to price, and confirm pricing is properly setup."
          },
          "balanceOf(bytes)": {
            "notice": "There is no underlying position so return zero."
          },
          "changeUpkeepFrequency(uint64)": {
            "notice": "Allows strategist to change how frequently they want their cellars fees calculated."
          },
          "changeUpkeepMaxGas(uint64)": {
            "notice": "Allows strategist to change the max gas they are willing to pay for fee calculations.."
          },
          "deposit(uint256,bytes,bytes)": {
            "notice": "User deposits are NOT allowed."
          },
          "feesAndReserves()": {
            "notice": "FeesAndReserves on ETH Mainnet."
          },
          "isDebt()": {
            "notice": "There is no underlying position so return false."
          },
          "prepareFees(uint256)": {
            "notice": "Allows strategists to take pending fees owed, and set them up to be distributed using `sendFees` in FeesAndReserves contract."
          },
          "revokeApproval(address,address)": {
            "notice": "Allows strategists to zero out an approval for a given `asset`."
          },
          "setupMetaData(uint32,uint32)": {
            "notice": "Setup function strategist must call in order to use FeesAndReserves."
          },
          "slippage()": {
            "notice": "Max possible slippage when making a swap router swap."
          },
          "updateManagementFee(uint32)": {
            "notice": "Strategists are free to update their cellar's management fee as they see fit.         Ultimately the competition between strategists will keep this in check, since         a strategist could out perform another strategist simply because they take a smaller fee."
          },
          "updatePerformanceFee(uint32)": {
            "notice": "Strategists are free to update their cellar's performance fee as they see fit.         Ultimately the competition between strategists will keep this in check, since         a strategist could out perform another strategist simply because they take a smaller fee."
          },
          "withdraw(uint256,address,bytes,bytes)": {
            "notice": "User withdraws are NOT allowed."
          },
          "withdrawAssetsFromReserves(uint256)": {
            "notice": "Strategists are free to add/remove assets to reserves because it allows them to         inject yield into the cellar during time of under performance, and reserve yield         during times of over performance."
          },
          "withdrawableFrom(bytes,bytes)": {
            "notice": "There is no underlying position so return zero."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@chainlink/=lib/chainlink/",
        ":@ds-test/=lib/forge-std/lib/ds-test/src/",
        ":@forge-std/=lib/forge-std/src/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/src/",
        ":@uniswap/v3-core/=lib/v3-core/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/",
        ":@uniswapV3C/=lib/v3-core.git/contracts/",
        ":@uniswapV3P/=lib/v3-periphery.git/contracts/",
        ":chainlink/=lib/chainlink/integration-tests/contracts/ethereum/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":solmate/=lib/solmate/src/",
        ":v3-core.git/=lib/v3-core.git/contracts/",
        ":v3-periphery.git/=lib/v3-periphery.git/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/modules/adaptors/FeesAndReserves/FeesAndReservesAdaptor.sol": "FeesAndReservesAdaptor"
      },
      "libraries": {}
    },
    "sources": {
      "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
        "keccak256": "0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7",
        "urls": [
          "bzz-raw://f39ad60071af2c115e064ebeb1686097efa83b26da0e2c814c635538538b7465",
          "dweb:/ipfs/QmYRARVDA1XZUqZNKNnArYHWbffNeeSVZQjt67ZXKGm85a"
        ],
        "license": "MIT"
      },
      "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
        "keccak256": "0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2",
        "urls": [
          "bzz-raw://7c3f481f69f3ee07d6bb91b38d1cd61f9fa72de29c63d778c98956db70ecd57b",
          "dweb:/ipfs/QmPeJrNHTZF8CrXk3BgLJCamwf1dUEzHyQsMYrdd4v1NEG"
        ],
        "license": "MIT"
      },
      "lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
        "keccak256": "0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846",
        "urls": [
          "bzz-raw://b3beaa37ee61e4ab615e250fbf01601ae481de843fd0ef55e6b44fd9d5fff8a7",
          "dweb:/ipfs/QmeZUVwd26LzK4Mfp8Zba5JbQNkZFfTzFu1A6FVMMZDg9c"
        ],
        "license": "MIT"
      },
      "lib/chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
        "keccak256": "0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340",
        "urls": [
          "bzz-raw://b738dba680a6fbc4afc85819743f13f5b7f4790ec8634c9894e1160327b11b6e",
          "dweb:/ipfs/Qmbv3euvQppeBm2g61khcJSRMZWi78xUWzbnjKAvDBnka4"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
        "urls": [
          "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
          "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol": {
        "keccak256": "0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028",
        "urls": [
          "bzz-raw://ae2d274bf3d56a6d49a9bbd0a4871c54997a82551eb3eb1c0c39dc98698ff8bf",
          "dweb:/ipfs/QmTT7ty5DPGAmRnx94Xu3TUDYGSPDVLN2bppJAjjedrg1e"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700",
        "urls": [
          "bzz-raw://2ad84b5dbf40ba9e944cc25bd0a98c51bafd49cff30efe5ef5aef921a70081de",
          "dweb:/ipfs/Qme8iCeqe9VdNgWktTTsSxUfHcJEXuvPaJpshWDzoWj56V"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x182ad835742e188a50bc98b938287d28bf74ad87d01e2bbc1d207c2ba36e1adb",
        "urls": [
          "bzz-raw://c2ba26b6252bb52b39ffb18b2de027544619e3f71b78e5476eba52becfaae929",
          "dweb:/ipfs/Qmb7NqEzs7aWkrzpskxXCRb799XmPenZMDtpzRvNUph1Bg"
        ],
        "license": "MIT"
      },
      "lib/solmate/src/auth/Owned.sol": {
        "keccak256": "0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea",
        "urls": [
          "bzz-raw://1ff52bbee698b9cf9e4574615e6550be0887ccf355f6571e23d6f25b332e79b4",
          "dweb:/ipfs/QmVorA2apojVRStzS7h8aFccR3Uv32G6HVtBtFHZrE7YXx"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/utils/ReentrancyGuard.sol": {
        "keccak256": "0xb282dd78aa7375d6b200b9a5d8dd214b2e5df1004f8217a4b4c2b07f0c5bfd01",
        "urls": [
          "bzz-raw://5fca62eb8d3dbd2b3b7e4bb051f6da16f4d0ff9cee61c39cebb80f031f6a8800",
          "dweb:/ipfs/QmbrsXPK91iBFwHKwJs2HLRud2KzMoBDRiWYMUtyV5H57j"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/Registry.sol": {
        "keccak256": "0x72690631323f459be3da7dd7c4644a7678a509ff6fd9a76fc6f77124ba96bcb3",
        "urls": [
          "bzz-raw://237231d6746fbf8d95ec0fc07ee1ddc0978ae77ef12fe00f445e9f22232d1108",
          "dweb:/ipfs/QmbSKScTxX8nxNnjogci32r3fRexDfFG4sH4myE85AewQp"
        ],
        "license": "Apache-2.0"
      },
      "src/base/Cellar.sol": {
        "keccak256": "0x851d6f03d13fcd1e4e55d40ab04908677ef1ec92dbcaf3c02ee492602c368d67",
        "urls": [
          "bzz-raw://0eff90da37039eb4fb743024373d46ce6ccc198b5cb5c61c628f7a160d94fd0b",
          "dweb:/ipfs/QmUoLuGxVU5UqKNUB75BxMvYnpTxxcq8ZiUskrTTx8WbJA"
        ],
        "license": "Apache-2.0"
      },
      "src/base/ERC20.sol": {
        "keccak256": "0x6aeb5d5df72734774379b54cf7fdce21206275047f4fcaa536448fefb1bd7b02",
        "urls": [
          "bzz-raw://e9d380b96bb23fe5e04a4a1f97e047c43dab65c9bbb69c9e0bf0def04fa042e4",
          "dweb:/ipfs/QmdNwDQXnNxbvxaAhiNDjvEdLC8qtom43H2d68NMAyrtyf"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/base/ERC4626.sol": {
        "keccak256": "0x13989d2c6e0dcda91407ffb7c28a52ab627db289a4d75dd5f3e4deb219dca9e7",
        "urls": [
          "bzz-raw://d493aa7fdcb779cd22f6b89089964ece46ea6d4fa0f99858cf181efb4cbee469",
          "dweb:/ipfs/QmZ2zHAHNmGi3iGcynGcPSppW97xYPh3yHDnxW7Ev7RasE"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/base/Multicall.sol": {
        "keccak256": "0xcbb4381e9a730f94f98b2712167a6b369c27088d56dc1c1c45dff3b9f67626b9",
        "urls": [
          "bzz-raw://b44d36d06c372cd871596a1147f69cc4a5fee42a0619517797db1c4426cc7b8c",
          "dweb:/ipfs/QmYeevkoTG2RmUPNzjikoJwp4SQkdSs9iPj7hjQh2Y9e5K"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/base/SafeTransferLib.sol": {
        "keccak256": "0xb57fc6788a996b929a66b113fc47e5819778ce05e9f29beb9dd9ab2e26b22324",
        "urls": [
          "bzz-raw://5dbce65cf972cbb4ea1173b4590ccbbdd134c24ad144484d2b9eb3006fdb860a",
          "dweb:/ipfs/QmeRkh21aTiZ9kiFr8grzFDzJvbydWeowZEBkG5kxtfQN3"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/interfaces/IMulticall.sol": {
        "keccak256": "0xd10f58af0778cfc7f3758154066fc0ebbd3e360b1a6959c283ccf7c2a9e9634e",
        "urls": [
          "bzz-raw://b218fd6c1571e3a16e8dc75f0237f797905b9a449d523e48d9dcb99473ed6ba0",
          "dweb:/ipfs/Qmet1GzEJ3Fq1FbKhr3MNFb8LpUkx37ynFCvoFKjkmBCU5"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/interfaces/external/IAaveToken.sol": {
        "keccak256": "0x77cd64637e4c0fd379b2d4d826bcd9f64fc706a291ce77d023f693d1eb8e45d8",
        "urls": [
          "bzz-raw://e87630603401ff3374cb610b765e46a3a235ef294fab212cf3116a35db7c4d58",
          "dweb:/ipfs/Qma8awSuYptmpBsWUMz9NZBogVRtVQwXF5cvfsVWpNKhc3"
        ],
        "license": "MIT"
      },
      "src/interfaces/external/IChainlinkAggregator.sol": {
        "keccak256": "0x5fc642cff679c1cc6e93b5eadd2089b6adb85a1a8c46106388c836a1447e228d",
        "urls": [
          "bzz-raw://9f6a5dc12a8d3c06463eb6ed638349fd0502d7fedb75da873f888416755ea3b2",
          "dweb:/ipfs/QmdDnsLaaGvKKxuvdGTiroKrXMP3eW75GjSW3HK7GySfVs"
        ],
        "license": "Apache-2.0"
      },
      "src/interfaces/external/ICurvePool.sol": {
        "keccak256": "0x9ae71865252aeca89fd6c74013eded1d8029eccc46e3604291be16e97b89a5da",
        "urls": [
          "bzz-raw://f504248ab846844bcd771226f7b2984455ddcc746357924fce50a41b65eec9e2",
          "dweb:/ipfs/QmQVe1VZUgxUab9ocsbrX42Ust3hs83BU3bpA1j6Cx1xo6"
        ],
        "license": "Apache-2.0"
      },
      "src/interfaces/external/IGravity.sol": {
        "keccak256": "0xb862f0644274b9c268f508e9dc880770962b9095f340695a97a1cb2eb9789a11",
        "urls": [
          "bzz-raw://533a9626cafd2260be6aa9cd9fbe305eb60e4208e43119c17ac0d33d41d07c51",
          "dweb:/ipfs/QmdmsXd9oozXdmCP4Fyt59VtKqm1spMgtU21LeuS85nG4c"
        ],
        "license": "Apache-2.0"
      },
      "src/interfaces/external/IUniswapV2Router02.sol": {
        "keccak256": "0xee672165cfe63278b41b7e9c0ae34ad18d75f432c6c5583e9940c207a1a2464f",
        "urls": [
          "bzz-raw://10443d195fd79197bb27b110345d5cef5b49fc1acff5e82164abd8cd04cbf47a",
          "dweb:/ipfs/QmNnVhv7YNuMWUS7S1kDpZLAcoKdmSm9ADwGoxL5wgzTGo"
        ],
        "license": "Apache-2.0"
      },
      "src/interfaces/external/IUniswapV3Router.sol": {
        "keccak256": "0x2c8578bd46f2de289ca1eb8c7a5c4412f3abdc6d61acbb07ec565ff1e5e80355",
        "urls": [
          "bzz-raw://f2b82a6d1fc71e09611d80dce96286f0546d1629bdee4e3686d6d528473187fd",
          "dweb:/ipfs/QmciPSKvHDjnFHRtjDwmdoiihwtDCFRZu1wfjnxuhYivMK"
        ],
        "license": "GPL-2.0-or-later"
      },
      "src/modules/FeesAndReserves.sol": {
        "keccak256": "0x7b5fb1a3c2a46dc27653521fd2048a6189edd6e24f0a28630c0abea884b6498e",
        "urls": [
          "bzz-raw://9db767723210052f20faf483bb7fe46f0f77ade338c1ac0683adc5d36b6ea8cf",
          "dweb:/ipfs/QmdyJwJ4ocKvF4rrLGXHDXKkZFKdi3fppHKrcFuUmaz5vy"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/adaptors/BaseAdaptor.sol": {
        "keccak256": "0xb45700da63110e41cbb1879c3d261763644bc851effa798721cf7eca3e039f9a",
        "urls": [
          "bzz-raw://7810084abb53310d5d50f5ca55557e9dcdc8fef6c987e55d82a7748aad467e27",
          "dweb:/ipfs/QmaieqMfgwWJvFy8q3jVrx8Fifo6M9UZM8cBjpmyNFPc5j"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/adaptors/FeesAndReserves/FeesAndReservesAdaptor.sol": {
        "keccak256": "0xa12e98e5d2c32f8723b05a0acaf460f44f7b2493173f778a614e5b44b24da43a",
        "urls": [
          "bzz-raw://2ca442626aefdf36486f689329d8e4365f6affed16a1dfdda8e93a4c1af92499",
          "dweb:/ipfs/QmSDQCtihFqfW2nd1KS66k7GKFX3UGtrDZg1t1SuQaZSnU"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/adaptors/PositionlessAdaptor.sol": {
        "keccak256": "0x18c88c51bcdc7aeeba72f42ad6e761831f8246c1f58852406279b163d0a68c67",
        "urls": [
          "bzz-raw://734b5e5d9514a5e1b531346f339cb2f628168586ece79092756ad227da02383d",
          "dweb:/ipfs/QmU6vGcQ67EDFSHJVKvfeosp9p1QjCnZwUFvFCsMG3cNQi"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/price-router/PriceRouter.sol": {
        "keccak256": "0x3d0fb1c107cfbd5b72660b548a9749dfd0d07d9a0b5abdf554d593ee00569550",
        "urls": [
          "bzz-raw://f90a60a3097007a1dcd2871db79b0df74cf2a18de5126fc2bd2896f2715e93af",
          "dweb:/ipfs/QmTDqnNN9Rv29MYHCAzZsKzsDbTBMYYQi17VEwhmbE6KYC"
        ],
        "license": "Apache-2.0"
      },
      "src/modules/swap-router/SwapRouter.sol": {
        "keccak256": "0x2cc9c40333f0cb43d937124d8db088334e48280c8af2b9ebef7675daf167eb80",
        "urls": [
          "bzz-raw://87efec51915ae91561e3ee7ea97f3a0daff4826c0f5974ba404f4fa25aa46818",
          "dweb:/ipfs/QmSig68SbFz12nvm3MkLVvtyKQMFX8W1tMNqn6RCNhAVGr"
        ],
        "license": "Apache-2.0"
      },
      "src/utils/Math.sol": {
        "keccak256": "0xdec791a31325162117ed7856d7042f3f58885d29044a5ab7fa266a68551c485f",
        "urls": [
          "bzz-raw://87be5c0da99226925af33c0121802fc009ddee39becdcce2e60db01813bc8312",
          "dweb:/ipfs/QmXxgS5tfWBQF5pYHoX5HMbcRMW27iTALZGKyyVuAi7A8r"
        ],
        "license": "Apache-2.0"
      },
      "src/utils/Uint32Array.sol": {
        "keccak256": "0x418cd655203ebf671b76cbae3a1594c44356b5ca91c9f9e7eb5de07013e300d9",
        "urls": [
          "bzz-raw://b31b9db2d85bd7c41949307ef37903ff347f57b21f4b8d81a637dbfc1deed944",
          "dweb:/ipfs/QmScY9Jm2rsihu7QToNYuxLWADjmRjwxbScEGRwvXK29p3"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/modules/adaptors/FeesAndReserves/FeesAndReservesAdaptor.sol",
    "id": 46195,
    "exportedSymbols": {
      "Cellar": [
        33437
      ],
      "ERC20": [
        34556
      ],
      "FeesAndReserves": [
        41560
      ],
      "FeesAndReservesAdaptor": [
        46194
      ],
      "Math": [
        54508
      ],
      "PositionlessAdaptor": [
        46478
      ],
      "Registry": [
        30033
      ],
      "SafeTransferLib": [
        35307
      ],
      "SwapRouter": [
        53227
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:5024:84",
    "nodes": [
      {
        "id": 45997,
        "nodeType": "PragmaDirective",
        "src": "39:23:84",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".16"
        ]
      },
      {
        "id": 46004,
        "nodeType": "ImportDirective",
        "src": "64:114:84",
        "nodes": [],
        "absolutePath": "src/modules/adaptors/BaseAdaptor.sol",
        "file": "src/modules/adaptors/BaseAdaptor.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 46195,
        "sourceUnit": 43963,
        "symbolAliases": [
          {
            "foreign": {
              "id": 45998,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 34556,
              "src": "73:5:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 45999,
              "name": "SafeTransferLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 35307,
              "src": "80:15:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 46000,
              "name": "Cellar",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 33437,
              "src": "97:6:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 46001,
              "name": "SwapRouter",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53227,
              "src": "105:10:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 46002,
              "name": "Registry",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 30033,
              "src": "117:8:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 46003,
              "name": "Math",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 54508,
              "src": "127:4:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 46006,
        "nodeType": "ImportDirective",
        "src": "179:66:84",
        "nodes": [],
        "absolutePath": "src/modules/FeesAndReserves.sol",
        "file": "src/modules/FeesAndReserves.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 46195,
        "sourceUnit": 41561,
        "symbolAliases": [
          {
            "foreign": {
              "id": 46005,
              "name": "FeesAndReserves",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41560,
              "src": "188:15:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 46008,
        "nodeType": "ImportDirective",
        "src": "246:83:84",
        "nodes": [],
        "absolutePath": "src/modules/adaptors/PositionlessAdaptor.sol",
        "file": "src/modules/adaptors/PositionlessAdaptor.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 46195,
        "sourceUnit": 46479,
        "symbolAliases": [
          {
            "foreign": {
              "id": 46007,
              "name": "PositionlessAdaptor",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46478,
              "src": "255:19:84",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 46194,
        "nodeType": "ContractDefinition",
        "src": "540:4522:84",
        "nodes": [
          {
            "id": 46015,
            "nodeType": "UsingForDirective",
            "src": "601:32:84",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 46012,
              "name": "SafeTransferLib",
              "nameLocations": [
                "607:15:84"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 35307,
              "src": "607:15:84"
            },
            "typeName": {
              "id": 46014,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 46013,
                "name": "ERC20",
                "nameLocations": [
                  "627:5:84"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 34556,
                "src": "627:5:84"
              },
              "referencedDeclaration": 34556,
              "src": "627:5:84",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$34556",
                "typeString": "contract ERC20"
              }
            }
          },
          {
            "id": 46018,
            "nodeType": "UsingForDirective",
            "src": "638:23:84",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 46016,
              "name": "Math",
              "nameLocations": [
                "644:4:84"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 54508,
              "src": "644:4:84"
            },
            "typeName": {
              "id": 46017,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "653:7:84",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 46033,
            "nodeType": "FunctionDefinition",
            "src": "1561:141:84",
            "nodes": [],
            "body": {
              "id": 46032,
              "nodeType": "Block",
              "src": "1622:80:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "4665657320416e642052657365727665732041646170746f72205620312e30",
                            "id": 46028,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1660:33:84",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_63a8c17b248e83a31cfc8d6e222e23aa7e75dd007a37ad2296216636abcbe490",
                              "typeString": "literal_string \"Fees And Reserves Adaptor V 1.0\""
                            },
                            "value": "Fees And Reserves Adaptor V 1.0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_63a8c17b248e83a31cfc8d6e222e23aa7e75dd007a37ad2296216636abcbe490",
                              "typeString": "literal_string \"Fees And Reserves Adaptor V 1.0\""
                            }
                          ],
                          "expression": {
                            "id": 46026,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1649:3:84",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 46027,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "1653:6:84",
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "1649:10:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 46029,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1649:45:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 46025,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "1639:9:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 46030,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1639:56:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 46024,
                  "id": 46031,
                  "nodeType": "Return",
                  "src": "1632:63:84"
                }
              ]
            },
            "baseFunctions": [
              43752
            ],
            "documentation": {
              "id": 46019,
              "nodeType": "StructuredDocumentation",
              "src": "1260:296:84",
              "text": " @dev Identifier unique to this adaptor for a shared registry.\n Normally the identifier would just be the address of this contract, but this\n Identifier is needed during Cellar Delegate Call Operations, so getting the address\n of the adaptor is more difficult."
            },
            "functionSelector": "7998a1c4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "identifier",
            "nameLocation": "1570:10:84",
            "overrides": {
              "id": 46021,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1595:8:84"
            },
            "parameters": {
              "id": 46020,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1580:2:84"
            },
            "returnParameters": {
              "id": 46024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46023,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 46033,
                  "src": "1613:7:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 46022,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1613:7:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1612:9:84"
            },
            "scope": 46194,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46045,
            "nodeType": "FunctionDefinition",
            "src": "1771:156:84",
            "nodes": [],
            "body": {
              "id": 46044,
              "nodeType": "Block",
              "src": "1844:83:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "307861304362383839373037643432364137413338363837304130336263373064316230363937353938",
                        "id": 46041,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1877:42:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xa0Cb889707d426A7A386870A03bc70d1b0697598"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 46040,
                      "name": "FeesAndReserves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41560,
                      "src": "1861:15:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_FeesAndReserves_$41560_$",
                        "typeString": "type(contract FeesAndReserves)"
                      }
                    },
                    "id": 46042,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1861:59:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                      "typeString": "contract FeesAndReserves"
                    }
                  },
                  "functionReturnParameters": 46039,
                  "id": 46043,
                  "nodeType": "Return",
                  "src": "1854:66:84"
                }
              ]
            },
            "documentation": {
              "id": 46034,
              "nodeType": "StructuredDocumentation",
              "src": "1708:58:84",
              "text": " @notice FeesAndReserves on ETH Mainnet."
            },
            "functionSelector": "0b050709",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "feesAndReserves",
            "nameLocation": "1780:15:84",
            "parameters": {
              "id": 46035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1795:2:84"
            },
            "returnParameters": {
              "id": 46039,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46038,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 46045,
                  "src": "1827:15:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                    "typeString": "contract FeesAndReserves"
                  },
                  "typeName": {
                    "id": 46037,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 46036,
                      "name": "FeesAndReserves",
                      "nameLocations": [
                        "1827:15:84"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 41560,
                      "src": "1827:15:84"
                    },
                    "referencedDeclaration": 41560,
                    "src": "1827:15:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                      "typeString": "contract FeesAndReserves"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1826:17:84"
            },
            "scope": 46194,
            "stateMutability": "pure",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 46058,
            "nodeType": "FunctionDefinition",
            "src": "2358:131:84",
            "nodes": [],
            "body": {
              "id": 46057,
              "nodeType": "Block",
              "src": "2418:71:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46054,
                        "name": "performanceFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46048,
                        "src": "2467:14:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46051,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "2428:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46052,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2428:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46053,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2446:20:84",
                      "memberName": "updatePerformanceFee",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40636,
                      "src": "2428:38:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint32_$returns$__$",
                        "typeString": "function (uint32) external"
                      }
                    },
                    "id": 46055,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2428:54:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46056,
                  "nodeType": "ExpressionStatement",
                  "src": "2428:54:84"
                }
              ]
            },
            "documentation": {
              "id": 46046,
              "nodeType": "StructuredDocumentation",
              "src": "2050:303:84",
              "text": " @notice Strategists are free to update their cellar's performance fee as they see fit.\n         Ultimately the competition between strategists will keep this in check, since\n         a strategist could out perform another strategist simply because they take a smaller fee."
            },
            "functionSelector": "556d18df",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updatePerformanceFee",
            "nameLocation": "2367:20:84",
            "parameters": {
              "id": 46049,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46048,
                  "mutability": "mutable",
                  "name": "performanceFee",
                  "nameLocation": "2395:14:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46058,
                  "src": "2388:21:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 46047,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2388:6:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2387:23:84"
            },
            "returnParameters": {
              "id": 46050,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2418:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46071,
            "nodeType": "FunctionDefinition",
            "src": "2802:127:84",
            "nodes": [],
            "body": {
              "id": 46070,
              "nodeType": "Block",
              "src": "2860:69:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46067,
                        "name": "managementFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46061,
                        "src": "2908:13:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46064,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "2870:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2870:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46066,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2888:19:84",
                      "memberName": "updateManagementFee",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40683,
                      "src": "2870:37:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint32_$returns$__$",
                        "typeString": "function (uint32) external"
                      }
                    },
                    "id": 46068,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2870:52:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46069,
                  "nodeType": "ExpressionStatement",
                  "src": "2870:52:84"
                }
              ]
            },
            "documentation": {
              "id": 46059,
              "nodeType": "StructuredDocumentation",
              "src": "2495:302:84",
              "text": " @notice Strategists are free to update their cellar's management fee as they see fit.\n         Ultimately the competition between strategists will keep this in check, since\n         a strategist could out perform another strategist simply because they take a smaller fee."
            },
            "functionSelector": "c1cc8d7f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateManagementFee",
            "nameLocation": "2811:19:84",
            "parameters": {
              "id": 46062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46061,
                  "mutability": "mutable",
                  "name": "managementFee",
                  "nameLocation": "2838:13:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46071,
                  "src": "2831:20:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 46060,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2831:6:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2830:22:84"
            },
            "returnParameters": {
              "id": 46063,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2860:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46084,
            "nodeType": "FunctionDefinition",
            "src": "3050:129:84",
            "nodes": [],
            "body": {
              "id": 46083,
              "nodeType": "Block",
              "src": "3109:70:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46080,
                        "name": "newFrequency",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46074,
                        "src": "3159:12:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46077,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "3119:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46078,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3119:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46079,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3137:21:84",
                      "memberName": "changeUpkeepFrequency",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40565,
                      "src": "3119:39:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint64_$returns$__$",
                        "typeString": "function (uint64) external"
                      }
                    },
                    "id": 46081,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3119:53:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46082,
                  "nodeType": "ExpressionStatement",
                  "src": "3119:53:84"
                }
              ]
            },
            "documentation": {
              "id": 46072,
              "nodeType": "StructuredDocumentation",
              "src": "2935:110:84",
              "text": " @notice Allows strategist to change how frequently they want their cellars fees calculated."
            },
            "functionSelector": "a5a36dd2",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeUpkeepFrequency",
            "nameLocation": "3059:21:84",
            "parameters": {
              "id": 46075,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46074,
                  "mutability": "mutable",
                  "name": "newFrequency",
                  "nameLocation": "3088:12:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46084,
                  "src": "3081:19:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 46073,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3081:6:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3080:21:84"
            },
            "returnParameters": {
              "id": 46076,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3109:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46097,
            "nodeType": "FunctionDefinition",
            "src": "3303:117:84",
            "nodes": [],
            "body": {
              "id": 46096,
              "nodeType": "Block",
              "src": "3356:64:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46093,
                        "name": "newMaxGas",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46087,
                        "src": "3403:9:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46090,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "3366:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46091,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3366:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46092,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3384:18:84",
                      "memberName": "changeUpkeepMaxGas",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40589,
                      "src": "3366:36:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint64_$returns$__$",
                        "typeString": "function (uint64) external"
                      }
                    },
                    "id": 46094,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3366:47:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46095,
                  "nodeType": "ExpressionStatement",
                  "src": "3366:47:84"
                }
              ]
            },
            "documentation": {
              "id": 46085,
              "nodeType": "StructuredDocumentation",
              "src": "3185:113:84",
              "text": " @notice Allows strategist to change the max gas they are willing to pay for fee calculations.."
            },
            "functionSelector": "f2a44d4e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeUpkeepMaxGas",
            "nameLocation": "3312:18:84",
            "parameters": {
              "id": 46088,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46087,
                  "mutability": "mutable",
                  "name": "newMaxGas",
                  "nameLocation": "3338:9:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46097,
                  "src": "3331:16:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 46086,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3331:6:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3330:18:84"
            },
            "returnParameters": {
              "id": 46089,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3356:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46113,
            "nodeType": "FunctionDefinition",
            "src": "3526:154:84",
            "nodes": [],
            "body": {
              "id": 46112,
              "nodeType": "Block",
              "src": "3601:79:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46108,
                        "name": "managementFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46100,
                        "src": "3643:13:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      {
                        "id": 46109,
                        "name": "performanceFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46102,
                        "src": "3658:14:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46105,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "3611:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46106,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3611:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46107,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3629:13:84",
                      "memberName": "setupMetaData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40529,
                      "src": "3611:31:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint32_$_t_uint32_$returns$__$",
                        "typeString": "function (uint32,uint32) external"
                      }
                    },
                    "id": 46110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3611:62:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46111,
                  "nodeType": "ExpressionStatement",
                  "src": "3611:62:84"
                }
              ]
            },
            "documentation": {
              "id": 46098,
              "nodeType": "StructuredDocumentation",
              "src": "3426:95:84",
              "text": " @notice Setup function strategist must call in order to use FeesAndReserves."
            },
            "functionSelector": "fa531255",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setupMetaData",
            "nameLocation": "3535:13:84",
            "parameters": {
              "id": 46103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46100,
                  "mutability": "mutable",
                  "name": "managementFee",
                  "nameLocation": "3556:13:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46113,
                  "src": "3549:20:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 46099,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3549:6:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46102,
                  "mutability": "mutable",
                  "name": "performanceFee",
                  "nameLocation": "3578:14:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46113,
                  "src": "3571:21:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 46101,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3571:6:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3548:45:84"
            },
            "returnParameters": {
              "id": 46104,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3601:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46167,
            "nodeType": "FunctionDefinition",
            "src": "3942:467:84",
            "nodes": [],
            "body": {
              "id": 46166,
              "nodeType": "Block",
              "src": "3994:415:84",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    46121,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 46121,
                      "mutability": "mutable",
                      "name": "asset",
                      "nameLocation": "4011:5:84",
                      "nodeType": "VariableDeclaration",
                      "scope": 46166,
                      "src": "4005:11:84",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$34556",
                        "typeString": "contract ERC20"
                      },
                      "typeName": {
                        "id": 46120,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 46119,
                          "name": "ERC20",
                          "nameLocations": [
                            "4005:5:84"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 34556,
                          "src": "4005:5:84"
                        },
                        "referencedDeclaration": 34556,
                        "src": "4005:5:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$34556",
                          "typeString": "contract ERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                  ],
                  "id": 46132,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 46128,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4080:4:84",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_FeesAndReservesAdaptor_$46194",
                                  "typeString": "contract FeesAndReservesAdaptor"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_FeesAndReservesAdaptor_$46194",
                                  "typeString": "contract FeesAndReservesAdaptor"
                                }
                              ],
                              "id": 46127,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4072:7:84",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 46126,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4072:7:84",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 46129,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4072:13:84",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 46125,
                          "name": "Cellar",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33437,
                          "src": "4065:6:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_Cellar_$33437_$",
                            "typeString": "type(contract Cellar)"
                          }
                        },
                        "id": 46130,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4065:21:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Cellar_$33437",
                          "typeString": "contract Cellar"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_Cellar_$33437",
                          "typeString": "contract Cellar"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46122,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "4038:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46123,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4038:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46124,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4056:8:84",
                      "memberName": "metaData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40116,
                      "src": "4038:26:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_contract$_Cellar_$33437_$returns$_t_contract$_ERC20_$34556_$_t_uint32_$_t_uint64_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_uint8_$_t_uint32_$",
                        "typeString": "function (contract Cellar) view external returns (contract ERC20,uint32,uint64,uint256,uint256,uint256,uint256,uint8,uint8,uint32)"
                      }
                    },
                    "id": 46131,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4038:49:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_contract$_ERC20_$34556_$_t_uint32_$_t_uint64_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_uint8_$_t_uint32_$",
                      "typeString": "tuple(contract ERC20,uint32,uint64,uint256,uint256,uint256,uint256,uint8,uint8,uint32)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4004:83:84"
                },
                {
                  "expression": {
                    "id": 46138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 46133,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 46116,
                      "src": "4097:6:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 46135,
                          "name": "asset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46121,
                          "src": "4120:5:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$34556",
                            "typeString": "contract ERC20"
                          }
                        },
                        {
                          "id": 46136,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46116,
                          "src": "4127:6:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_ERC20_$34556",
                            "typeString": "contract ERC20"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 46134,
                        "name": "_maxAvailable",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43890,
                        "src": "4106:13:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_contract$_ERC20_$34556_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (contract ERC20,uint256) view returns (uint256)"
                        }
                      },
                      "id": 46137,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4106:28:84",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4097:37:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 46139,
                  "nodeType": "ExpressionStatement",
                  "src": "4097:37:84"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 46145,
                              "name": "feesAndReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46045,
                              "src": "4170:15:84",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                                "typeString": "function () pure returns (contract FeesAndReserves)"
                              }
                            },
                            "id": 46146,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4170:17:84",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                              "typeString": "contract FeesAndReserves"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                              "typeString": "contract FeesAndReserves"
                            }
                          ],
                          "id": 46144,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4162:7:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 46143,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4162:7:84",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 46147,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4162:26:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 46148,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46116,
                        "src": "4190:6:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 46140,
                        "name": "asset",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46121,
                        "src": "4144:5:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$34556",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 46142,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4150:11:84",
                      "memberName": "safeApprove",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 35306,
                      "src": "4144:17:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$34556_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$34556_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 46149,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4144:53:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46150,
                  "nodeType": "ExpressionStatement",
                  "src": "4144:53:84"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46154,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46116,
                        "src": "4245:6:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46151,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "4207:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46152,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4207:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46153,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4225:19:84",
                      "memberName": "addAssetsToReserves",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40739,
                      "src": "4207:37:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 46155,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4207:45:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46156,
                  "nodeType": "ExpressionStatement",
                  "src": "4207:45:84"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46158,
                        "name": "asset",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46121,
                        "src": "4368:5:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$34556",
                          "typeString": "contract ERC20"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 46161,
                              "name": "feesAndReserves",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46045,
                              "src": "4383:15:84",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                                "typeString": "function () pure returns (contract FeesAndReserves)"
                              }
                            },
                            "id": 46162,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4383:17:84",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                              "typeString": "contract FeesAndReserves"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                              "typeString": "contract FeesAndReserves"
                            }
                          ],
                          "id": 46160,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4375:7:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 46159,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4375:7:84",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 46163,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4375:26:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_ERC20_$34556",
                          "typeString": "contract ERC20"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 46157,
                      "name": "_revokeExternalApproval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 43918,
                      "src": "4344:23:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$34556_$_t_address_$returns$__$",
                        "typeString": "function (contract ERC20,address)"
                      }
                    },
                    "id": 46164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4344:58:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46165,
                  "nodeType": "ExpressionStatement",
                  "src": "4344:58:84"
                }
              ]
            },
            "documentation": {
              "id": 46114,
              "nodeType": "StructuredDocumentation",
              "src": "3686:251:84",
              "text": " @notice Strategists are free to add/remove assets to reserves because it allows them to\n         inject yield into the cellar during time of under performance, and reserve yield\n         during times of over performance."
            },
            "functionSelector": "cabad50a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addAssetsToReserves",
            "nameLocation": "3951:19:84",
            "parameters": {
              "id": 46117,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46116,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3979:6:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46167,
                  "src": "3971:14:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 46115,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3971:7:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3970:16:84"
            },
            "returnParameters": {
              "id": 46118,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3994:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46180,
            "nodeType": "FunctionDefinition",
            "src": "4671:128:84",
            "nodes": [],
            "body": {
              "id": 46179,
              "nodeType": "Block",
              "src": "4730:69:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46176,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46170,
                        "src": "4785:6:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46173,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "4740:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4740:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46175,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4758:26:84",
                      "memberName": "withdrawAssetsFromReserves",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40810,
                      "src": "4740:44:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 46177,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4740:52:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46178,
                  "nodeType": "ExpressionStatement",
                  "src": "4740:52:84"
                }
              ]
            },
            "documentation": {
              "id": 46168,
              "nodeType": "StructuredDocumentation",
              "src": "4415:251:84",
              "text": " @notice Strategists are free to add/remove assets to reserves because it allows them to\n         inject yield into the cellar during time of under performance, and reserve yield\n         during times of over performance."
            },
            "functionSelector": "f5f30a5e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawAssetsFromReserves",
            "nameLocation": "4680:26:84",
            "parameters": {
              "id": 46171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46170,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4715:6:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46180,
                  "src": "4707:14:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 46169,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4707:7:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4706:16:84"
            },
            "returnParameters": {
              "id": 46172,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4730:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 46193,
            "nodeType": "FunctionDefinition",
            "src": "4962:98:84",
            "nodes": [],
            "body": {
              "id": 46192,
              "nodeType": "Block",
              "src": "5006:54:84",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 46189,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46183,
                        "src": "5046:6:84",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 46186,
                          "name": "feesAndReserves",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46045,
                          "src": "5016:15:84",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_FeesAndReserves_$41560_$",
                            "typeString": "function () pure returns (contract FeesAndReserves)"
                          }
                        },
                        "id": 46187,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5016:17:84",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_FeesAndReserves_$41560",
                          "typeString": "contract FeesAndReserves"
                        }
                      },
                      "id": 46188,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5034:11:84",
                      "memberName": "prepareFees",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40898,
                      "src": "5016:29:84",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 46190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5016:37:84",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 46191,
                  "nodeType": "ExpressionStatement",
                  "src": "5016:37:84"
                }
              ]
            },
            "documentation": {
              "id": 46181,
              "nodeType": "StructuredDocumentation",
              "src": "4805:152:84",
              "text": " @notice Allows strategists to take pending fees owed, and set them up to be distributed using `sendFees` in FeesAndReserves contract."
            },
            "functionSelector": "5303907d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "prepareFees",
            "nameLocation": "4971:11:84",
            "parameters": {
              "id": 46184,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46183,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4991:6:84",
                  "nodeType": "VariableDeclaration",
                  "scope": 46193,
                  "src": "4983:14:84",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 46182,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4983:7:84",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4982:16:84"
            },
            "returnParameters": {
              "id": 46185,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5006:0:84"
            },
            "scope": 46194,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 46010,
              "name": "PositionlessAdaptor",
              "nameLocations": [
                "575:19:84"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46478,
              "src": "575:19:84"
            },
            "id": 46011,
            "nodeType": "InheritanceSpecifier",
            "src": "575:19:84"
          }
        ],
        "canonicalName": "FeesAndReservesAdaptor",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 46009,
          "nodeType": "StructuredDocumentation",
          "src": "331:208:84",
          "text": " @title Fees And Reserves Adaptor\n @notice Allows Cellars to interact with Sommelier FeesAndReserves contract\n         in order to store/withdraw reserves and take fees.\n @author crispymangoes"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          46194,
          46478,
          43962
        ],
        "name": "FeesAndReservesAdaptor",
        "nameLocation": "549:22:84",
        "scope": 46195,
        "usedErrors": [
          43724,
          43727,
          43730,
          43733,
          43738
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 84
}
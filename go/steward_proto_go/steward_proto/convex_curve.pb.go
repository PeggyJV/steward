//
// Protos for function calls to the Convex Curve adaptor.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: convex_curve.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents call data for the Convex Curve adaptor V1
type ConvexCurveAdaptorV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*ConvexCurveAdaptorV1_RevokeApproval
	//	*ConvexCurveAdaptorV1_DepositLptInConvexAndStake
	//	*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLpt
	//	*ConvexCurveAdaptorV1_GetRewards_
	Function isConvexCurveAdaptorV1_Function `protobuf_oneof:"function"`
}

func (x *ConvexCurveAdaptorV1) Reset() {
	*x = ConvexCurveAdaptorV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convex_curve_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvexCurveAdaptorV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvexCurveAdaptorV1) ProtoMessage() {}

func (x *ConvexCurveAdaptorV1) ProtoReflect() protoreflect.Message {
	mi := &file_convex_curve_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvexCurveAdaptorV1.ProtoReflect.Descriptor instead.
func (*ConvexCurveAdaptorV1) Descriptor() ([]byte, []int) {
	return file_convex_curve_proto_rawDescGZIP(), []int{0}
}

func (m *ConvexCurveAdaptorV1) GetFunction() isConvexCurveAdaptorV1_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *ConvexCurveAdaptorV1) GetRevokeApproval() *RevokeApproval {
	if x, ok := x.GetFunction().(*ConvexCurveAdaptorV1_RevokeApproval); ok {
		return x.RevokeApproval
	}
	return nil
}

func (x *ConvexCurveAdaptorV1) GetDepositLptInConvexAndStake() *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake {
	if x, ok := x.GetFunction().(*ConvexCurveAdaptorV1_DepositLptInConvexAndStake); ok {
		return x.DepositLptInConvexAndStake
	}
	return nil
}

func (x *ConvexCurveAdaptorV1) GetWithdrawFromBaseRewardPoolAsLpt() *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT {
	if x, ok := x.GetFunction().(*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLpt); ok {
		return x.WithdrawFromBaseRewardPoolAsLpt
	}
	return nil
}

func (x *ConvexCurveAdaptorV1) GetGetRewards() *ConvexCurveAdaptorV1_GetRewards {
	if x, ok := x.GetFunction().(*ConvexCurveAdaptorV1_GetRewards_); ok {
		return x.GetRewards
	}
	return nil
}

type isConvexCurveAdaptorV1_Function interface {
	isConvexCurveAdaptorV1_Function()
}

type ConvexCurveAdaptorV1_RevokeApproval struct {
	// Represents function `revokeApproval(ERC20 asset, address spender)`
	RevokeApproval *RevokeApproval `protobuf:"bytes,1,opt,name=revoke_approval,json=revokeApproval,proto3,oneof"`
}

type ConvexCurveAdaptorV1_DepositLptInConvexAndStake struct {
	// Represents function `depositLPTInConvexAndStake(uint256 _pid, address baseRewardPool, ERC20 _lpt, CurvePool _pool, bytes4 _selector, uint256 _amount)`
	DepositLptInConvexAndStake *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake `protobuf:"bytes,2,opt,name=deposit_lpt_in_convex_and_stake,json=depositLptInConvexAndStake,proto3,oneof"`
}

type ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLpt struct {
	// Represents function `withdrawFromBaseRewardPoolAsLPTaddress(_baseRewardPool, uint256 _amount, bool _claim)`
	WithdrawFromBaseRewardPoolAsLpt *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT `protobuf:"bytes,3,opt,name=withdraw_from_base_reward_pool_as_lpt,json=withdrawFromBaseRewardPoolAsLpt,proto3,oneof"`
}

type ConvexCurveAdaptorV1_GetRewards_ struct {
	// Represents function `getRewards(address _baseRewardPool, bool _claimExtras)`
	GetRewards *ConvexCurveAdaptorV1_GetRewards `protobuf:"bytes,4,opt,name=get_rewards,json=getRewards,proto3,oneof"`
}

func (*ConvexCurveAdaptorV1_RevokeApproval) isConvexCurveAdaptorV1_Function() {}

func (*ConvexCurveAdaptorV1_DepositLptInConvexAndStake) isConvexCurveAdaptorV1_Function() {}

func (*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLpt) isConvexCurveAdaptorV1_Function() {}

func (*ConvexCurveAdaptorV1_GetRewards_) isConvexCurveAdaptorV1_Function() {}

type ConvexCurveAdaptorV1Calls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*ConvexCurveAdaptorV1 `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *ConvexCurveAdaptorV1Calls) Reset() {
	*x = ConvexCurveAdaptorV1Calls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convex_curve_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvexCurveAdaptorV1Calls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvexCurveAdaptorV1Calls) ProtoMessage() {}

func (x *ConvexCurveAdaptorV1Calls) ProtoReflect() protoreflect.Message {
	mi := &file_convex_curve_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvexCurveAdaptorV1Calls.ProtoReflect.Descriptor instead.
func (*ConvexCurveAdaptorV1Calls) Descriptor() ([]byte, []int) {
	return file_convex_curve_proto_rawDescGZIP(), []int{1}
}

func (x *ConvexCurveAdaptorV1Calls) GetCalls() []*ConvexCurveAdaptorV1 {
	if x != nil {
		return x.Calls
	}
	return nil
}

// Allows strategists to deposit and stake LPTs into Convex markets via the respective Convex market Booster contract
//
// Represents function `depositLPTInConvexAndStake(uint256 _pid, address baseRewardPool, ERC20 _lpt, CurvePool _pool, bytes4 _selector, uint256 _amount)`
type ConvexCurveAdaptorV1_DepositLPTInConvexAndStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid             string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	BaseRewardPool  string `protobuf:"bytes,2,opt,name=base_reward_pool,json=baseRewardPool,proto3" json:"base_reward_pool,omitempty"`
	Lpt             string `protobuf:"bytes,3,opt,name=lpt,proto3" json:"lpt,omitempty"`
	Pool            string `protobuf:"bytes,4,opt,name=pool,proto3" json:"pool,omitempty"`
	Selector        string `protobuf:"bytes,5,opt,name=selector,proto3" json:"selector,omitempty"`
	AmountToDeposit string `protobuf:"bytes,6,opt,name=amount_to_deposit,json=amountToDeposit,proto3" json:"amount_to_deposit,omitempty"`
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) Reset() {
	*x = ConvexCurveAdaptorV1_DepositLPTInConvexAndStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convex_curve_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) ProtoMessage() {}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) ProtoReflect() protoreflect.Message {
	mi := &file_convex_curve_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvexCurveAdaptorV1_DepositLPTInConvexAndStake.ProtoReflect.Descriptor instead.
func (*ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) Descriptor() ([]byte, []int) {
	return file_convex_curve_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) GetBaseRewardPool() string {
	if x != nil {
		return x.BaseRewardPool
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) GetLpt() string {
	if x != nil {
		return x.Lpt
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_DepositLPTInConvexAndStake) GetAmountToDeposit() string {
	if x != nil {
		return x.AmountToDeposit
	}
	return ""
}

// Allows strategists to withdraw from Convex markets via Booster contract w/ or w/o claiming rewards
//
// Represents function `withdrawFromBaseRewardPoolAsLPTaddress(_baseRewardPool, uint256 _amount, bool _claim)`
type ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRewardPool   string `protobuf:"bytes,1,opt,name=base_reward_pool,json=baseRewardPool,proto3" json:"base_reward_pool,omitempty"`
	AmountToWithdraw string `protobuf:"bytes,2,opt,name=amount_to_withdraw,json=amountToWithdraw,proto3" json:"amount_to_withdraw,omitempty"`
	Claim            bool   `protobuf:"varint,3,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) Reset() {
	*x = ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convex_curve_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) ProtoMessage() {}

func (x *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) ProtoReflect() protoreflect.Message {
	mi := &file_convex_curve_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT.ProtoReflect.Descriptor instead.
func (*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) Descriptor() ([]byte, []int) {
	return file_convex_curve_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) GetBaseRewardPool() string {
	if x != nil {
		return x.BaseRewardPool
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) GetAmountToWithdraw() string {
	if x != nil {
		return x.AmountToWithdraw
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT) GetClaim() bool {
	if x != nil {
		return x.Claim
	}
	return false
}

// Allows strategists to get rewards for an Convex Booster without withdrawing/unwrapping from Convex market
//
// Represents function `getRewards(address _baseRewardPool, bool _claimExtras)`
type ConvexCurveAdaptorV1_GetRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRewardPool string `protobuf:"bytes,1,opt,name=base_reward_pool,json=baseRewardPool,proto3" json:"base_reward_pool,omitempty"`
	ClaimExtras    bool   `protobuf:"varint,2,opt,name=claim_extras,json=claimExtras,proto3" json:"claim_extras,omitempty"`
}

func (x *ConvexCurveAdaptorV1_GetRewards) Reset() {
	*x = ConvexCurveAdaptorV1_GetRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convex_curve_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvexCurveAdaptorV1_GetRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvexCurveAdaptorV1_GetRewards) ProtoMessage() {}

func (x *ConvexCurveAdaptorV1_GetRewards) ProtoReflect() protoreflect.Message {
	mi := &file_convex_curve_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvexCurveAdaptorV1_GetRewards.ProtoReflect.Descriptor instead.
func (*ConvexCurveAdaptorV1_GetRewards) Descriptor() ([]byte, []int) {
	return file_convex_curve_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ConvexCurveAdaptorV1_GetRewards) GetBaseRewardPool() string {
	if x != nil {
		return x.BaseRewardPool
	}
	return ""
}

func (x *ConvexCurveAdaptorV1_GetRewards) GetClaimExtras() bool {
	if x != nil {
		return x.ClaimExtras
	}
	return false
}

var File_convex_curve_proto protoreflect.FileDescriptor

var file_convex_curve_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x07, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x56, 0x31, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x82, 0x01, 0x0a,
	0x1f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6c, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4c, 0x50, 0x54, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x70,
	0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x92, 0x01, 0x0a, 0x25, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x6c, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x78, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73,
	0x4c, 0x50, 0x54, 0x48, 0x00, 0x52, 0x1f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x73, 0x4c, 0x70, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0xc6, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x4c, 0x50, 0x54, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6c, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x1a,
	0x8f, 0x01, 0x0a, 0x1f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73,
	0x4c, 0x50, 0x54, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x1a, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x78, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x10, 0x5a,
	0x0e, 0x2f, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_convex_curve_proto_rawDescOnce sync.Once
	file_convex_curve_proto_rawDescData = file_convex_curve_proto_rawDesc
)

func file_convex_curve_proto_rawDescGZIP() []byte {
	file_convex_curve_proto_rawDescOnce.Do(func() {
		file_convex_curve_proto_rawDescData = protoimpl.X.CompressGZIP(file_convex_curve_proto_rawDescData)
	})
	return file_convex_curve_proto_rawDescData
}

var file_convex_curve_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_convex_curve_proto_goTypes = []interface{}{
	(*ConvexCurveAdaptorV1)(nil),                                 // 0: steward.v4.ConvexCurveAdaptorV1
	(*ConvexCurveAdaptorV1Calls)(nil),                            // 1: steward.v4.ConvexCurveAdaptorV1Calls
	(*ConvexCurveAdaptorV1_DepositLPTInConvexAndStake)(nil),      // 2: steward.v4.ConvexCurveAdaptorV1.DepositLPTInConvexAndStake
	(*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT)(nil), // 3: steward.v4.ConvexCurveAdaptorV1.WithdrawFromBaseRewardPoolAsLPT
	(*ConvexCurveAdaptorV1_GetRewards)(nil),                      // 4: steward.v4.ConvexCurveAdaptorV1.GetRewards
	(*RevokeApproval)(nil),                                       // 5: steward.v4.RevokeApproval
}
var file_convex_curve_proto_depIdxs = []int32{
	5, // 0: steward.v4.ConvexCurveAdaptorV1.revoke_approval:type_name -> steward.v4.RevokeApproval
	2, // 1: steward.v4.ConvexCurveAdaptorV1.deposit_lpt_in_convex_and_stake:type_name -> steward.v4.ConvexCurveAdaptorV1.DepositLPTInConvexAndStake
	3, // 2: steward.v4.ConvexCurveAdaptorV1.withdraw_from_base_reward_pool_as_lpt:type_name -> steward.v4.ConvexCurveAdaptorV1.WithdrawFromBaseRewardPoolAsLPT
	4, // 3: steward.v4.ConvexCurveAdaptorV1.get_rewards:type_name -> steward.v4.ConvexCurveAdaptorV1.GetRewards
	0, // 4: steward.v4.ConvexCurveAdaptorV1Calls.calls:type_name -> steward.v4.ConvexCurveAdaptorV1
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_convex_curve_proto_init() }
func file_convex_curve_proto_init() {
	if File_convex_curve_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_convex_curve_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvexCurveAdaptorV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_convex_curve_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvexCurveAdaptorV1Calls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_convex_curve_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvexCurveAdaptorV1_DepositLPTInConvexAndStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_convex_curve_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLPT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_convex_curve_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvexCurveAdaptorV1_GetRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_convex_curve_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConvexCurveAdaptorV1_RevokeApproval)(nil),
		(*ConvexCurveAdaptorV1_DepositLptInConvexAndStake)(nil),
		(*ConvexCurveAdaptorV1_WithdrawFromBaseRewardPoolAsLpt)(nil),
		(*ConvexCurveAdaptorV1_GetRewards_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_convex_curve_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_convex_curve_proto_goTypes,
		DependencyIndexes: file_convex_curve_proto_depIdxs,
		MessageInfos:      file_convex_curve_proto_msgTypes,
	}.Build()
	File_convex_curve_proto = out.File
	file_convex_curve_proto_rawDesc = nil
	file_convex_curve_proto_goTypes = nil
	file_convex_curve_proto_depIdxs = nil
}

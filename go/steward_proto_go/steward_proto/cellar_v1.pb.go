//
// An API for cellars that implement the EIP4626-compatible Cellar.sol contract.
//
// See [Cellar.sol](https://github.com/PeggyJV/cellar-contracts/blob/main/src/base/Cellar.sol)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: cellar_v1.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the withdraw type to use for the cellar
type CellarV1_WithdrawType int32

const (
	CellarV1_WITHDRAW_TYPE_UNSPECIFIED  CellarV1_WithdrawType = 0
	CellarV1_WITHDRAW_TYPE_ORDERLY      CellarV1_WithdrawType = 1
	CellarV1_WITHDRAW_TYPE_PROPORTIONAL CellarV1_WithdrawType = 2
)

// Enum value maps for CellarV1_WithdrawType.
var (
	CellarV1_WithdrawType_name = map[int32]string{
		0: "WITHDRAW_TYPE_UNSPECIFIED",
		1: "WITHDRAW_TYPE_ORDERLY",
		2: "WITHDRAW_TYPE_PROPORTIONAL",
	}
	CellarV1_WithdrawType_value = map[string]int32{
		"WITHDRAW_TYPE_UNSPECIFIED":  0,
		"WITHDRAW_TYPE_ORDERLY":      1,
		"WITHDRAW_TYPE_PROPORTIONAL": 2,
	}
)

func (x CellarV1_WithdrawType) Enum() *CellarV1_WithdrawType {
	p := new(CellarV1_WithdrawType)
	*p = x
	return p
}

func (x CellarV1_WithdrawType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellarV1_WithdrawType) Descriptor() protoreflect.EnumDescriptor {
	return file_cellar_v1_proto_enumTypes[0].Descriptor()
}

func (CellarV1_WithdrawType) Type() protoreflect.EnumType {
	return &file_cellar_v1_proto_enumTypes[0]
}

func (x CellarV1_WithdrawType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellarV1_WithdrawType.Descriptor instead.
func (CellarV1_WithdrawType) EnumDescriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 0}
}

// Represents a function call to a cellar that implements Cellar.sol
type CellarV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function you wish to execute on the target cellar
	//
	// Types that are assignable to Function:
	//
	//	*CellarV1_AddPosition_
	//	*CellarV1_PushPosition_
	//	*CellarV1_RemovePosition_
	//	*CellarV1_SetHoldingPosition_
	//	*CellarV1_Rebalance_
	//	*CellarV1_SetStrategistPayoutAddress_
	//	*CellarV1_SetWithdrawType_
	//	*CellarV1_SwapPositions_
	//	*CellarV1_SetDepositLimit_
	//	*CellarV1_SetLiquidityLimit_
	//	*CellarV1_SetShareLockPeriod_
	//	*CellarV1_SetRebalanceDeviation_
	Function isCellarV1_Function `protobuf_oneof:"function"`
}

func (x *CellarV1) Reset() {
	*x = CellarV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1) ProtoMessage() {}

func (x *CellarV1) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1.ProtoReflect.Descriptor instead.
func (*CellarV1) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0}
}

func (m *CellarV1) GetFunction() isCellarV1_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV1) GetAddPosition() *CellarV1_AddPosition {
	if x, ok := x.GetFunction().(*CellarV1_AddPosition_); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV1) GetPushPosition() *CellarV1_PushPosition {
	if x, ok := x.GetFunction().(*CellarV1_PushPosition_); ok {
		return x.PushPosition
	}
	return nil
}

func (x *CellarV1) GetRemovePosition() *CellarV1_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV1_RemovePosition_); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV1) GetSetHoldingPosition() *CellarV1_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV1_SetHoldingPosition_); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV1) GetRebalance() *CellarV1_Rebalance {
	if x, ok := x.GetFunction().(*CellarV1_Rebalance_); ok {
		return x.Rebalance
	}
	return nil
}

func (x *CellarV1) GetSetStrategistPayoutAddress() *CellarV1_SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*CellarV1_SetStrategistPayoutAddress_); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *CellarV1) GetSetWithdrawType() *CellarV1_SetWithdrawType {
	if x, ok := x.GetFunction().(*CellarV1_SetWithdrawType_); ok {
		return x.SetWithdrawType
	}
	return nil
}

func (x *CellarV1) GetSwapPositions() *CellarV1_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV1_SwapPositions_); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *CellarV1) GetSetDepositLimit() *CellarV1_SetDepositLimit {
	if x, ok := x.GetFunction().(*CellarV1_SetDepositLimit_); ok {
		return x.SetDepositLimit
	}
	return nil
}

func (x *CellarV1) GetSetLiquidityLimit() *CellarV1_SetLiquidityLimit {
	if x, ok := x.GetFunction().(*CellarV1_SetLiquidityLimit_); ok {
		return x.SetLiquidityLimit
	}
	return nil
}

func (x *CellarV1) GetSetShareLockPeriod() *CellarV1_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV1_SetShareLockPeriod_); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

func (x *CellarV1) GetSetRebalanceDeviation() *CellarV1_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV1_SetRebalanceDeviation_); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

type isCellarV1_Function interface {
	isCellarV1_Function()
}

type CellarV1_AddPosition_ struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV1_AddPosition `protobuf:"bytes,1,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV1_PushPosition_ struct {
	// Represents function `pushPosition(address position)`
	PushPosition *CellarV1_PushPosition `protobuf:"bytes,2,opt,name=push_position,json=pushPosition,proto3,oneof"`
}

type CellarV1_RemovePosition_ struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *CellarV1_RemovePosition `protobuf:"bytes,3,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV1_SetHoldingPosition_ struct {
	// Represents function `setHoldingPosition(address newHoldingPosition)`
	SetHoldingPosition *CellarV1_SetHoldingPosition `protobuf:"bytes,4,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV1_Rebalance_ struct {
	// Represents function `rebalance(address fromPosition, address toPosition,
	// uint256 assetsFrom, SwapRouter.Exchange exchange, bytes calldata params)`
	Rebalance *CellarV1_Rebalance `protobuf:"bytes,5,opt,name=rebalance,proto3,oneof"`
}

type CellarV1_SetStrategistPayoutAddress_ struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *CellarV1_SetStrategistPayoutAddress `protobuf:"bytes,6,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type CellarV1_SetWithdrawType_ struct {
	// Represents function `setWithdrawType(WithdrawType newWithdrawType)`
	SetWithdrawType *CellarV1_SetWithdrawType `protobuf:"bytes,7,opt,name=set_withdraw_type,json=setWithdrawType,proto3,oneof"`
}

type CellarV1_SwapPositions_ struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV1_SwapPositions `protobuf:"bytes,8,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type CellarV1_SetDepositLimit_ struct {
	// Represents function `setDepositLimit()`
	SetDepositLimit *CellarV1_SetDepositLimit `protobuf:"bytes,9,opt,name=set_deposit_limit,json=setDepositLimit,proto3,oneof"`
}

type CellarV1_SetLiquidityLimit_ struct {
	// Represents function `setLiquidityLimit()`
	SetLiquidityLimit *CellarV1_SetLiquidityLimit `protobuf:"bytes,10,opt,name=set_liquidity_limit,json=setLiquidityLimit,proto3,oneof"`
}

type CellarV1_SetShareLockPeriod_ struct {
	// Represents function `setShareLockPeriod()`
	SetShareLockPeriod *CellarV1_SetShareLockPeriod `protobuf:"bytes,11,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

type CellarV1_SetRebalanceDeviation_ struct {
	// Represents function `setRebalanceDeviation(uint256)`
	SetRebalanceDeviation *CellarV1_SetRebalanceDeviation `protobuf:"bytes,12,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

func (*CellarV1_AddPosition_) isCellarV1_Function() {}

func (*CellarV1_PushPosition_) isCellarV1_Function() {}

func (*CellarV1_RemovePosition_) isCellarV1_Function() {}

func (*CellarV1_SetHoldingPosition_) isCellarV1_Function() {}

func (*CellarV1_Rebalance_) isCellarV1_Function() {}

func (*CellarV1_SetStrategistPayoutAddress_) isCellarV1_Function() {}

func (*CellarV1_SetWithdrawType_) isCellarV1_Function() {}

func (*CellarV1_SwapPositions_) isCellarV1_Function() {}

func (*CellarV1_SetDepositLimit_) isCellarV1_Function() {}

func (*CellarV1_SetLiquidityLimit_) isCellarV1_Function() {}

func (*CellarV1_SetShareLockPeriod_) isCellarV1_Function() {}

func (*CellarV1_SetRebalanceDeviation_) isCellarV1_Function() {}

// Represent a function call initiated through a governance proposal
type CellarV1Governance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function to call on the target cellar
	//
	// Types that are assignable to Function:
	//
	//	*CellarV1Governance_InitiateShutdown_
	//	*CellarV1Governance_LiftShutdown_
	//	*CellarV1Governance_ResetHighWatermark_
	//	*CellarV1Governance_SetFeesDistributor_
	//	*CellarV1Governance_SetPerformanceFee_
	//	*CellarV1Governance_SetPlatformFee_
	//	*CellarV1Governance_SetStrategistPerformanceCut_
	//	*CellarV1Governance_SetStrategistPlatformCut_
	//	*CellarV1Governance_TrustPosition_
	Function isCellarV1Governance_Function `protobuf_oneof:"function"`
}

func (x *CellarV1Governance) Reset() {
	*x = CellarV1Governance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance) ProtoMessage() {}

func (x *CellarV1Governance) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance.ProtoReflect.Descriptor instead.
func (*CellarV1Governance) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1}
}

func (m *CellarV1Governance) GetFunction() isCellarV1Governance_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV1Governance) GetInitiateShutdown() *CellarV1Governance_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV1Governance_InitiateShutdown_); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV1Governance) GetLiftShutdown() *CellarV1Governance_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV1Governance_LiftShutdown_); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV1Governance) GetResetHighWatermark() *CellarV1Governance_ResetHighWatermark {
	if x, ok := x.GetFunction().(*CellarV1Governance_ResetHighWatermark_); ok {
		return x.ResetHighWatermark
	}
	return nil
}

func (x *CellarV1Governance) GetSetFeesDistributor() *CellarV1Governance_SetFeesDistributor {
	if x, ok := x.GetFunction().(*CellarV1Governance_SetFeesDistributor_); ok {
		return x.SetFeesDistributor
	}
	return nil
}

func (x *CellarV1Governance) GetSetPerformanceFee() *CellarV1Governance_SetPerformanceFee {
	if x, ok := x.GetFunction().(*CellarV1Governance_SetPerformanceFee_); ok {
		return x.SetPerformanceFee
	}
	return nil
}

func (x *CellarV1Governance) GetSetPlatformFee() *CellarV1Governance_SetPlatformFee {
	if x, ok := x.GetFunction().(*CellarV1Governance_SetPlatformFee_); ok {
		return x.SetPlatformFee
	}
	return nil
}

func (x *CellarV1Governance) GetSetStrategistPerformanceCut() *CellarV1Governance_SetStrategistPerformanceCut {
	if x, ok := x.GetFunction().(*CellarV1Governance_SetStrategistPerformanceCut_); ok {
		return x.SetStrategistPerformanceCut
	}
	return nil
}

func (x *CellarV1Governance) GetSetStrategistPlatformCut() *CellarV1Governance_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV1Governance_SetStrategistPlatformCut_); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV1Governance) GetTrustPosition() *CellarV1Governance_TrustPosition {
	if x, ok := x.GetFunction().(*CellarV1Governance_TrustPosition_); ok {
		return x.TrustPosition
	}
	return nil
}

type isCellarV1Governance_Function interface {
	isCellarV1Governance_Function()
}

type CellarV1Governance_InitiateShutdown_ struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV1Governance_InitiateShutdown `protobuf:"bytes,1,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV1Governance_LiftShutdown_ struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV1Governance_LiftShutdown `protobuf:"bytes,2,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV1Governance_ResetHighWatermark_ struct {
	// Represents function `resetHighWatermark()`
	ResetHighWatermark *CellarV1Governance_ResetHighWatermark `protobuf:"bytes,3,opt,name=reset_high_watermark,json=resetHighWatermark,proto3,oneof"`
}

type CellarV1Governance_SetFeesDistributor_ struct {
	// Represents function `setFeesDistributor(address)`
	SetFeesDistributor *CellarV1Governance_SetFeesDistributor `protobuf:"bytes,4,opt,name=set_fees_distributor,json=setFeesDistributor,proto3,oneof"`
}

type CellarV1Governance_SetPerformanceFee_ struct {
	// Represents function `setPerformanceFee(uint256)`
	SetPerformanceFee *CellarV1Governance_SetPerformanceFee `protobuf:"bytes,5,opt,name=set_performance_fee,json=setPerformanceFee,proto3,oneof"`
}

type CellarV1Governance_SetPlatformFee_ struct {
	// Represents function `setPlatformFee(uint256)`
	SetPlatformFee *CellarV1Governance_SetPlatformFee `protobuf:"bytes,6,opt,name=set_platform_fee,json=setPlatformFee,proto3,oneof"`
}

type CellarV1Governance_SetStrategistPerformanceCut_ struct {
	// Represents function `setStrategistPerformanceCut(uint256)`
	SetStrategistPerformanceCut *CellarV1Governance_SetStrategistPerformanceCut `protobuf:"bytes,7,opt,name=set_strategist_performance_cut,json=setStrategistPerformanceCut,proto3,oneof"`
}

type CellarV1Governance_SetStrategistPlatformCut_ struct {
	// Represents function `setStrategistPlatformCut(address)`
	SetStrategistPlatformCut *CellarV1Governance_SetStrategistPlatformCut `protobuf:"bytes,8,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV1Governance_TrustPosition_ struct {
	// Represents function `trustPosition(address)`
	TrustPosition *CellarV1Governance_TrustPosition `protobuf:"bytes,9,opt,name=trust_position,json=trustPosition,proto3,oneof"`
}

func (*CellarV1Governance_InitiateShutdown_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_LiftShutdown_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_ResetHighWatermark_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_SetFeesDistributor_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_SetPerformanceFee_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_SetPlatformFee_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_SetStrategistPerformanceCut_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_SetStrategistPlatformCut_) isCellarV1Governance_Function() {}

func (*CellarV1Governance_TrustPosition_) isCellarV1Governance_Function() {}

// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint256 index, address position)`
type CellarV1_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// Address of the position to add
	Position string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CellarV1_AddPosition) Reset() {
	*x = CellarV1_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_AddPosition) ProtoMessage() {}

func (x *CellarV1_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV1_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CellarV1_AddPosition) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *CellarV1_AddPosition) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

// Push a trusted position to the end of the list of positions used by the cellar. If you
// know you are going to add a position to the end of the array, this is more efficient then
// `addPosition`.
//
// Represents function `pushPosition(address position)`
type CellarV1_PushPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the position to push
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CellarV1_PushPosition) Reset() {
	*x = CellarV1_PushPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_PushPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_PushPosition) ProtoMessage() {}

func (x *CellarV1_PushPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_PushPosition.ProtoReflect.Descriptor instead.
func (*CellarV1_PushPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CellarV1_PushPosition) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint256 index)`
type CellarV1_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *CellarV1_RemovePosition) Reset() {
	*x = CellarV1_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_RemovePosition) ProtoMessage() {}

func (x *CellarV1_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV1_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CellarV1_RemovePosition) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

// Set the holding position used by the cellar.
//
// Represents function `setHoldingPosition(address newHoldingPosition)`
type CellarV1_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the new holding position to use
	NewHoldingPosition string `protobuf:"bytes,1,opt,name=new_holding_position,json=newHoldingPosition,proto3" json:"new_holding_position,omitempty"`
}

func (x *CellarV1_SetHoldingPosition) Reset() {
	*x = CellarV1_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV1_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV1_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CellarV1_SetHoldingPosition) GetNewHoldingPosition() string {
	if x != nil {
		return x.NewHoldingPosition
	}
	return ""
}

// Move assets between positions. To move assets from/to this cellar's holdings, specify
// the address of this cellar as the `fromPosition`/`toPosition`.
//
// Represents function `rebalance(address fromPosition, address toPosition,
//
//	uint256 assetsFrom, SwapRouter.Exchange exchange, bytes calldata params)
type CellarV1_Rebalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPosition string      `protobuf:"bytes,1,opt,name=from_position,json=fromPosition,proto3" json:"from_position,omitempty"`
	ToPosition   string      `protobuf:"bytes,2,opt,name=to_position,json=toPosition,proto3" json:"to_position,omitempty"`
	AssetsFrom   string      `protobuf:"bytes,3,opt,name=assets_from,json=assetsFrom,proto3" json:"assets_from,omitempty"`
	Exchange     Exchange    `protobuf:"varint,4,opt,name=exchange,proto3,enum=steward.v4.Exchange" json:"exchange,omitempty"`
	Params       *SwapParams `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CellarV1_Rebalance) Reset() {
	*x = CellarV1_Rebalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_Rebalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_Rebalance) ProtoMessage() {}

func (x *CellarV1_Rebalance) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_Rebalance.ProtoReflect.Descriptor instead.
func (*CellarV1_Rebalance) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CellarV1_Rebalance) GetFromPosition() string {
	if x != nil {
		return x.FromPosition
	}
	return ""
}

func (x *CellarV1_Rebalance) GetToPosition() string {
	if x != nil {
		return x.ToPosition
	}
	return ""
}

func (x *CellarV1_Rebalance) GetAssetsFrom() string {
	if x != nil {
		return x.AssetsFrom
	}
	return ""
}

func (x *CellarV1_Rebalance) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *CellarV1_Rebalance) GetParams() *SwapParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type CellarV1_SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *CellarV1_SetStrategistPayoutAddress) Reset() {
	*x = CellarV1_SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SetStrategistPayoutAddress) ProtoMessage() {}

func (x *CellarV1_SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*CellarV1_SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CellarV1_SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

// Set the withdraw type used by the cellar.
//
// Represents function `setWithdrawType(WithdrawType newWithdrawType)`
type CellarV1_SetWithdrawType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The withdraw type to use for the cellar
	NewWithdrawType CellarV1_WithdrawType `protobuf:"varint,1,opt,name=new_withdraw_type,json=newWithdrawType,proto3,enum=steward.v4.CellarV1_WithdrawType" json:"new_withdraw_type,omitempty"`
}

func (x *CellarV1_SetWithdrawType) Reset() {
	*x = CellarV1_SetWithdrawType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SetWithdrawType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SetWithdrawType) ProtoMessage() {}

func (x *CellarV1_SetWithdrawType) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SetWithdrawType.ProtoReflect.Descriptor instead.
func (*CellarV1_SetWithdrawType) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 6}
}

func (x *CellarV1_SetWithdrawType) GetNewWithdrawType() CellarV1_WithdrawType {
	if x != nil {
		return x.NewWithdrawType
	}
	return CellarV1_WITHDRAW_TYPE_UNSPECIFIED
}

// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint256 index1, uint256 index2)`
type CellarV1_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 string `protobuf:"bytes,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 string `protobuf:"bytes,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
}

func (x *CellarV1_SwapPositions) Reset() {
	*x = CellarV1_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SwapPositions) ProtoMessage() {}

func (x *CellarV1_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV1_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 7}
}

func (x *CellarV1_SwapPositions) GetIndex_1() string {
	if x != nil {
		return x.Index_1
	}
	return ""
}

func (x *CellarV1_SwapPositions) GetIndex_2() string {
	if x != nil {
		return x.Index_2
	}
	return ""
}

// Set the per-wallet deposit limit. Uses the same decimals as the current asset.
//
// Represents function `setDepositLimit()`
type CellarV1_SetDepositLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLimit string `protobuf:"bytes,1,opt,name=new_limit,json=newLimit,proto3" json:"new_limit,omitempty"`
}

func (x *CellarV1_SetDepositLimit) Reset() {
	*x = CellarV1_SetDepositLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SetDepositLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SetDepositLimit) ProtoMessage() {}

func (x *CellarV1_SetDepositLimit) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SetDepositLimit.ProtoReflect.Descriptor instead.
func (*CellarV1_SetDepositLimit) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 8}
}

func (x *CellarV1_SetDepositLimit) GetNewLimit() string {
	if x != nil {
		return x.NewLimit
	}
	return ""
}

// Set the maximum liquidity that cellar can manage. Uses the same decimals as the current asset.
//
// Represents function `setLiquidityLimit()`
type CellarV1_SetLiquidityLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLimit string `protobuf:"bytes,1,opt,name=new_limit,json=newLimit,proto3" json:"new_limit,omitempty"`
}

func (x *CellarV1_SetLiquidityLimit) Reset() {
	*x = CellarV1_SetLiquidityLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SetLiquidityLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SetLiquidityLimit) ProtoMessage() {}

func (x *CellarV1_SetLiquidityLimit) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SetLiquidityLimit.ProtoReflect.Descriptor instead.
func (*CellarV1_SetLiquidityLimit) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 9}
}

func (x *CellarV1_SetLiquidityLimit) GetNewLimit() string {
	if x != nil {
		return x.NewLimit
	}
	return ""
}

// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type CellarV1_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV1_SetShareLockPeriod) Reset() {
	*x = CellarV1_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV1_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV1_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 10}
}

func (x *CellarV1_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

// Represents function `setRebalanceDeviation(uint256)`
type CellarV1_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV1_SetRebalanceDeviation) Reset() {
	*x = CellarV1_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV1_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV1_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{0, 11}
}

func (x *CellarV1_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// Represents function `initiateShutdown()`
type CellarV1Governance_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV1Governance_InitiateShutdown) Reset() {
	*x = CellarV1Governance_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_InitiateShutdown) ProtoMessage() {}

func (x *CellarV1Governance_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 0}
}

// Represents function `liftShutdown()`
type CellarV1Governance_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV1Governance_LiftShutdown) Reset() {
	*x = CellarV1Governance_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_LiftShutdown) ProtoMessage() {}

func (x *CellarV1Governance_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 1}
}

// Represents function `resetHighWatermark()`
type CellarV1Governance_ResetHighWatermark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV1Governance_ResetHighWatermark) Reset() {
	*x = CellarV1Governance_ResetHighWatermark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_ResetHighWatermark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_ResetHighWatermark) ProtoMessage() {}

func (x *CellarV1Governance_ResetHighWatermark) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_ResetHighWatermark.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_ResetHighWatermark) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 2}
}

// Represents function `setFeesDistributor(bytes32)`
type CellarV1Governance_SetFeesDistributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cosmos address of the new fees distributor
	NewFeesDistributor string `protobuf:"bytes,1,opt,name=new_fees_distributor,json=newFeesDistributor,proto3" json:"new_fees_distributor,omitempty"`
}

func (x *CellarV1Governance_SetFeesDistributor) Reset() {
	*x = CellarV1Governance_SetFeesDistributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_SetFeesDistributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_SetFeesDistributor) ProtoMessage() {}

func (x *CellarV1Governance_SetFeesDistributor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_SetFeesDistributor.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_SetFeesDistributor) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 3}
}

func (x *CellarV1Governance_SetFeesDistributor) GetNewFeesDistributor() string {
	if x != nil {
		return x.NewFeesDistributor
	}
	return ""
}

// Represents function `setPerformanceFee(uint64)`
type CellarV1Governance_SetPerformanceFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New performance fee
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV1Governance_SetPerformanceFee) Reset() {
	*x = CellarV1Governance_SetPerformanceFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_SetPerformanceFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_SetPerformanceFee) ProtoMessage() {}

func (x *CellarV1Governance_SetPerformanceFee) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_SetPerformanceFee.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_SetPerformanceFee) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 4}
}

func (x *CellarV1Governance_SetPerformanceFee) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Represents function `setPlatformFee(uint64)`
type CellarV1Governance_SetPlatformFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New platform fee
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV1Governance_SetPlatformFee) Reset() {
	*x = CellarV1Governance_SetPlatformFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_SetPlatformFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_SetPlatformFee) ProtoMessage() {}

func (x *CellarV1Governance_SetPlatformFee) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_SetPlatformFee.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_SetPlatformFee) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 5}
}

func (x *CellarV1Governance_SetPlatformFee) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Represents function `setStrategistPerformanceCut(uint64)`
type CellarV1Governance_SetStrategistPerformanceCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New strategist performance cut
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV1Governance_SetStrategistPerformanceCut) Reset() {
	*x = CellarV1Governance_SetStrategistPerformanceCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_SetStrategistPerformanceCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_SetStrategistPerformanceCut) ProtoMessage() {}

func (x *CellarV1Governance_SetStrategistPerformanceCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_SetStrategistPerformanceCut.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_SetStrategistPerformanceCut) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 6}
}

func (x *CellarV1Governance_SetStrategistPerformanceCut) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Represents function `setStrategistPlatformCut(uint64)`
type CellarV1Governance_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New strategist platform cut
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV1Governance_SetStrategistPlatformCut) Reset() {
	*x = CellarV1Governance_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV1Governance_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 7}
}

func (x *CellarV1Governance_SetStrategistPlatformCut) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Represents function `trustPosition(address)`
type CellarV1Governance_TrustPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Position:
	//
	//	*CellarV1Governance_TrustPosition_Erc20Address
	//	*CellarV1Governance_TrustPosition_Erc4626Address
	//	*CellarV1Governance_TrustPosition_CellarAddress
	Position isCellarV1Governance_TrustPosition_Position `protobuf_oneof:"position"`
}

func (x *CellarV1Governance_TrustPosition) Reset() {
	*x = CellarV1Governance_TrustPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV1Governance_TrustPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV1Governance_TrustPosition) ProtoMessage() {}

func (x *CellarV1Governance_TrustPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV1Governance_TrustPosition.ProtoReflect.Descriptor instead.
func (*CellarV1Governance_TrustPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v1_proto_rawDescGZIP(), []int{1, 8}
}

func (m *CellarV1Governance_TrustPosition) GetPosition() isCellarV1Governance_TrustPosition_Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (x *CellarV1Governance_TrustPosition) GetErc20Address() string {
	if x, ok := x.GetPosition().(*CellarV1Governance_TrustPosition_Erc20Address); ok {
		return x.Erc20Address
	}
	return ""
}

func (x *CellarV1Governance_TrustPosition) GetErc4626Address() string {
	if x, ok := x.GetPosition().(*CellarV1Governance_TrustPosition_Erc4626Address); ok {
		return x.Erc4626Address
	}
	return ""
}

func (x *CellarV1Governance_TrustPosition) GetCellarAddress() string {
	if x, ok := x.GetPosition().(*CellarV1Governance_TrustPosition_CellarAddress); ok {
		return x.CellarAddress
	}
	return ""
}

type isCellarV1Governance_TrustPosition_Position interface {
	isCellarV1Governance_TrustPosition_Position()
}

type CellarV1Governance_TrustPosition_Erc20Address struct {
	Erc20Address string `protobuf:"bytes,1,opt,name=erc20_address,json=erc20Address,proto3,oneof"`
}

type CellarV1Governance_TrustPosition_Erc4626Address struct {
	Erc4626Address string `protobuf:"bytes,2,opt,name=erc4626_address,json=erc4626Address,proto3,oneof"`
}

type CellarV1Governance_TrustPosition_CellarAddress struct {
	CellarAddress string `protobuf:"bytes,3,opt,name=cellar_address,json=cellarAddress,proto3,oneof"`
}

func (*CellarV1Governance_TrustPosition_Erc20Address) isCellarV1Governance_TrustPosition_Position() {}

func (*CellarV1Governance_TrustPosition_Erc4626Address) isCellarV1Governance_TrustPosition_Position() {
}

func (*CellarV1Governance_TrustPosition_CellarAddress) isCellarV1Governance_TrustPosition_Position() {
}

var File_cellar_v1_proto protoreflect.FileDescriptor

var file_cellar_v1_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x0f, 0x0a, 0x08,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x73,
	0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x65, 0x74,
	0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e,
	0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x1a, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x11,
	0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a,
	0x11, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5c, 0x0a, 0x15, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x52, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x3f, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x2a, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0x46, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65,
	0x77, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd4, 0x01, 0x0a,
	0x09, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x60, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x11,
	0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x41, 0x0a, 0x0d, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x1a, 0x2e,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x30,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x1a, 0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63,
	0x6b, 0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x68, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x52, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x0b, 0x0a, 0x12, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x31, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x11,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x52, 0x0a, 0x0d,
	0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x65, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x31, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x46,
	0x65, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x62,
	0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x31, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x31, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x1e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x75, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x75,
	0x74, 0x12, 0x78, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x48,
	0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x46, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6e, 0x65, 0x77, 0x46, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x1a, 0x2b, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x28, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x35, 0x0a, 0x1b, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x32, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x96, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x65, 0x72, 0x63, 0x32, 0x30, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x0f, 0x65, 0x72, 0x63, 0x34, 0x36, 0x32, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x72, 0x63, 0x34,
	0x36, 0x32, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x5a, 0x0e, 0x2f,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellar_v1_proto_rawDescOnce sync.Once
	file_cellar_v1_proto_rawDescData = file_cellar_v1_proto_rawDesc
)

func file_cellar_v1_proto_rawDescGZIP() []byte {
	file_cellar_v1_proto_rawDescOnce.Do(func() {
		file_cellar_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellar_v1_proto_rawDescData)
	})
	return file_cellar_v1_proto_rawDescData
}

var file_cellar_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cellar_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_cellar_v1_proto_goTypes = []interface{}{
	(CellarV1_WithdrawType)(0),                             // 0: steward.v4.CellarV1.WithdrawType
	(*CellarV1)(nil),                                       // 1: steward.v4.CellarV1
	(*CellarV1Governance)(nil),                             // 2: steward.v4.CellarV1Governance
	(*CellarV1_AddPosition)(nil),                           // 3: steward.v4.CellarV1.AddPosition
	(*CellarV1_PushPosition)(nil),                          // 4: steward.v4.CellarV1.PushPosition
	(*CellarV1_RemovePosition)(nil),                        // 5: steward.v4.CellarV1.RemovePosition
	(*CellarV1_SetHoldingPosition)(nil),                    // 6: steward.v4.CellarV1.SetHoldingPosition
	(*CellarV1_Rebalance)(nil),                             // 7: steward.v4.CellarV1.Rebalance
	(*CellarV1_SetStrategistPayoutAddress)(nil),            // 8: steward.v4.CellarV1.SetStrategistPayoutAddress
	(*CellarV1_SetWithdrawType)(nil),                       // 9: steward.v4.CellarV1.SetWithdrawType
	(*CellarV1_SwapPositions)(nil),                         // 10: steward.v4.CellarV1.SwapPositions
	(*CellarV1_SetDepositLimit)(nil),                       // 11: steward.v4.CellarV1.SetDepositLimit
	(*CellarV1_SetLiquidityLimit)(nil),                     // 12: steward.v4.CellarV1.SetLiquidityLimit
	(*CellarV1_SetShareLockPeriod)(nil),                    // 13: steward.v4.CellarV1.SetShareLockPeriod
	(*CellarV1_SetRebalanceDeviation)(nil),                 // 14: steward.v4.CellarV1.SetRebalanceDeviation
	(*CellarV1Governance_InitiateShutdown)(nil),            // 15: steward.v4.CellarV1Governance.InitiateShutdown
	(*CellarV1Governance_LiftShutdown)(nil),                // 16: steward.v4.CellarV1Governance.LiftShutdown
	(*CellarV1Governance_ResetHighWatermark)(nil),          // 17: steward.v4.CellarV1Governance.ResetHighWatermark
	(*CellarV1Governance_SetFeesDistributor)(nil),          // 18: steward.v4.CellarV1Governance.SetFeesDistributor
	(*CellarV1Governance_SetPerformanceFee)(nil),           // 19: steward.v4.CellarV1Governance.SetPerformanceFee
	(*CellarV1Governance_SetPlatformFee)(nil),              // 20: steward.v4.CellarV1Governance.SetPlatformFee
	(*CellarV1Governance_SetStrategistPerformanceCut)(nil), // 21: steward.v4.CellarV1Governance.SetStrategistPerformanceCut
	(*CellarV1Governance_SetStrategistPlatformCut)(nil),    // 22: steward.v4.CellarV1Governance.SetStrategistPlatformCut
	(*CellarV1Governance_TrustPosition)(nil),               // 23: steward.v4.CellarV1Governance.TrustPosition
	(Exchange)(0),                                          // 24: steward.v4.Exchange
	(*SwapParams)(nil),                                     // 25: steward.v4.SwapParams
}
var file_cellar_v1_proto_depIdxs = []int32{
	3,  // 0: steward.v4.CellarV1.add_position:type_name -> steward.v4.CellarV1.AddPosition
	4,  // 1: steward.v4.CellarV1.push_position:type_name -> steward.v4.CellarV1.PushPosition
	5,  // 2: steward.v4.CellarV1.remove_position:type_name -> steward.v4.CellarV1.RemovePosition
	6,  // 3: steward.v4.CellarV1.set_holding_position:type_name -> steward.v4.CellarV1.SetHoldingPosition
	7,  // 4: steward.v4.CellarV1.rebalance:type_name -> steward.v4.CellarV1.Rebalance
	8,  // 5: steward.v4.CellarV1.set_strategist_payout_address:type_name -> steward.v4.CellarV1.SetStrategistPayoutAddress
	9,  // 6: steward.v4.CellarV1.set_withdraw_type:type_name -> steward.v4.CellarV1.SetWithdrawType
	10, // 7: steward.v4.CellarV1.swap_positions:type_name -> steward.v4.CellarV1.SwapPositions
	11, // 8: steward.v4.CellarV1.set_deposit_limit:type_name -> steward.v4.CellarV1.SetDepositLimit
	12, // 9: steward.v4.CellarV1.set_liquidity_limit:type_name -> steward.v4.CellarV1.SetLiquidityLimit
	13, // 10: steward.v4.CellarV1.set_share_lock_period:type_name -> steward.v4.CellarV1.SetShareLockPeriod
	14, // 11: steward.v4.CellarV1.set_rebalance_deviation:type_name -> steward.v4.CellarV1.SetRebalanceDeviation
	15, // 12: steward.v4.CellarV1Governance.initiate_shutdown:type_name -> steward.v4.CellarV1Governance.InitiateShutdown
	16, // 13: steward.v4.CellarV1Governance.lift_shutdown:type_name -> steward.v4.CellarV1Governance.LiftShutdown
	17, // 14: steward.v4.CellarV1Governance.reset_high_watermark:type_name -> steward.v4.CellarV1Governance.ResetHighWatermark
	18, // 15: steward.v4.CellarV1Governance.set_fees_distributor:type_name -> steward.v4.CellarV1Governance.SetFeesDistributor
	19, // 16: steward.v4.CellarV1Governance.set_performance_fee:type_name -> steward.v4.CellarV1Governance.SetPerformanceFee
	20, // 17: steward.v4.CellarV1Governance.set_platform_fee:type_name -> steward.v4.CellarV1Governance.SetPlatformFee
	21, // 18: steward.v4.CellarV1Governance.set_strategist_performance_cut:type_name -> steward.v4.CellarV1Governance.SetStrategistPerformanceCut
	22, // 19: steward.v4.CellarV1Governance.set_strategist_platform_cut:type_name -> steward.v4.CellarV1Governance.SetStrategistPlatformCut
	23, // 20: steward.v4.CellarV1Governance.trust_position:type_name -> steward.v4.CellarV1Governance.TrustPosition
	24, // 21: steward.v4.CellarV1.Rebalance.exchange:type_name -> steward.v4.Exchange
	25, // 22: steward.v4.CellarV1.Rebalance.params:type_name -> steward.v4.SwapParams
	0,  // 23: steward.v4.CellarV1.SetWithdrawType.new_withdraw_type:type_name -> steward.v4.CellarV1.WithdrawType
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_cellar_v1_proto_init() }
func file_cellar_v1_proto_init() {
	if File_cellar_v1_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cellar_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_PushPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_Rebalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SetWithdrawType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SetDepositLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SetLiquidityLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_ResetHighWatermark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_SetFeesDistributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_SetPerformanceFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_SetPlatformFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_SetStrategistPerformanceCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV1Governance_TrustPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cellar_v1_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CellarV1_AddPosition_)(nil),
		(*CellarV1_PushPosition_)(nil),
		(*CellarV1_RemovePosition_)(nil),
		(*CellarV1_SetHoldingPosition_)(nil),
		(*CellarV1_Rebalance_)(nil),
		(*CellarV1_SetStrategistPayoutAddress_)(nil),
		(*CellarV1_SetWithdrawType_)(nil),
		(*CellarV1_SwapPositions_)(nil),
		(*CellarV1_SetDepositLimit_)(nil),
		(*CellarV1_SetLiquidityLimit_)(nil),
		(*CellarV1_SetShareLockPeriod_)(nil),
		(*CellarV1_SetRebalanceDeviation_)(nil),
	}
	file_cellar_v1_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CellarV1Governance_InitiateShutdown_)(nil),
		(*CellarV1Governance_LiftShutdown_)(nil),
		(*CellarV1Governance_ResetHighWatermark_)(nil),
		(*CellarV1Governance_SetFeesDistributor_)(nil),
		(*CellarV1Governance_SetPerformanceFee_)(nil),
		(*CellarV1Governance_SetPlatformFee_)(nil),
		(*CellarV1Governance_SetStrategistPerformanceCut_)(nil),
		(*CellarV1Governance_SetStrategistPlatformCut_)(nil),
		(*CellarV1Governance_TrustPosition_)(nil),
	}
	file_cellar_v1_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*CellarV1Governance_TrustPosition_Erc20Address)(nil),
		(*CellarV1Governance_TrustPosition_Erc4626Address)(nil),
		(*CellarV1Governance_TrustPosition_CellarAddress)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellar_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cellar_v1_proto_goTypes,
		DependencyIndexes: file_cellar_v1_proto_depIdxs,
		EnumInfos:         file_cellar_v1_proto_enumTypes,
		MessageInfos:      file_cellar_v1_proto_msgTypes,
	}.Build()
	File_cellar_v1_proto = out.File
	file_cellar_v1_proto_rawDesc = nil
	file_cellar_v1_proto_goTypes = nil
	file_cellar_v1_proto_depIdxs = nil
}

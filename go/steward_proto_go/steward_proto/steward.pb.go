//
// Steward Strategy Provider API
//
// This proto defines the service/methods used by Strategy Providers to interact with Cellars through the Sommelier chain.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: steward.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a scheduled function call to a particular Cellar
type ScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID (currently simply an Ethereum address) of the target Cellar
	CellarId string `protobuf:"bytes,1,opt,name=cellar_id,json=cellarId,proto3" json:"cellar_id,omitempty"`
	// The block height at which to schedule the contract call
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The data from which the desired contract function will be encoded
	//
	// Types that are assignable to CallData:
	//
	//	*ScheduleRequest_AaveV2Stablecoin
	//	*ScheduleRequest_CellarV1
	//	*ScheduleRequest_CellarV2
	//	*ScheduleRequest_CellarV2_2
	//	*ScheduleRequest_CellarV2_5
	//	*ScheduleRequest_BoringVaultManagerWithMerkleVerification
	CallData isScheduleRequest_CallData `protobuf_oneof:"call_data"`
	// The ID of the chain on which the target Cellar resides
	ChainId uint64 `protobuf:"varint,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The unix timestamp deadline for the contract call to be executed
	Deadline uint64 `protobuf:"varint,10,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleRequest) GetCellarId() string {
	if x != nil {
		return x.CellarId
	}
	return ""
}

func (x *ScheduleRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (m *ScheduleRequest) GetCallData() isScheduleRequest_CallData {
	if m != nil {
		return m.CallData
	}
	return nil
}

func (x *ScheduleRequest) GetAaveV2Stablecoin() *AaveV2Stablecoin {
	if x, ok := x.GetCallData().(*ScheduleRequest_AaveV2Stablecoin); ok {
		return x.AaveV2Stablecoin
	}
	return nil
}

func (x *ScheduleRequest) GetCellarV1() *CellarV1 {
	if x, ok := x.GetCallData().(*ScheduleRequest_CellarV1); ok {
		return x.CellarV1
	}
	return nil
}

func (x *ScheduleRequest) GetCellarV2() *CellarV2 {
	if x, ok := x.GetCallData().(*ScheduleRequest_CellarV2); ok {
		return x.CellarV2
	}
	return nil
}

func (x *ScheduleRequest) GetCellarV2_2() *CellarV2_2 {
	if x, ok := x.GetCallData().(*ScheduleRequest_CellarV2_2); ok {
		return x.CellarV2_2
	}
	return nil
}

func (x *ScheduleRequest) GetCellarV2_5() *CellarV2_5 {
	if x, ok := x.GetCallData().(*ScheduleRequest_CellarV2_5); ok {
		return x.CellarV2_5
	}
	return nil
}

func (x *ScheduleRequest) GetBoringVaultManagerWithMerkleVerification() *BoringVaultManagerWithMerkleVerification {
	if x, ok := x.GetCallData().(*ScheduleRequest_BoringVaultManagerWithMerkleVerification); ok {
		return x.BoringVaultManagerWithMerkleVerification
	}
	return nil
}

func (x *ScheduleRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ScheduleRequest) GetDeadline() uint64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

type isScheduleRequest_CallData interface {
	isScheduleRequest_CallData()
}

type ScheduleRequest_AaveV2Stablecoin struct {
	AaveV2Stablecoin *AaveV2Stablecoin `protobuf:"bytes,3,opt,name=aave_v2_stablecoin,json=aaveV2Stablecoin,proto3,oneof"`
}

type ScheduleRequest_CellarV1 struct {
	CellarV1 *CellarV1 `protobuf:"bytes,4,opt,name=cellar_v1,json=cellarV1,proto3,oneof"`
}

type ScheduleRequest_CellarV2 struct {
	CellarV2 *CellarV2 `protobuf:"bytes,5,opt,name=cellar_v2,json=cellarV2,proto3,oneof"`
}

type ScheduleRequest_CellarV2_2 struct {
	CellarV2_2 *CellarV2_2 `protobuf:"bytes,6,opt,name=cellar_v2_2,json=cellarV22,proto3,oneof"`
}

type ScheduleRequest_CellarV2_5 struct {
	CellarV2_5 *CellarV2_5 `protobuf:"bytes,7,opt,name=cellar_v2_5,json=cellarV25,proto3,oneof"`
}

type ScheduleRequest_BoringVaultManagerWithMerkleVerification struct {
	BoringVaultManagerWithMerkleVerification *BoringVaultManagerWithMerkleVerification `protobuf:"bytes,8,opt,name=boring_vault_manager_with_merkle_verification,json=boringVaultManagerWithMerkleVerification,proto3,oneof"`
}

func (*ScheduleRequest_AaveV2Stablecoin) isScheduleRequest_CallData() {}

func (*ScheduleRequest_CellarV1) isScheduleRequest_CallData() {}

func (*ScheduleRequest_CellarV2) isScheduleRequest_CallData() {}

func (*ScheduleRequest_CellarV2_2) isScheduleRequest_CallData() {}

func (*ScheduleRequest_CellarV2_5) isScheduleRequest_CallData() {}

func (*ScheduleRequest_BoringVaultManagerWithMerkleVerification) isScheduleRequest_CallData() {}

type ScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hex encoded ID of the scheduled cork
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the chain on which the target Cellar resides
	ChainId uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Invalidation scope for the gravity tx, keccak256 of the target contract address and encoded contract call
	InvalidationScope string `protobuf:"bytes,3,opt,name=invalidation_scope,json=invalidationScope,proto3" json:"invalidation_scope,omitempty"`
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScheduleResponse) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ScheduleResponse) GetInvalidationScope() string {
	if x != nil {
		return x.InvalidationScope
	}
	return ""
}

type EncodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellarId string `protobuf:"bytes,1,opt,name=cellar_id,json=cellarId,proto3" json:"cellar_id,omitempty"`
	// The data from which the desired contract function will be encoded
	//
	// Types that are assignable to CallData:
	//
	//	*EncodeRequest_AaveV2Stablecoin
	//	*EncodeRequest_CellarV1
	//	*EncodeRequest_CellarV2
	//	*EncodeRequest_CellarV2_2
	//	*EncodeRequest_CellarV2_5
	CallData isEncodeRequest_CallData `protobuf_oneof:"call_data"`
}

func (x *EncodeRequest) Reset() {
	*x = EncodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeRequest) ProtoMessage() {}

func (x *EncodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeRequest.ProtoReflect.Descriptor instead.
func (*EncodeRequest) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{2}
}

func (x *EncodeRequest) GetCellarId() string {
	if x != nil {
		return x.CellarId
	}
	return ""
}

func (m *EncodeRequest) GetCallData() isEncodeRequest_CallData {
	if m != nil {
		return m.CallData
	}
	return nil
}

func (x *EncodeRequest) GetAaveV2Stablecoin() *AaveV2Stablecoin {
	if x, ok := x.GetCallData().(*EncodeRequest_AaveV2Stablecoin); ok {
		return x.AaveV2Stablecoin
	}
	return nil
}

func (x *EncodeRequest) GetCellarV1() *CellarV1 {
	if x, ok := x.GetCallData().(*EncodeRequest_CellarV1); ok {
		return x.CellarV1
	}
	return nil
}

func (x *EncodeRequest) GetCellarV2() *CellarV2 {
	if x, ok := x.GetCallData().(*EncodeRequest_CellarV2); ok {
		return x.CellarV2
	}
	return nil
}

func (x *EncodeRequest) GetCellarV2_2() *CellarV2_2 {
	if x, ok := x.GetCallData().(*EncodeRequest_CellarV2_2); ok {
		return x.CellarV2_2
	}
	return nil
}

func (x *EncodeRequest) GetCellarV2_5() *CellarV2_5 {
	if x, ok := x.GetCallData().(*EncodeRequest_CellarV2_5); ok {
		return x.CellarV2_5
	}
	return nil
}

type isEncodeRequest_CallData interface {
	isEncodeRequest_CallData()
}

type EncodeRequest_AaveV2Stablecoin struct {
	AaveV2Stablecoin *AaveV2Stablecoin `protobuf:"bytes,2,opt,name=aave_v2_stablecoin,json=aaveV2Stablecoin,proto3,oneof"`
}

type EncodeRequest_CellarV1 struct {
	CellarV1 *CellarV1 `protobuf:"bytes,3,opt,name=cellar_v1,json=cellarV1,proto3,oneof"`
}

type EncodeRequest_CellarV2 struct {
	CellarV2 *CellarV2 `protobuf:"bytes,4,opt,name=cellar_v2,json=cellarV2,proto3,oneof"`
}

type EncodeRequest_CellarV2_2 struct {
	CellarV2_2 *CellarV2_2 `protobuf:"bytes,5,opt,name=cellar_v2_2,json=cellarV22,proto3,oneof"`
}

type EncodeRequest_CellarV2_5 struct {
	CellarV2_5 *CellarV2_5 `protobuf:"bytes,6,opt,name=cellar_v2_5,json=cellarV25,proto3,oneof"`
}

func (*EncodeRequest_AaveV2Stablecoin) isEncodeRequest_CallData() {}

func (*EncodeRequest_CellarV1) isEncodeRequest_CallData() {}

func (*EncodeRequest_CellarV2) isEncodeRequest_CallData() {}

func (*EncodeRequest_CellarV2_2) isEncodeRequest_CallData() {}

func (*EncodeRequest_CellarV2_5) isEncodeRequest_CallData() {}

type EncodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoded contract call
	EncodedCall string `protobuf:"bytes,1,opt,name=encoded_call,json=encodedCall,proto3" json:"encoded_call,omitempty"`
}

func (x *EncodeResponse) Reset() {
	*x = EncodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeResponse) ProtoMessage() {}

func (x *EncodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeResponse.ProtoReflect.Descriptor instead.
func (*EncodeResponse) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{3}
}

func (x *EncodeResponse) GetEncodedCall() string {
	if x != nil {
		return x.EncodedCall
	}
	return ""
}

// Represents a request for Steward's current status
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{4}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{5}
}

func (x *StatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Represents a simulated function call to a particular Cellar
type SimulateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *ScheduleRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// / Whether to simply encode and return the contract call data, skipping the Tenderly simulation
	EncodeOnly bool `protobuf:"varint,2,opt,name=encode_only,json=encodeOnly,proto3" json:"encode_only,omitempty"`
}

func (x *SimulateRequest) Reset() {
	*x = SimulateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateRequest) ProtoMessage() {}

func (x *SimulateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateRequest.ProtoReflect.Descriptor instead.
func (*SimulateRequest) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{6}
}

func (x *SimulateRequest) GetRequest() *ScheduleRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SimulateRequest) GetEncodeOnly() bool {
	if x != nil {
		return x.EncodeOnly
	}
	return false
}

type SimulateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The encoded contract call
	EncodedCall string `protobuf:"bytes,1,opt,name=encoded_call,json=encodedCall,proto3" json:"encoded_call,omitempty"`
	// / The response body from the Tenderly simulation
	ResponseBody string `protobuf:"bytes,2,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
}

func (x *SimulateResponse) Reset() {
	*x = SimulateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateResponse) ProtoMessage() {}

func (x *SimulateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateResponse.ProtoReflect.Descriptor instead.
func (*SimulateResponse) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{7}
}

func (x *SimulateResponse) GetEncodedCall() string {
	if x != nil {
		return x.EncodedCall
	}
	return ""
}

func (x *SimulateResponse) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{8}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steward_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steward_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_steward_proto_rawDescGZIP(), []int{9}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_steward_proto protoreflect.FileDescriptor

var file_steward_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x1a, 0x18, 0x61, 0x61, 0x76,
	0x65, 0x5f, 0x76, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x04, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x61, 0x61,
	0x76, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x56, 0x32, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x61, 0x61, 0x76, 0x65, 0x56, 0x32, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x5f, 0x76, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x31, 0x48, 0x00, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x12, 0x33, 0x0a,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x48, 0x00, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x5f,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x32, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x5f, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x35, 0x12, 0x97, 0x01, 0x0a, 0x2d, 0x62, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x28, 0x62, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x12, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x56,
	0x32, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x61,
	0x61, 0x76, 0x65, 0x56, 0x32, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x33, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x31, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x32, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32,
	0x5f, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x35, 0x42, 0x0b, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x0e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x22,
	0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x0f,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x5a, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x5e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0x54, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x66, 0x0a, 0x1b, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x55, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x44, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_steward_proto_rawDescOnce sync.Once
	file_steward_proto_rawDescData = file_steward_proto_rawDesc
)

func file_steward_proto_rawDescGZIP() []byte {
	file_steward_proto_rawDescOnce.Do(func() {
		file_steward_proto_rawDescData = protoimpl.X.CompressGZIP(file_steward_proto_rawDescData)
	})
	return file_steward_proto_rawDescData
}

var file_steward_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_steward_proto_goTypes = []interface{}{
	(*ScheduleRequest)(nil),                          // 0: steward.v4.ScheduleRequest
	(*ScheduleResponse)(nil),                         // 1: steward.v4.ScheduleResponse
	(*EncodeRequest)(nil),                            // 2: steward.v4.EncodeRequest
	(*EncodeResponse)(nil),                           // 3: steward.v4.EncodeResponse
	(*StatusRequest)(nil),                            // 4: steward.v4.StatusRequest
	(*StatusResponse)(nil),                           // 5: steward.v4.StatusResponse
	(*SimulateRequest)(nil),                          // 6: steward.v4.SimulateRequest
	(*SimulateResponse)(nil),                         // 7: steward.v4.SimulateResponse
	(*VersionRequest)(nil),                           // 8: steward.v4.VersionRequest
	(*VersionResponse)(nil),                          // 9: steward.v4.VersionResponse
	(*AaveV2Stablecoin)(nil),                         // 10: steward.v4.AaveV2Stablecoin
	(*CellarV1)(nil),                                 // 11: steward.v4.CellarV1
	(*CellarV2)(nil),                                 // 12: steward.v4.CellarV2
	(*CellarV2_2)(nil),                               // 13: steward.v4.CellarV2_2
	(*CellarV2_5)(nil),                               // 14: steward.v4.CellarV2_5
	(*BoringVaultManagerWithMerkleVerification)(nil), // 15: steward.v4.BoringVaultManagerWithMerkleVerification
}
var file_steward_proto_depIdxs = []int32{
	10, // 0: steward.v4.ScheduleRequest.aave_v2_stablecoin:type_name -> steward.v4.AaveV2Stablecoin
	11, // 1: steward.v4.ScheduleRequest.cellar_v1:type_name -> steward.v4.CellarV1
	12, // 2: steward.v4.ScheduleRequest.cellar_v2:type_name -> steward.v4.CellarV2
	13, // 3: steward.v4.ScheduleRequest.cellar_v2_2:type_name -> steward.v4.CellarV2_2
	14, // 4: steward.v4.ScheduleRequest.cellar_v2_5:type_name -> steward.v4.CellarV2_5
	15, // 5: steward.v4.ScheduleRequest.boring_vault_manager_with_merkle_verification:type_name -> steward.v4.BoringVaultManagerWithMerkleVerification
	10, // 6: steward.v4.EncodeRequest.aave_v2_stablecoin:type_name -> steward.v4.AaveV2Stablecoin
	11, // 7: steward.v4.EncodeRequest.cellar_v1:type_name -> steward.v4.CellarV1
	12, // 8: steward.v4.EncodeRequest.cellar_v2:type_name -> steward.v4.CellarV2
	13, // 9: steward.v4.EncodeRequest.cellar_v2_2:type_name -> steward.v4.CellarV2_2
	14, // 10: steward.v4.EncodeRequest.cellar_v2_5:type_name -> steward.v4.CellarV2_5
	0,  // 11: steward.v4.SimulateRequest.request:type_name -> steward.v4.ScheduleRequest
	0,  // 12: steward.v4.ContractCallService.Schedule:input_type -> steward.v4.ScheduleRequest
	2,  // 13: steward.v4.EncodingService.Encode:input_type -> steward.v4.EncodeRequest
	6,  // 14: steward.v4.SimulateContractCallService.Simulate:input_type -> steward.v4.SimulateRequest
	8,  // 15: steward.v4.StatusService.Version:input_type -> steward.v4.VersionRequest
	1,  // 16: steward.v4.ContractCallService.Schedule:output_type -> steward.v4.ScheduleResponse
	3,  // 17: steward.v4.EncodingService.Encode:output_type -> steward.v4.EncodeResponse
	7,  // 18: steward.v4.SimulateContractCallService.Simulate:output_type -> steward.v4.SimulateResponse
	9,  // 19: steward.v4.StatusService.Version:output_type -> steward.v4.VersionResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_steward_proto_init() }
func file_steward_proto_init() {
	if File_steward_proto != nil {
		return
	}
	file_aave_v2_stablecoin_proto_init()
	file_cellar_v1_proto_init()
	file_cellar_v2_proto_init()
	file_boring_vault_v1_manager_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steward_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steward_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steward_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ScheduleRequest_AaveV2Stablecoin)(nil),
		(*ScheduleRequest_CellarV1)(nil),
		(*ScheduleRequest_CellarV2)(nil),
		(*ScheduleRequest_CellarV2_2)(nil),
		(*ScheduleRequest_CellarV2_5)(nil),
		(*ScheduleRequest_BoringVaultManagerWithMerkleVerification)(nil),
	}
	file_steward_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*EncodeRequest_AaveV2Stablecoin)(nil),
		(*EncodeRequest_CellarV1)(nil),
		(*EncodeRequest_CellarV2)(nil),
		(*EncodeRequest_CellarV2_2)(nil),
		(*EncodeRequest_CellarV2_5)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steward_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_steward_proto_goTypes,
		DependencyIndexes: file_steward_proto_depIdxs,
		MessageInfos:      file_steward_proto_msgTypes,
	}.Build()
	File_steward_proto = out.File
	file_steward_proto_rawDesc = nil
	file_steward_proto_goTypes = nil
	file_steward_proto_depIdxs = nil
}

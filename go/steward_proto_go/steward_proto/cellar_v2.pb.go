//
// An API for cellars that implement V2 of the EIP4626-compatible Cellar.sol contract.
//
// See [Cellar.sol](https://github.com/PeggyJV/cellar-contracts/blob/main/src/base/Cellar.sol)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: cellar_v2.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a function call to a cellar that implements Cellar.sol
type CellarV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function you wish to execute on the target cellar
	//
	// Types that are assignable to Function:
	//
	//	*CellarV2_CallOnAdaptor_
	//	*CellarV2_RemovePosition_
	//	*CellarV2_SetHoldingPosition_
	//	*CellarV2_SetStrategistPayoutAddress_
	//	*CellarV2_SwapPositions_
	//	*CellarV2_SetShareLockPeriod_
	//	*CellarV2_AddPosition_
	//	*CellarV2_SetupAdaptor_
	//	*CellarV2_InitiateShutdown_
	//	*CellarV2_LiftShutdown_
	//	*CellarV2_SetPlatformFee_
	//	*CellarV2_SetStrategistPlatformCut_
	//	*CellarV2_SetRebalanceDeviation_
	Function isCellarV2_Function `protobuf_oneof:"function"`
}

func (x *CellarV2) Reset() {
	*x = CellarV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2) ProtoMessage() {}

func (x *CellarV2) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2.ProtoReflect.Descriptor instead.
func (*CellarV2) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0}
}

func (m *CellarV2) GetFunction() isCellarV2_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2) GetCallOnAdaptor() *CellarV2_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_CallOnAdaptor_); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2) GetRemovePosition() *CellarV2_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_RemovePosition_); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV2) GetSetHoldingPosition() *CellarV2_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_SetHoldingPosition_); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2) GetSetStrategistPayoutAddress() *CellarV2_SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*CellarV2_SetStrategistPayoutAddress_); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *CellarV2) GetSwapPositions() *CellarV2_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV2_SwapPositions_); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *CellarV2) GetSetShareLockPeriod() *CellarV2_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV2_SetShareLockPeriod_); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

func (x *CellarV2) GetAddPosition() *CellarV2_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_AddPosition_); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2) GetSetupAdaptor() *CellarV2_SetupAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_SetupAdaptor_); ok {
		return x.SetupAdaptor
	}
	return nil
}

func (x *CellarV2) GetInitiateShutdown() *CellarV2_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2_InitiateShutdown_); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2) GetLiftShutdown() *CellarV2_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2_LiftShutdown_); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV2) GetSetPlatformFee() *CellarV2_SetPlatformFee {
	if x, ok := x.GetFunction().(*CellarV2_SetPlatformFee_); ok {
		return x.SetPlatformFee
	}
	return nil
}

func (x *CellarV2) GetSetStrategistPlatformCut() *CellarV2_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2_SetStrategistPlatformCut_); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2) GetSetRebalanceDeviation() *CellarV2_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_SetRebalanceDeviation_); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

type isCellarV2_Function interface {
	isCellarV2_Function()
}

type CellarV2_CallOnAdaptor_ struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_CallOnAdaptor `protobuf:"bytes,1,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_RemovePosition_ struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *CellarV2_RemovePosition `protobuf:"bytes,2,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV2_SetHoldingPosition_ struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_SetHoldingPosition `protobuf:"bytes,3,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_SetStrategistPayoutAddress_ struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *CellarV2_SetStrategistPayoutAddress `protobuf:"bytes,4,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type CellarV2_SwapPositions_ struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV2_SwapPositions `protobuf:"bytes,5,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type CellarV2_SetShareLockPeriod_ struct {
	// Represents function `setShareLockPeriod(uint256 newLock)`
	SetShareLockPeriod *CellarV2_SetShareLockPeriod `protobuf:"bytes,6,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

type CellarV2_AddPosition_ struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_AddPosition `protobuf:"bytes,7,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_SetupAdaptor_ struct {
	// Represents function `setupAdaptor(address adaptor)`
	SetupAdaptor *CellarV2_SetupAdaptor `protobuf:"bytes,8,opt,name=setup_adaptor,json=setupAdaptor,proto3,oneof"`
}

type CellarV2_InitiateShutdown_ struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2_InitiateShutdown `protobuf:"bytes,9,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2_LiftShutdown_ struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2_LiftShutdown `protobuf:"bytes,10,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV2_SetPlatformFee_ struct {
	// Represents function `setPlatformFee(uint256)`
	SetPlatformFee *CellarV2_SetPlatformFee `protobuf:"bytes,11,opt,name=set_platform_fee,json=setPlatformFee,proto3,oneof"`
}

type CellarV2_SetStrategistPlatformCut_ struct {
	// Represents function `setStrategistPlatformCut(address)`
	SetStrategistPlatformCut *CellarV2_SetStrategistPlatformCut `protobuf:"bytes,12,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2_SetRebalanceDeviation_ struct {
	// Represents function `setRebalanceDeviation(uint256)`
	SetRebalanceDeviation *CellarV2_SetRebalanceDeviation `protobuf:"bytes,13,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

func (*CellarV2_CallOnAdaptor_) isCellarV2_Function() {}

func (*CellarV2_RemovePosition_) isCellarV2_Function() {}

func (*CellarV2_SetHoldingPosition_) isCellarV2_Function() {}

func (*CellarV2_SetStrategistPayoutAddress_) isCellarV2_Function() {}

func (*CellarV2_SwapPositions_) isCellarV2_Function() {}

func (*CellarV2_SetShareLockPeriod_) isCellarV2_Function() {}

func (*CellarV2_AddPosition_) isCellarV2_Function() {}

func (*CellarV2_SetupAdaptor_) isCellarV2_Function() {}

func (*CellarV2_InitiateShutdown_) isCellarV2_Function() {}

func (*CellarV2_LiftShutdown_) isCellarV2_Function() {}

func (*CellarV2_SetPlatformFee_) isCellarV2_Function() {}

func (*CellarV2_SetStrategistPlatformCut_) isCellarV2_Function() {}

func (*CellarV2_SetRebalanceDeviation_) isCellarV2_Function() {}

// Represent a function call initiated through a governance proposal
type CellarV2Governance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function to call on the target cellar
	//
	// Types that are assignable to Function:
	//
	//	*CellarV2Governance_InitiateShutdown_
	//	*CellarV2Governance_LiftShutdown_
	//	*CellarV2Governance_SetPlatformFee_
	//	*CellarV2Governance_SetStrategistPlatformCut_
	//	*CellarV2Governance_SetupAdaptor_
	//	*CellarV2Governance_SetRebalanceDeviation_
	Function isCellarV2Governance_Function `protobuf_oneof:"function"`
}

func (x *CellarV2Governance) Reset() {
	*x = CellarV2Governance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance) ProtoMessage() {}

func (x *CellarV2Governance) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance.ProtoReflect.Descriptor instead.
func (*CellarV2Governance) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1}
}

func (m *CellarV2Governance) GetFunction() isCellarV2Governance_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2Governance) GetInitiateShutdown() *CellarV2Governance_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2Governance_InitiateShutdown_); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2Governance) GetLiftShutdown() *CellarV2Governance_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2Governance_LiftShutdown_); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV2Governance) GetSetPlatformFee() *CellarV2Governance_SetPlatformFee {
	if x, ok := x.GetFunction().(*CellarV2Governance_SetPlatformFee_); ok {
		return x.SetPlatformFee
	}
	return nil
}

func (x *CellarV2Governance) GetSetStrategistPlatformCut() *CellarV2Governance_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2Governance_SetStrategistPlatformCut_); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2Governance) GetSetupAdaptor() *CellarV2Governance_SetupAdaptor {
	if x, ok := x.GetFunction().(*CellarV2Governance_SetupAdaptor_); ok {
		return x.SetupAdaptor
	}
	return nil
}

func (x *CellarV2Governance) GetSetRebalanceDeviation() *CellarV2Governance_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2Governance_SetRebalanceDeviation_); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

type isCellarV2Governance_Function interface {
	isCellarV2Governance_Function()
}

type CellarV2Governance_InitiateShutdown_ struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2Governance_InitiateShutdown `protobuf:"bytes,1,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2Governance_LiftShutdown_ struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2Governance_LiftShutdown `protobuf:"bytes,2,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV2Governance_SetPlatformFee_ struct {
	// Represents function `setPlatformFee(uint256)`
	SetPlatformFee *CellarV2Governance_SetPlatformFee `protobuf:"bytes,3,opt,name=set_platform_fee,json=setPlatformFee,proto3,oneof"`
}

type CellarV2Governance_SetStrategistPlatformCut_ struct {
	// Represents function `setStrategistPlatformCut(address)`
	SetStrategistPlatformCut *CellarV2Governance_SetStrategistPlatformCut `protobuf:"bytes,4,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2Governance_SetupAdaptor_ struct {
	// Represents function `setupAdaptor(address adaptor)`
	SetupAdaptor *CellarV2Governance_SetupAdaptor `protobuf:"bytes,5,opt,name=setup_adaptor,json=setupAdaptor,proto3,oneof"`
}

type CellarV2Governance_SetRebalanceDeviation_ struct {
	// Represents function `setRebalanceDeviation(uint256)`
	SetRebalanceDeviation *CellarV2Governance_SetRebalanceDeviation `protobuf:"bytes,6,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

func (*CellarV2Governance_InitiateShutdown_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_LiftShutdown_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_SetPlatformFee_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_SetStrategistPlatformCut_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_SetupAdaptor_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_SetRebalanceDeviation_) isCellarV2Governance_Function() {}

type CellarV2_2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallType:
	//
	//	*CellarV2_2_FunctionCall_
	//	*CellarV2_2_Multicall_
	CallType isCellarV2_2_CallType `protobuf_oneof:"call_type"`
}

func (x *CellarV2_2) Reset() {
	*x = CellarV2_2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2) ProtoMessage() {}

func (x *CellarV2_2) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2.ProtoReflect.Descriptor instead.
func (*CellarV2_2) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2}
}

func (m *CellarV2_2) GetCallType() isCellarV2_2_CallType {
	if m != nil {
		return m.CallType
	}
	return nil
}

func (x *CellarV2_2) GetFunctionCall() *CellarV2_2_FunctionCall {
	if x, ok := x.GetCallType().(*CellarV2_2_FunctionCall_); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *CellarV2_2) GetMulticall() *CellarV2_2_Multicall {
	if x, ok := x.GetCallType().(*CellarV2_2_Multicall_); ok {
		return x.Multicall
	}
	return nil
}

type isCellarV2_2_CallType interface {
	isCellarV2_2_CallType()
}

type CellarV2_2_FunctionCall_ struct {
	// Represents a single function call
	FunctionCall *CellarV2_2_FunctionCall `protobuf:"bytes,1,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type CellarV2_2_Multicall_ struct {
	// Represents multiple, ordered function calls
	Multicall *CellarV2_2_Multicall `protobuf:"bytes,2,opt,name=multicall,proto3,oneof"`
}

func (*CellarV2_2_FunctionCall_) isCellarV2_2_CallType() {}

func (*CellarV2_2_Multicall_) isCellarV2_2_CallType() {}

// Represent a function call initiated through a governance proposal
type CellarV2_2Governance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallType:
	//
	//	*CellarV2_2Governance_FunctionCall_
	//	*CellarV2_2Governance_Multicall_
	CallType isCellarV2_2Governance_CallType `protobuf_oneof:"call_type"`
}

func (x *CellarV2_2Governance) Reset() {
	*x = CellarV2_2Governance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance) ProtoMessage() {}

func (x *CellarV2_2Governance) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3}
}

func (m *CellarV2_2Governance) GetCallType() isCellarV2_2Governance_CallType {
	if m != nil {
		return m.CallType
	}
	return nil
}

func (x *CellarV2_2Governance) GetFunctionCall() *CellarV2_2Governance_FunctionCall {
	if x, ok := x.GetCallType().(*CellarV2_2Governance_FunctionCall_); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *CellarV2_2Governance) GetMulticall() *CellarV2_2Governance_Multicall {
	if x, ok := x.GetCallType().(*CellarV2_2Governance_Multicall_); ok {
		return x.Multicall
	}
	return nil
}

type isCellarV2_2Governance_CallType interface {
	isCellarV2_2Governance_CallType()
}

type CellarV2_2Governance_FunctionCall_ struct {
	// Represents a single function call
	FunctionCall *CellarV2_2Governance_FunctionCall `protobuf:"bytes,1,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type CellarV2_2Governance_Multicall_ struct {
	// Represents multiple, ordered function calls
	Multicall *CellarV2_2Governance_Multicall `protobuf:"bytes,2,opt,name=multicall,proto3,oneof"`
}

func (*CellarV2_2Governance_FunctionCall_) isCellarV2_2Governance_CallType() {}

func (*CellarV2_2Governance_Multicall_) isCellarV2_2Governance_CallType() {}

type CellarV2_5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallType:
	//
	//	*CellarV2_5_FunctionCall_
	//	*CellarV2_5_Multicall_
	CallType isCellarV2_5_CallType `protobuf_oneof:"call_type"`
}

func (x *CellarV2_5) Reset() {
	*x = CellarV2_5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5) ProtoMessage() {}

func (x *CellarV2_5) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5.ProtoReflect.Descriptor instead.
func (*CellarV2_5) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4}
}

func (m *CellarV2_5) GetCallType() isCellarV2_5_CallType {
	if m != nil {
		return m.CallType
	}
	return nil
}

func (x *CellarV2_5) GetFunctionCall() *CellarV2_5_FunctionCall {
	if x, ok := x.GetCallType().(*CellarV2_5_FunctionCall_); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *CellarV2_5) GetMulticall() *CellarV2_5_Multicall {
	if x, ok := x.GetCallType().(*CellarV2_5_Multicall_); ok {
		return x.Multicall
	}
	return nil
}

type isCellarV2_5_CallType interface {
	isCellarV2_5_CallType()
}

type CellarV2_5_FunctionCall_ struct {
	// Represents a single function call
	FunctionCall *CellarV2_5_FunctionCall `protobuf:"bytes,1,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type CellarV2_5_Multicall_ struct {
	// Represents multiple, ordered function calls
	Multicall *CellarV2_5_Multicall `protobuf:"bytes,2,opt,name=multicall,proto3,oneof"`
}

func (*CellarV2_5_FunctionCall_) isCellarV2_5_CallType() {}

func (*CellarV2_5_Multicall_) isCellarV2_5_CallType() {}

// Represent a function call initiated through a governance proposal
type CellarV2_5Governance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallType:
	//
	//	*CellarV2_5Governance_FunctionCall_
	//	*CellarV2_5Governance_Multicall_
	CallType isCellarV2_5Governance_CallType `protobuf_oneof:"call_type"`
}

func (x *CellarV2_5Governance) Reset() {
	*x = CellarV2_5Governance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance) ProtoMessage() {}

func (x *CellarV2_5Governance) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5}
}

func (m *CellarV2_5Governance) GetCallType() isCellarV2_5Governance_CallType {
	if m != nil {
		return m.CallType
	}
	return nil
}

func (x *CellarV2_5Governance) GetFunctionCall() *CellarV2_5Governance_FunctionCall {
	if x, ok := x.GetCallType().(*CellarV2_5Governance_FunctionCall_); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *CellarV2_5Governance) GetMulticall() *CellarV2_5Governance_Multicall {
	if x, ok := x.GetCallType().(*CellarV2_5Governance_Multicall_); ok {
		return x.Multicall
	}
	return nil
}

type isCellarV2_5Governance_CallType interface {
	isCellarV2_5Governance_CallType()
}

type CellarV2_5Governance_FunctionCall_ struct {
	// Represents a single function call
	FunctionCall *CellarV2_5Governance_FunctionCall `protobuf:"bytes,1,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type CellarV2_5Governance_Multicall_ struct {
	// Represents multiple, ordered function calls
	Multicall *CellarV2_5Governance_Multicall `protobuf:"bytes,2,opt,name=multicall,proto3,oneof"`
}

func (*CellarV2_5Governance_FunctionCall_) isCellarV2_5Governance_CallType() {}

func (*CellarV2_5Governance_Multicall_) isCellarV2_5Governance_CallType() {}

// Represents a call to adaptor an. The cellar must be authorized to call the target adaptor.
type AdaptorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the adaptor
	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
	// The function call data for the adaptor
	//
	// Types that are assignable to CallData:
	//
	//	*AdaptorCall_AaveATokenV1Calls
	//	*AdaptorCall_AaveDebtTokenV1Calls
	//	*AdaptorCall_CompoundCTokenV2Calls
	//	*AdaptorCall_AaveATokenV2Calls
	//	*AdaptorCall_AaveDebtTokenV2Calls
	//	*AdaptorCall_AaveV3ATokenV1Calls
	//	*AdaptorCall_AaveV3DebtTokenV1Calls
	//	*AdaptorCall_OneInchV1Calls
	//	*AdaptorCall_FeesAndReservesV1Calls
	//	*AdaptorCall_ZeroXV1Calls
	//	*AdaptorCall_SwapWithUniswapV1Calls
	//	*AdaptorCall_VestingSimpleV2Calls
	//	*AdaptorCall_CellarV1Calls
	//	*AdaptorCall_UniswapV3V2Calls
	//	*AdaptorCall_AaveV2EnableAssetAsCollateralV1Calls
	//	*AdaptorCall_FTokenV1Calls
	//	*AdaptorCall_MorphoAaveV2ATokenV1Calls
	//	*AdaptorCall_MorphoAaveV2DebtTokenV1Calls
	//	*AdaptorCall_MorphoAaveV3ATokenCollateralV1Calls
	//	*AdaptorCall_MorphoAaveV3ATokenP2PV1Calls
	//	*AdaptorCall_MorphoAaveV3DebtTokenV1Calls
	//	*AdaptorCall_BalancerPoolV1Calls
	//	*AdaptorCall_LegacyCellarV1Calls
	//	*AdaptorCall_DebtFTokenV1Calls
	//	*AdaptorCall_CollateralFTokenV1Calls
	//	*AdaptorCall_AaveV3DebtTokenV1FlashLoanCalls
	//	*AdaptorCall_BalancerPoolV1FlashLoanCalls
	//	*AdaptorCall_ConvexCurveV1Calls
	//	*AdaptorCall_CurveV1Calls
	//	*AdaptorCall_AuraErc4626V1Calls
	//	*AdaptorCall_MorphoBlueCollateralV1Calls
	//	*AdaptorCall_MorphoBlueDebtV1Calls
	//	*AdaptorCall_MorphoBlueSupplyV1Calls
	//	*AdaptorCall_Erc4626V1Calls
	//	*AdaptorCall_StakingV1Calls
	//	*AdaptorCall_PendleV1Calls
	CallData isAdaptorCall_CallData `protobuf_oneof:"call_data"`
}

func (x *AdaptorCall) Reset() {
	*x = AdaptorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptorCall) ProtoMessage() {}

func (x *AdaptorCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptorCall.ProtoReflect.Descriptor instead.
func (*AdaptorCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{6}
}

func (x *AdaptorCall) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

func (m *AdaptorCall) GetCallData() isAdaptorCall_CallData {
	if m != nil {
		return m.CallData
	}
	return nil
}

func (x *AdaptorCall) GetAaveATokenV1Calls() *AaveATokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveATokenV1Calls); ok {
		return x.AaveATokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveDebtTokenV1Calls() *AaveDebtTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveDebtTokenV1Calls); ok {
		return x.AaveDebtTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetCompoundCTokenV2Calls() *CompoundCTokenAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_CompoundCTokenV2Calls); ok {
		return x.CompoundCTokenV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveATokenV2Calls() *AaveATokenAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveATokenV2Calls); ok {
		return x.AaveATokenV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveDebtTokenV2Calls() *AaveDebtTokenAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveDebtTokenV2Calls); ok {
		return x.AaveDebtTokenV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveV3ATokenV1Calls() *AaveV3ATokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveV3ATokenV1Calls); ok {
		return x.AaveV3ATokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveV3DebtTokenV1Calls() *AaveV3DebtTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveV3DebtTokenV1Calls); ok {
		return x.AaveV3DebtTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetOneInchV1Calls() *OneInchAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_OneInchV1Calls); ok {
		return x.OneInchV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetFeesAndReservesV1Calls() *FeesAndReservesAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_FeesAndReservesV1Calls); ok {
		return x.FeesAndReservesV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetZeroXV1Calls() *ZeroXAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_ZeroXV1Calls); ok {
		return x.ZeroXV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetSwapWithUniswapV1Calls() *SwapWithUniswapAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_SwapWithUniswapV1Calls); ok {
		return x.SwapWithUniswapV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetVestingSimpleV2Calls() *VestingSimpleAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_VestingSimpleV2Calls); ok {
		return x.VestingSimpleV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetCellarV1Calls() *CellarAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_CellarV1Calls); ok {
		return x.CellarV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetUniswapV3V2Calls() *UniswapV3AdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_UniswapV3V2Calls); ok {
		return x.UniswapV3V2Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveV2EnableAssetAsCollateralV1Calls() *AaveV2EnableAssetAsCollateralAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveV2EnableAssetAsCollateralV1Calls); ok {
		return x.AaveV2EnableAssetAsCollateralV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetFTokenV1Calls() *FTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_FTokenV1Calls); ok {
		return x.FTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoAaveV2ATokenV1Calls() *MorphoAaveV2ATokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoAaveV2ATokenV1Calls); ok {
		return x.MorphoAaveV2ATokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoAaveV2DebtTokenV1Calls() *MorphoAaveV2DebtTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoAaveV2DebtTokenV1Calls); ok {
		return x.MorphoAaveV2DebtTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoAaveV3ATokenCollateralV1Calls() *MorphoAaveV3ATokenCollateralAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoAaveV3ATokenCollateralV1Calls); ok {
		return x.MorphoAaveV3ATokenCollateralV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoAaveV3ATokenP2PV1Calls() *MorphoAaveV3ATokenP2PAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoAaveV3ATokenP2PV1Calls); ok {
		return x.MorphoAaveV3ATokenP2PV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoAaveV3DebtTokenV1Calls() *MorphoAaveV3DebtTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoAaveV3DebtTokenV1Calls); ok {
		return x.MorphoAaveV3DebtTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetBalancerPoolV1Calls() *BalancerPoolAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_BalancerPoolV1Calls); ok {
		return x.BalancerPoolV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetLegacyCellarV1Calls() *LegacyCellarAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_LegacyCellarV1Calls); ok {
		return x.LegacyCellarV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetDebtFTokenV1Calls() *DebtFTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_DebtFTokenV1Calls); ok {
		return x.DebtFTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetCollateralFTokenV1Calls() *CollateralFTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_CollateralFTokenV1Calls); ok {
		return x.CollateralFTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveV3DebtTokenV1FlashLoanCalls() *AaveV3DebtTokenAdaptorV1FlashLoanCalls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveV3DebtTokenV1FlashLoanCalls); ok {
		return x.AaveV3DebtTokenV1FlashLoanCalls
	}
	return nil
}

func (x *AdaptorCall) GetBalancerPoolV1FlashLoanCalls() *BalancerPoolAdaptorV1FlashLoanCalls {
	if x, ok := x.GetCallData().(*AdaptorCall_BalancerPoolV1FlashLoanCalls); ok {
		return x.BalancerPoolV1FlashLoanCalls
	}
	return nil
}

func (x *AdaptorCall) GetConvexCurveV1Calls() *ConvexCurveAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_ConvexCurveV1Calls); ok {
		return x.ConvexCurveV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetCurveV1Calls() *CurveAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_CurveV1Calls); ok {
		return x.CurveV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetAuraErc4626V1Calls() *AuraERC4626AdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AuraErc4626V1Calls); ok {
		return x.AuraErc4626V1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoBlueCollateralV1Calls() *MorphoBlueCollateralAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoBlueCollateralV1Calls); ok {
		return x.MorphoBlueCollateralV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoBlueDebtV1Calls() *MorphoBlueDebtAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoBlueDebtV1Calls); ok {
		return x.MorphoBlueDebtV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetMorphoBlueSupplyV1Calls() *MorphoBlueSupplyAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_MorphoBlueSupplyV1Calls); ok {
		return x.MorphoBlueSupplyV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetErc4626V1Calls() *ERC4626AdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_Erc4626V1Calls); ok {
		return x.Erc4626V1Calls
	}
	return nil
}

func (x *AdaptorCall) GetStakingV1Calls() *StakingAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_StakingV1Calls); ok {
		return x.StakingV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetPendleV1Calls() *PendleAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_PendleV1Calls); ok {
		return x.PendleV1Calls
	}
	return nil
}

type isAdaptorCall_CallData interface {
	isAdaptorCall_CallData()
}

type AdaptorCall_AaveATokenV1Calls struct {
	// Represents function calls to the AaveATokenAdaptor V1
	AaveATokenV1Calls *AaveATokenAdaptorV1Calls `protobuf:"bytes,2,opt,name=aave_a_token_v1_calls,json=aaveATokenV1Calls,proto3,oneof"`
}

type AdaptorCall_AaveDebtTokenV1Calls struct {
	// Represents function calls to the AavaDebtTokenAdaptor V1
	AaveDebtTokenV1Calls *AaveDebtTokenAdaptorV1Calls `protobuf:"bytes,3,opt,name=aave_debt_token_v1_calls,json=aaveDebtTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_CompoundCTokenV2Calls struct {
	// Represents function calls to the CompoundCTokenAdaptor V2
	CompoundCTokenV2Calls *CompoundCTokenAdaptorV2Calls `protobuf:"bytes,4,opt,name=compound_c_token_v2_calls,json=compoundCTokenV2Calls,proto3,oneof"`
}

type AdaptorCall_AaveATokenV2Calls struct {
	// Represents function calls to the AaveATokenV2Adaptor
	AaveATokenV2Calls *AaveATokenAdaptorV2Calls `protobuf:"bytes,5,opt,name=aave_a_token_v2_calls,json=aaveATokenV2Calls,proto3,oneof"`
}

type AdaptorCall_AaveDebtTokenV2Calls struct {
	// Represents function calls to the AavaDebtTokenV2Adaptor
	AaveDebtTokenV2Calls *AaveDebtTokenAdaptorV2Calls `protobuf:"bytes,6,opt,name=aave_debt_token_v2_calls,json=aaveDebtTokenV2Calls,proto3,oneof"`
}

type AdaptorCall_AaveV3ATokenV1Calls struct {
	// Represents function calls to the AaveATokenV1Adaptor
	AaveV3ATokenV1Calls *AaveV3ATokenAdaptorV1Calls `protobuf:"bytes,7,opt,name=aave_v3_a_token_v1_calls,json=aaveV3ATokenV1Calls,proto3,oneof"`
}

type AdaptorCall_AaveV3DebtTokenV1Calls struct {
	// Represents function calls to the AavaDebtTokenV1Adaptor
	AaveV3DebtTokenV1Calls *AaveV3DebtTokenAdaptorV1Calls `protobuf:"bytes,8,opt,name=aave_v3_debt_token_v1_calls,json=aaveV3DebtTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_OneInchV1Calls struct {
	// Represents function calls to the OneInchAdaptorV1
	OneInchV1Calls *OneInchAdaptorV1Calls `protobuf:"bytes,9,opt,name=one_inch_v1_calls,json=oneInchV1Calls,proto3,oneof"`
}

type AdaptorCall_FeesAndReservesV1Calls struct {
	// Represents function calls to the FeesAndReservesAdaptorV1
	FeesAndReservesV1Calls *FeesAndReservesAdaptorV1Calls `protobuf:"bytes,10,opt,name=fees_and_reserves_v1_calls,json=feesAndReservesV1Calls,proto3,oneof"`
}

type AdaptorCall_ZeroXV1Calls struct {
	// Represents functionc alls to the ZeroXAdaptorV1
	ZeroXV1Calls *ZeroXAdaptorV1Calls `protobuf:"bytes,11,opt,name=zero_x_v1_calls,json=zeroXV1Calls,proto3,oneof"`
}

type AdaptorCall_SwapWithUniswapV1Calls struct {
	// Represents function calls to the SwapWithUniswapAdaptorV1
	SwapWithUniswapV1Calls *SwapWithUniswapAdaptorV1Calls `protobuf:"bytes,12,opt,name=swap_with_uniswap_v1_calls,json=swapWithUniswapV1Calls,proto3,oneof"`
}

type AdaptorCall_VestingSimpleV2Calls struct {
	// Represents function calls to VestingSimpleAdaptor
	VestingSimpleV2Calls *VestingSimpleAdaptorV2Calls `protobuf:"bytes,13,opt,name=vesting_simple_v2_calls,json=vestingSimpleV2Calls,proto3,oneof"`
}

type AdaptorCall_CellarV1Calls struct {
	// Represents function calls to the CellarAdaptor
	CellarV1Calls *CellarAdaptorV1Calls `protobuf:"bytes,14,opt,name=cellar_v1_calls,json=cellarV1Calls,proto3,oneof"`
}

type AdaptorCall_UniswapV3V2Calls struct {
	// Represents function calls to the UniswapV3Adaptor V2
	UniswapV3V2Calls *UniswapV3AdaptorV2Calls `protobuf:"bytes,15,opt,name=uniswap_v3_v2_calls,json=uniswapV3V2Calls,proto3,oneof"`
}

type AdaptorCall_AaveV2EnableAssetAsCollateralV1Calls struct {
	// Represents function calls to the AaveV2EnableAssetAsCollatorAdaptor V1
	AaveV2EnableAssetAsCollateralV1Calls *AaveV2EnableAssetAsCollateralAdaptorV1Calls `protobuf:"bytes,16,opt,name=aave_v2_enable_asset_as_collateral_v1_calls,json=aaveV2EnableAssetAsCollateralV1Calls,proto3,oneof"`
}

type AdaptorCall_FTokenV1Calls struct {
	// Represents function calls to the FTokenAdaptor V1
	FTokenV1Calls *FTokenAdaptorV1Calls `protobuf:"bytes,17,opt,name=f_token_v1_calls,json=fTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoAaveV2ATokenV1Calls struct {
	// Represents function calls to the MorphoAaveV2AToken V1
	MorphoAaveV2ATokenV1Calls *MorphoAaveV2ATokenAdaptorV1Calls `protobuf:"bytes,18,opt,name=morpho_aave_v2_a_token_v1_calls,json=morphoAaveV2ATokenV1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoAaveV2DebtTokenV1Calls struct {
	// Represents function calls to the MorphoAaveV2DebtToken V1
	MorphoAaveV2DebtTokenV1Calls *MorphoAaveV2DebtTokenAdaptorV1Calls `protobuf:"bytes,19,opt,name=morpho_aave_v2_debt_token_v1_calls,json=morphoAaveV2DebtTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoAaveV3ATokenCollateralV1Calls struct {
	// Represents function calls to the MorphoAaveV3ATokenCollateral V1
	MorphoAaveV3ATokenCollateralV1Calls *MorphoAaveV3ATokenCollateralAdaptorV1Calls `protobuf:"bytes,20,opt,name=morpho_aave_v3_a_token_collateral_v1_calls,json=morphoAaveV3ATokenCollateralV1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoAaveV3ATokenP2PV1Calls struct {
	// Represents function calls to the MorphoAaveV3ATokenP2P V1
	MorphoAaveV3ATokenP2PV1Calls *MorphoAaveV3ATokenP2PAdaptorV1Calls `protobuf:"bytes,21,opt,name=morpho_aave_v3_a_token_p2p_v1_calls,json=morphoAaveV3ATokenP2pV1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoAaveV3DebtTokenV1Calls struct {
	// Represents function calls to the MorphoAaveV3DebtToken V1
	MorphoAaveV3DebtTokenV1Calls *MorphoAaveV3DebtTokenAdaptorV1Calls `protobuf:"bytes,22,opt,name=morpho_aave_v3_debt_token_v1_calls,json=morphoAaveV3DebtTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_BalancerPoolV1Calls struct {
	// Represents function calls to the BalancerPoolAdaptor V1
	BalancerPoolV1Calls *BalancerPoolAdaptorV1Calls `protobuf:"bytes,23,opt,name=balancer_pool_v1_calls,json=balancerPoolV1Calls,proto3,oneof"`
}

type AdaptorCall_LegacyCellarV1Calls struct {
	// Represents function calls to the LegacyCellarAdaptor V1
	LegacyCellarV1Calls *LegacyCellarAdaptorV1Calls `protobuf:"bytes,24,opt,name=legacy_cellar_v1_calls,json=legacyCellarV1Calls,proto3,oneof"`
}

type AdaptorCall_DebtFTokenV1Calls struct {
	// Represents function calls to the DebtFTokenAdaptor V1
	DebtFTokenV1Calls *DebtFTokenAdaptorV1Calls `protobuf:"bytes,25,opt,name=debt_f_token_v1_calls,json=debtFTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_CollateralFTokenV1Calls struct {
	// Represents function calls to the CollateralFTokenAdaptor V1
	CollateralFTokenV1Calls *CollateralFTokenAdaptorV1Calls `protobuf:"bytes,26,opt,name=collateral_f_token_v1_calls,json=collateralFTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_AaveV3DebtTokenV1FlashLoanCalls struct {
	// Represents function call for the AaveV3DebtTokenAdaptorV1
	AaveV3DebtTokenV1FlashLoanCalls *AaveV3DebtTokenAdaptorV1FlashLoanCalls `protobuf:"bytes,27,opt,name=aave_v3_debt_token_v1_flash_loan_calls,json=aaveV3DebtTokenV1FlashLoanCalls,proto3,oneof"`
}

type AdaptorCall_BalancerPoolV1FlashLoanCalls struct {
	// Represents function call for the BalancerPoolAdaptorV1
	BalancerPoolV1FlashLoanCalls *BalancerPoolAdaptorV1FlashLoanCalls `protobuf:"bytes,28,opt,name=balancer_pool_v1_flash_loan_calls,json=balancerPoolV1FlashLoanCalls,proto3,oneof"`
}

type AdaptorCall_ConvexCurveV1Calls struct {
	// Represents function calls for the ConvexCurveAdaptorV1
	ConvexCurveV1Calls *ConvexCurveAdaptorV1Calls `protobuf:"bytes,29,opt,name=convex_curve_v1_calls,json=convexCurveV1Calls,proto3,oneof"`
}

type AdaptorCall_CurveV1Calls struct {
	// Represents function calls for the CurveAdaptorV1
	CurveV1Calls *CurveAdaptorV1Calls `protobuf:"bytes,30,opt,name=curve_v1_calls,json=curveV1Calls,proto3,oneof"`
}

type AdaptorCall_AuraErc4626V1Calls struct {
	// Represents function calls for the AuraERC4626AdaptorV1
	AuraErc4626V1Calls *AuraERC4626AdaptorV1Calls `protobuf:"bytes,31,opt,name=aura_erc4626_v1_calls,json=auraErc4626V1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoBlueCollateralV1Calls struct {
	// Represents function calls for the MorphoBlueCollateralAdaptorV1
	MorphoBlueCollateralV1Calls *MorphoBlueCollateralAdaptorV1Calls `protobuf:"bytes,32,opt,name=morpho_blue_collateral_v1_calls,json=morphoBlueCollateralV1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoBlueDebtV1Calls struct {
	// Represents function calls for the MorphoBlueDebtAdaptorV1
	MorphoBlueDebtV1Calls *MorphoBlueDebtAdaptorV1Calls `protobuf:"bytes,33,opt,name=morpho_blue_debt_v1_calls,json=morphoBlueDebtV1Calls,proto3,oneof"`
}

type AdaptorCall_MorphoBlueSupplyV1Calls struct {
	// Represents function calls for the MorphoBlueSupplyAdaptorV1
	MorphoBlueSupplyV1Calls *MorphoBlueSupplyAdaptorV1Calls `protobuf:"bytes,34,opt,name=morpho_blue_supply_v1_calls,json=morphoBlueSupplyV1Calls,proto3,oneof"`
}

type AdaptorCall_Erc4626V1Calls struct {
	// Represents function calls for the ERC4626AdaptorV1
	Erc4626V1Calls *ERC4626AdaptorV1Calls `protobuf:"bytes,35,opt,name=erc4626_v1_calls,json=erc4626V1Calls,proto3,oneof"`
}

type AdaptorCall_StakingV1Calls struct {
	// Represents function calls for the StakingAdaptorV1
	StakingV1Calls *StakingAdaptorV1Calls `protobuf:"bytes,36,opt,name=staking_v1_calls,json=stakingV1Calls,proto3,oneof"`
}

type AdaptorCall_PendleV1Calls struct {
	// Represents function calls for the PendleAdaptorV1
	PendleV1Calls *PendleAdaptorV1Calls `protobuf:"bytes,37,opt,name=pendle_v1_calls,json=pendleV1Calls,proto3,oneof"`
}

func (*AdaptorCall_AaveATokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveDebtTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_CompoundCTokenV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveATokenV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveDebtTokenV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveV3ATokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveV3DebtTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_OneInchV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_FeesAndReservesV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_ZeroXV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_SwapWithUniswapV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_VestingSimpleV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_CellarV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_UniswapV3V2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveV2EnableAssetAsCollateralV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_FTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoAaveV2ATokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoAaveV2DebtTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoAaveV3ATokenCollateralV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoAaveV3ATokenP2PV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoAaveV3DebtTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_BalancerPoolV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_LegacyCellarV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_DebtFTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_CollateralFTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveV3DebtTokenV1FlashLoanCalls) isAdaptorCall_CallData() {}

func (*AdaptorCall_BalancerPoolV1FlashLoanCalls) isAdaptorCall_CallData() {}

func (*AdaptorCall_ConvexCurveV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_CurveV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AuraErc4626V1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoBlueCollateralV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoBlueDebtV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_MorphoBlueSupplyV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_Erc4626V1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_StakingV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_PendleV1Calls) isAdaptorCall_CallData() {}

// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_CallOnAdaptor) Reset() {
	*x = CellarV2_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CellarV2_CallOnAdaptor) GetData() []*AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_RemovePosition) Reset() {
	*x = CellarV2_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_RemovePosition) ProtoMessage() {}

func (x *CellarV2_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CellarV2_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Set the holding position used of the cellar.
//
// Represents function `setHoldingIndex(uint8 index)`
type CellarV2_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_SetHoldingPosition) Reset() {
	*x = CellarV2_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CellarV2_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type CellarV2_SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *CellarV2_SetStrategistPayoutAddress) Reset() {
	*x = CellarV2_SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetStrategistPayoutAddress) ProtoMessage() {}

func (x *CellarV2_SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*CellarV2_SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CellarV2_SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint32 index1, uint32 index2)`
type CellarV2_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint32 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint32 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
	// Whether to switch positions in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_SwapPositions) Reset() {
	*x = CellarV2_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SwapPositions) ProtoMessage() {}

func (x *CellarV2_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV2_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CellarV2_SwapPositions) GetIndex_1() uint32 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *CellarV2_SwapPositions) GetIndex_2() uint32 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

func (x *CellarV2_SwapPositions) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type CellarV2_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV2_SetShareLockPeriod) Reset() {
	*x = CellarV2_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV2_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV2_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CellarV2_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_AddPosition) Reset() {
	*x = CellarV2_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_AddPosition) ProtoMessage() {}

func (x *CellarV2_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 6}
}

func (x *CellarV2_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Represents function `initiateShutdown()`
type CellarV2_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_InitiateShutdown) Reset() {
	*x = CellarV2_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 7}
}

// Represents function `liftShutdown()`
type CellarV2_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_LiftShutdown) Reset() {
	*x = CellarV2_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_LiftShutdown) ProtoMessage() {}

func (x *CellarV2_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 8}
}

// Represents function `setPlatformFee(uint64)`
type CellarV2_SetPlatformFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New platform fee
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV2_SetPlatformFee) Reset() {
	*x = CellarV2_SetPlatformFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetPlatformFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetPlatformFee) ProtoMessage() {}

func (x *CellarV2_SetPlatformFee) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetPlatformFee.ProtoReflect.Descriptor instead.
func (*CellarV2_SetPlatformFee) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 9}
}

func (x *CellarV2_SetPlatformFee) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Represents function `setStrategistPlatformCut(uint64)`
type CellarV2_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New strategist platform cut
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV2_SetStrategistPlatformCut) Reset() {
	*x = CellarV2_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 10}
}

func (x *CellarV2_SetStrategistPlatformCut) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Allows owner to add new adaptors for the cellar to use.
//
// Represents function `setupAdaptor(address adaptor)`
type CellarV2_SetupAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the adaptor
	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_SetupAdaptor) Reset() {
	*x = CellarV2_SetupAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetupAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetupAdaptor) ProtoMessage() {}

func (x *CellarV2_SetupAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetupAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_SetupAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 11}
}

func (x *CellarV2_SetupAdaptor) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_SetRebalanceDeviation) Reset() {
	*x = CellarV2_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 12}
}

func (x *CellarV2_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// Represents function `initiateShutdown()`
type CellarV2Governance_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2Governance_InitiateShutdown) Reset() {
	*x = CellarV2Governance_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2Governance_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 0}
}

// Represents function `liftShutdown()`
type CellarV2Governance_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2Governance_LiftShutdown) Reset() {
	*x = CellarV2Governance_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_LiftShutdown) ProtoMessage() {}

func (x *CellarV2Governance_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 1}
}

// Represents function `setPlatformFee(uint64)`
type CellarV2Governance_SetPlatformFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New platform fee
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV2Governance_SetPlatformFee) Reset() {
	*x = CellarV2Governance_SetPlatformFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_SetPlatformFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_SetPlatformFee) ProtoMessage() {}

func (x *CellarV2Governance_SetPlatformFee) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_SetPlatformFee.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_SetPlatformFee) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CellarV2Governance_SetPlatformFee) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Represents function `setStrategistPlatformCut(uint64)`
type CellarV2Governance_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New strategist platform cut
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV2Governance_SetStrategistPlatformCut) Reset() {
	*x = CellarV2Governance_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2Governance_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 3}
}

func (x *CellarV2Governance_SetStrategistPlatformCut) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Allows owner to add new adaptors for the cellar to use.
//
// Represents function `setupAdaptor(address adaptor)`
type CellarV2Governance_SetupAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the adaptor
	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2Governance_SetupAdaptor) Reset() {
	*x = CellarV2Governance_SetupAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_SetupAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_SetupAdaptor) ProtoMessage() {}

func (x *CellarV2Governance_SetupAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_SetupAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_SetupAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 4}
}

func (x *CellarV2Governance_SetupAdaptor) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2Governance_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2Governance_SetRebalanceDeviation) Reset() {
	*x = CellarV2Governance_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2Governance_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 5}
}

func (x *CellarV2Governance_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// The function you wish to execute on the target cellar
type CellarV2_2_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*CellarV2_2_FunctionCall_AddPosition
	//	*CellarV2_2_FunctionCall_CallOnAdaptor
	//	*CellarV2_2_FunctionCall_RemovePosition
	//	*CellarV2_2_FunctionCall_RemoveAdaptorFromCatalogue
	//	*CellarV2_2_FunctionCall_RemovePositionFromCatalogue
	//	*CellarV2_2_FunctionCall_SetHoldingPosition
	//	*CellarV2_2_FunctionCall_SetStrategistPayoutAddress
	//	*CellarV2_2_FunctionCall_SwapPositions
	//	*CellarV2_2_FunctionCall_AddAdaptorToCatalogue
	//	*CellarV2_2_FunctionCall_AddPositionToCatalogue
	//	*CellarV2_2_FunctionCall_SetRebalanceDeviation
	//	*CellarV2_2_FunctionCall_SetShareLockPeriod
	//	*CellarV2_2_FunctionCall_SetStrategistPlatformCut
	//	*CellarV2_2_FunctionCall_InitiateShutdown
	//	*CellarV2_2_FunctionCall_LiftShutdown
	//	*CellarV2_2_FunctionCall_CachePriceRouter
	Function isCellarV2_2_FunctionCall_Function `protobuf_oneof:"function"`
}

func (x *CellarV2_2_FunctionCall) Reset() {
	*x = CellarV2_2_FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_FunctionCall) ProtoMessage() {}

func (x *CellarV2_2_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_FunctionCall.ProtoReflect.Descriptor instead.
func (*CellarV2_2_FunctionCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 0}
}

func (m *CellarV2_2_FunctionCall) GetFunction() isCellarV2_2_FunctionCall_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetAddPosition() *CellarV2_2_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_AddPosition); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetCallOnAdaptor() *CellarV2_2_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_CallOnAdaptor); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetRemovePosition() *CellarV2_2_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_RemovePosition); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetRemoveAdaptorFromCatalogue() *CellarV2_2_RemoveAdaptorFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_RemoveAdaptorFromCatalogue); ok {
		return x.RemoveAdaptorFromCatalogue
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetRemovePositionFromCatalogue() *CellarV2_2_RemovePositionFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_RemovePositionFromCatalogue); ok {
		return x.RemovePositionFromCatalogue
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetHoldingPosition() *CellarV2_2_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetHoldingPosition); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetStrategistPayoutAddress() *CellarV2_2_SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetStrategistPayoutAddress); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSwapPositions() *CellarV2_2_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SwapPositions); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetAddAdaptorToCatalogue() *CellarV2_2_AddAdaptorToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_AddAdaptorToCatalogue); ok {
		return x.AddAdaptorToCatalogue
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetAddPositionToCatalogue() *CellarV2_2_AddPositionToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_AddPositionToCatalogue); ok {
		return x.AddPositionToCatalogue
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetRebalanceDeviation() *CellarV2_2_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetRebalanceDeviation); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetShareLockPeriod() *CellarV2_2_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetShareLockPeriod); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetStrategistPlatformCut() *CellarV2_2_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetStrategistPlatformCut); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetInitiateShutdown() *CellarV2_2_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_InitiateShutdown); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetLiftShutdown() *CellarV2_2_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_LiftShutdown); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetCachePriceRouter() *CellarV2_2_CachePriceRouter {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_CachePriceRouter); ok {
		return x.CachePriceRouter
	}
	return nil
}

type isCellarV2_2_FunctionCall_Function interface {
	isCellarV2_2_FunctionCall_Function()
}

type CellarV2_2_FunctionCall_AddPosition struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_2_AddPosition `protobuf:"bytes,1,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_2_FunctionCall_CallOnAdaptor struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_2_CallOnAdaptor `protobuf:"bytes,2,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_2_FunctionCall_RemovePosition struct {
	// Represents function `removePosition(uint256 index, bool inDebtArray)`
	RemovePosition *CellarV2_2_RemovePosition `protobuf:"bytes,3,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV2_2_FunctionCall_RemoveAdaptorFromCatalogue struct {
	// Represents function `removeAdaptorFromCatalogue(address adaptor)`
	RemoveAdaptorFromCatalogue *CellarV2_2_RemoveAdaptorFromCatalogue `protobuf:"bytes,4,opt,name=remove_adaptor_from_catalogue,json=removeAdaptorFromCatalogue,proto3,oneof"`
}

type CellarV2_2_FunctionCall_RemovePositionFromCatalogue struct {
	// Represents function `removePositionFromCatalogue(uint32 positionId)`
	RemovePositionFromCatalogue *CellarV2_2_RemovePositionFromCatalogue `protobuf:"bytes,5,opt,name=remove_position_from_catalogue,json=removePositionFromCatalogue,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetHoldingPosition struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_2_SetHoldingPosition `protobuf:"bytes,6,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetStrategistPayoutAddress struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *CellarV2_2_SetStrategistPayoutAddress `protobuf:"bytes,7,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SwapPositions struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV2_2_SwapPositions `protobuf:"bytes,8,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type CellarV2_2_FunctionCall_AddAdaptorToCatalogue struct {
	// Represents function `addAdaptorToCatalogue(address adaptor)`
	AddAdaptorToCatalogue *CellarV2_2_AddAdaptorToCatalogue `protobuf:"bytes,9,opt,name=add_adaptor_to_catalogue,json=addAdaptorToCatalogue,proto3,oneof"`
}

type CellarV2_2_FunctionCall_AddPositionToCatalogue struct {
	// Represents function `addPositionToCatalogue(uint32 positionId)`
	AddPositionToCatalogue *CellarV2_2_AddPositionToCatalogue `protobuf:"bytes,10,opt,name=add_position_to_catalogue,json=addPositionToCatalogue,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetRebalanceDeviation struct {
	// Represents function `setRebalanceDeviation(uint256)`
	SetRebalanceDeviation *CellarV2_2_SetRebalanceDeviation `protobuf:"bytes,11,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetShareLockPeriod struct {
	// Represents function `setShareLockPeriod(uint256 newLock)`
	SetShareLockPeriod *CellarV2_2_SetShareLockPeriod `protobuf:"bytes,12,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetStrategistPlatformCut struct {
	// Represents function `setStrategistPlatformCut(uint64 cut)`
	SetStrategistPlatformCut *CellarV2_2_SetStrategistPlatformCut `protobuf:"bytes,13,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2_2_FunctionCall_InitiateShutdown struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2_2_InitiateShutdown `protobuf:"bytes,14,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2_2_FunctionCall_LiftShutdown struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2_2_LiftShutdown `protobuf:"bytes,15,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV2_2_FunctionCall_CachePriceRouter struct {
	// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
	CachePriceRouter *CellarV2_2_CachePriceRouter `protobuf:"bytes,16,opt,name=cache_price_router,json=cachePriceRouter,proto3,oneof"`
}

func (*CellarV2_2_FunctionCall_AddPosition) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_CallOnAdaptor) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_RemovePosition) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_RemoveAdaptorFromCatalogue) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_RemovePositionFromCatalogue) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetHoldingPosition) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetStrategistPayoutAddress) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SwapPositions) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_AddAdaptorToCatalogue) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_AddPositionToCatalogue) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetRebalanceDeviation) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetShareLockPeriod) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetStrategistPlatformCut) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_InitiateShutdown) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_LiftShutdown) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_CachePriceRouter) isCellarV2_2_FunctionCall_Function() {}

// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_2_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2_AddPosition) Reset() {
	*x = CellarV2_2_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_AddPosition) ProtoMessage() {}

func (x *CellarV2_2_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CellarV2_2_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_2_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_2_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_2_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_2_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_2_CallOnAdaptor) Reset() {
	*x = CellarV2_2_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_2_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_2_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 2}
}

func (x *CellarV2_2_CallOnAdaptor) GetData() []*AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_2_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2_RemovePosition) Reset() {
	*x = CellarV2_2_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_RemovePosition) ProtoMessage() {}

func (x *CellarV2_2_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 3}
}

func (x *CellarV2_2_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_2_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows callers to remove adaptors from this cellar's catalogue
//
// Represents function `removeAdaptorFromCatalogue(address adaptor)`
type CellarV2_2_RemoveAdaptorFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_2_RemoveAdaptorFromCatalogue) Reset() {
	*x = CellarV2_2_RemoveAdaptorFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_RemoveAdaptorFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_RemoveAdaptorFromCatalogue) ProtoMessage() {}

func (x *CellarV2_2_RemoveAdaptorFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_RemoveAdaptorFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2_RemoveAdaptorFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 4}
}

func (x *CellarV2_2_RemoveAdaptorFromCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows caller to remove positions from this cellar's catalogue
//
// Represents function `removePositionFromCatalogue(uint32 positionId)`
type CellarV2_2_RemovePositionFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_2_RemovePositionFromCatalogue) Reset() {
	*x = CellarV2_2_RemovePositionFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_RemovePositionFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_RemovePositionFromCatalogue) ProtoMessage() {}

func (x *CellarV2_2_RemovePositionFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_RemovePositionFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2_RemovePositionFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 5}
}

func (x *CellarV2_2_RemovePositionFromCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Set the holding position used of the cellar.
//
// Represents function `setHoldingIndex(uint8 index)`
type CellarV2_2_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_2_SetHoldingPosition) Reset() {
	*x = CellarV2_2_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_2_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 6}
}

func (x *CellarV2_2_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type CellarV2_2_SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *CellarV2_2_SetStrategistPayoutAddress) Reset() {
	*x = CellarV2_2_SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetStrategistPayoutAddress) ProtoMessage() {}

func (x *CellarV2_2_SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 7}
}

func (x *CellarV2_2_SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint32 index1, uint32 index2)`
type CellarV2_2_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint32 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint32 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
	// Whether to switch positions in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2_SwapPositions) Reset() {
	*x = CellarV2_2_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SwapPositions) ProtoMessage() {}

func (x *CellarV2_2_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 8}
}

func (x *CellarV2_2_SwapPositions) GetIndex_1() uint32 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *CellarV2_2_SwapPositions) GetIndex_2() uint32 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

func (x *CellarV2_2_SwapPositions) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows caller to call multiple functions in a single TX.
//
// Represents function `multicall(bytes[] data)`
type CellarV2_2_Multicall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCalls []*CellarV2_2_FunctionCall `protobuf:"bytes,1,rep,name=function_calls,json=functionCalls,proto3" json:"function_calls,omitempty"`
}

func (x *CellarV2_2_Multicall) Reset() {
	*x = CellarV2_2_Multicall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_Multicall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_Multicall) ProtoMessage() {}

func (x *CellarV2_2_Multicall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_Multicall.ProtoReflect.Descriptor instead.
func (*CellarV2_2_Multicall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 9}
}

func (x *CellarV2_2_Multicall) GetFunctionCalls() []*CellarV2_2_FunctionCall {
	if x != nil {
		return x.FunctionCalls
	}
	return nil
}

// Allows the owner to add an adaptor to the Cellar's adaptor catalogue
//
// Represents function `addAdaptorToCatalogue(address adaptor)`
type CellarV2_2_AddAdaptorToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_2_AddAdaptorToCatalogue) Reset() {
	*x = CellarV2_2_AddAdaptorToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_AddAdaptorToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_AddAdaptorToCatalogue) ProtoMessage() {}

func (x *CellarV2_2_AddAdaptorToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_AddAdaptorToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2_AddAdaptorToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 10}
}

func (x *CellarV2_2_AddAdaptorToCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows the owner to add a position to the Cellar's position catalogue
//
// Represents function `addPositionToCatalogue(uint32 positionId)`
type CellarV2_2_AddPositionToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_2_AddPositionToCatalogue) Reset() {
	*x = CellarV2_2_AddPositionToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_AddPositionToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_AddPositionToCatalogue) ProtoMessage() {}

func (x *CellarV2_2_AddPositionToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_AddPositionToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2_AddPositionToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 11}
}

func (x *CellarV2_2_AddPositionToCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type CellarV2_2_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV2_2_SetShareLockPeriod) Reset() {
	*x = CellarV2_2_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV2_2_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 12}
}

func (x *CellarV2_2_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_2_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_2_SetRebalanceDeviation) Reset() {
	*x = CellarV2_2_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_2_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 13}
}

func (x *CellarV2_2_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.
//
// Represents function `initiateShutdown()`
type CellarV2_2_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_2_InitiateShutdown) Reset() {
	*x = CellarV2_2_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2_2_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_2_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 14}
}

// Allows strategist to set the platform cut for the cellar.
//
// Represents function `setStrategistPlatformCut(uint64 cut)`
type CellarV2_2_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new strategist platform cut
	NewCut uint64 `protobuf:"varint,1,opt,name=new_cut,json=newCut,proto3" json:"new_cut,omitempty"`
}

func (x *CellarV2_2_SetStrategistPlatformCut) Reset() {
	*x = CellarV2_2_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2_2_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 15}
}

func (x *CellarV2_2_SetStrategistPlatformCut) GetNewCut() uint64 {
	if x != nil {
		return x.NewCut
	}
	return 0
}

// Allows the owner to restart a shut down Cellar
//
// Represents function `liftShutdown()`
type CellarV2_2_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_2_LiftShutdown) Reset() {
	*x = CellarV2_2_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_LiftShutdown) ProtoMessage() {}

func (x *CellarV2_2_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_2_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 16}
}

// Updates the cellar to use the latest price router in the registry.
//
// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
type CellarV2_2_CachePriceRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to check the total assets of the cellar
	CheckTotalAssets bool `protobuf:"varint,1,opt,name=check_total_assets,json=checkTotalAssets,proto3" json:"check_total_assets,omitempty"`
	// The allowable range of the cellar's total assets to deviate between old and new routers
	AllowableRange uint32 `protobuf:"varint,2,opt,name=allowable_range,json=allowableRange,proto3" json:"allowable_range,omitempty"`
	// The expected price router address
	ExpectedPriceRouter string `protobuf:"bytes,3,opt,name=expected_price_router,json=expectedPriceRouter,proto3" json:"expected_price_router,omitempty"`
}

func (x *CellarV2_2_CachePriceRouter) Reset() {
	*x = CellarV2_2_CachePriceRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_CachePriceRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_CachePriceRouter) ProtoMessage() {}

func (x *CellarV2_2_CachePriceRouter) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_CachePriceRouter.ProtoReflect.Descriptor instead.
func (*CellarV2_2_CachePriceRouter) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2, 17}
}

func (x *CellarV2_2_CachePriceRouter) GetCheckTotalAssets() bool {
	if x != nil {
		return x.CheckTotalAssets
	}
	return false
}

func (x *CellarV2_2_CachePriceRouter) GetAllowableRange() uint32 {
	if x != nil {
		return x.AllowableRange
	}
	return 0
}

func (x *CellarV2_2_CachePriceRouter) GetExpectedPriceRouter() string {
	if x != nil {
		return x.ExpectedPriceRouter
	}
	return ""
}

// The function you wish to execute on the target cellar
type CellarV2_2Governance_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*CellarV2_2Governance_FunctionCall_AddAdaptorToCatalogue
	//	*CellarV2_2Governance_FunctionCall_AddPositionToCatalogue
	//	*CellarV2_2Governance_FunctionCall_SetRebalanceDeviation
	//	*CellarV2_2Governance_FunctionCall_SetShareLockPeriod
	//	*CellarV2_2Governance_FunctionCall_SetStrategistPlatformCut
	//	*CellarV2_2Governance_FunctionCall_InitiateShutdown
	//	*CellarV2_2Governance_FunctionCall_LiftShutdown
	//	*CellarV2_2Governance_FunctionCall_ForcePositionOut
	//	*CellarV2_2Governance_FunctionCall_ToggleIgnorePause
	//	*CellarV2_2Governance_FunctionCall_CachePriceRouter
	//	*CellarV2_2Governance_FunctionCall_AddPosition
	//	*CellarV2_2Governance_FunctionCall_CallOnAdaptor
	//	*CellarV2_2Governance_FunctionCall_RemovePosition
	//	*CellarV2_2Governance_FunctionCall_RemoveAdaptorFromCatalogue
	//	*CellarV2_2Governance_FunctionCall_RemovePositionFromCatalogue
	//	*CellarV2_2Governance_FunctionCall_SetHoldingPosition
	//	*CellarV2_2Governance_FunctionCall_SwapPositions
	Function isCellarV2_2Governance_FunctionCall_Function `protobuf_oneof:"function"`
}

func (x *CellarV2_2Governance_FunctionCall) Reset() {
	*x = CellarV2_2Governance_FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_FunctionCall) ProtoMessage() {}

func (x *CellarV2_2Governance_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_FunctionCall.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_FunctionCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 0}
}

func (m *CellarV2_2Governance_FunctionCall) GetFunction() isCellarV2_2Governance_FunctionCall_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetAddAdaptorToCatalogue() *CellarV2_2Governance_AddAdaptorToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_AddAdaptorToCatalogue); ok {
		return x.AddAdaptorToCatalogue
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetAddPositionToCatalogue() *CellarV2_2Governance_AddPositionToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_AddPositionToCatalogue); ok {
		return x.AddPositionToCatalogue
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetSetRebalanceDeviation() *CellarV2_2Governance_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_SetRebalanceDeviation); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetSetShareLockPeriod() *CellarV2_2Governance_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_SetShareLockPeriod); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetSetStrategistPlatformCut() *CellarV2_2Governance_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_SetStrategistPlatformCut); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetInitiateShutdown() *CellarV2_2Governance_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_InitiateShutdown); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetLiftShutdown() *CellarV2_2Governance_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_LiftShutdown); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetForcePositionOut() *CellarV2_2Governance_ForcePositionOut {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_ForcePositionOut); ok {
		return x.ForcePositionOut
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetToggleIgnorePause() *CellarV2_2Governance_ToggleIgnorePause {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_ToggleIgnorePause); ok {
		return x.ToggleIgnorePause
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetCachePriceRouter() *CellarV2_2Governance_CachePriceRouter {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_CachePriceRouter); ok {
		return x.CachePriceRouter
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetAddPosition() *CellarV2_2Governance_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_AddPosition); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetCallOnAdaptor() *CellarV2_2Governance_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_CallOnAdaptor); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetRemovePosition() *CellarV2_2Governance_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_RemovePosition); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetRemoveAdaptorFromCatalogue() *CellarV2_2Governance_RemoveAdaptorFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_RemoveAdaptorFromCatalogue); ok {
		return x.RemoveAdaptorFromCatalogue
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetRemovePositionFromCatalogue() *CellarV2_2Governance_RemovePositionFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_RemovePositionFromCatalogue); ok {
		return x.RemovePositionFromCatalogue
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetSetHoldingPosition() *CellarV2_2Governance_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_SetHoldingPosition); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2_2Governance_FunctionCall) GetSwapPositions() *CellarV2_2Governance_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV2_2Governance_FunctionCall_SwapPositions); ok {
		return x.SwapPositions
	}
	return nil
}

type isCellarV2_2Governance_FunctionCall_Function interface {
	isCellarV2_2Governance_FunctionCall_Function()
}

type CellarV2_2Governance_FunctionCall_AddAdaptorToCatalogue struct {
	// Represents function `addAdaptorToCatalogue(address adaptor)`
	AddAdaptorToCatalogue *CellarV2_2Governance_AddAdaptorToCatalogue `protobuf:"bytes,1,opt,name=add_adaptor_to_catalogue,json=addAdaptorToCatalogue,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_AddPositionToCatalogue struct {
	// Represents function `addPositionToCatalogue(uint32 positionId)`
	AddPositionToCatalogue *CellarV2_2Governance_AddPositionToCatalogue `protobuf:"bytes,2,opt,name=add_position_to_catalogue,json=addPositionToCatalogue,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_SetRebalanceDeviation struct {
	// Represents function `setRebalanceDeviation(uint256)`
	SetRebalanceDeviation *CellarV2_2Governance_SetRebalanceDeviation `protobuf:"bytes,3,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_SetShareLockPeriod struct {
	// Represents function `setShareLockPeriod(uint256 newLock)`
	SetShareLockPeriod *CellarV2_2Governance_SetShareLockPeriod `protobuf:"bytes,4,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_SetStrategistPlatformCut struct {
	// Represents function `setStrategistPlatformCut(uint64 cut)`
	SetStrategistPlatformCut *CellarV2_2Governance_SetStrategistPlatformCut `protobuf:"bytes,5,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_InitiateShutdown struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2_2Governance_InitiateShutdown `protobuf:"bytes,6,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_LiftShutdown struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2_2Governance_LiftShutdown `protobuf:"bytes,7,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_ForcePositionOut struct {
	// Represents function `forcePositionOut(uint32 index, uint32 positionId, bool inDebtArray)`
	ForcePositionOut *CellarV2_2Governance_ForcePositionOut `protobuf:"bytes,8,opt,name=force_position_out,json=forcePositionOut,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_ToggleIgnorePause struct {
	// Represents function `toggleIgnorePause(bool ignore)`
	ToggleIgnorePause *CellarV2_2Governance_ToggleIgnorePause `protobuf:"bytes,9,opt,name=toggle_ignore_pause,json=toggleIgnorePause,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_CachePriceRouter struct {
	// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
	CachePriceRouter *CellarV2_2Governance_CachePriceRouter `protobuf:"bytes,10,opt,name=cache_price_router,json=cachePriceRouter,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_AddPosition struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_2Governance_AddPosition `protobuf:"bytes,11,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_CallOnAdaptor struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_2Governance_CallOnAdaptor `protobuf:"bytes,12,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_RemovePosition struct {
	// Represents function `removePosition(uint256 index, bool inDebtArray)`
	RemovePosition *CellarV2_2Governance_RemovePosition `protobuf:"bytes,13,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_RemoveAdaptorFromCatalogue struct {
	// Represents function `removeAdaptorFromCatalogue(address adaptor)`
	RemoveAdaptorFromCatalogue *CellarV2_2Governance_RemoveAdaptorFromCatalogue `protobuf:"bytes,14,opt,name=remove_adaptor_from_catalogue,json=removeAdaptorFromCatalogue,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_RemovePositionFromCatalogue struct {
	// Represents function `removePositionFromCatalogue(uint32 positionId)`
	RemovePositionFromCatalogue *CellarV2_2Governance_RemovePositionFromCatalogue `protobuf:"bytes,15,opt,name=remove_position_from_catalogue,json=removePositionFromCatalogue,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_SetHoldingPosition struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_2Governance_SetHoldingPosition `protobuf:"bytes,16,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_2Governance_FunctionCall_SwapPositions struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV2_2Governance_SwapPositions `protobuf:"bytes,18,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

func (*CellarV2_2Governance_FunctionCall_AddAdaptorToCatalogue) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_AddPositionToCatalogue) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_SetRebalanceDeviation) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_SetShareLockPeriod) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_SetStrategistPlatformCut) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_InitiateShutdown) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_LiftShutdown) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_ForcePositionOut) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_ToggleIgnorePause) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_CachePriceRouter) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_AddPosition) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_CallOnAdaptor) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_RemovePosition) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_RemoveAdaptorFromCatalogue) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_RemovePositionFromCatalogue) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_SetHoldingPosition) isCellarV2_2Governance_FunctionCall_Function() {
}

func (*CellarV2_2Governance_FunctionCall_SwapPositions) isCellarV2_2Governance_FunctionCall_Function() {
}

// Allows caller to call multiple functions in a single TX.
//
// Represents function `multicall(bytes[] data)`
type CellarV2_2Governance_Multicall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCalls []*CellarV2_2Governance_FunctionCall `protobuf:"bytes,1,rep,name=function_calls,json=functionCalls,proto3" json:"function_calls,omitempty"`
}

func (x *CellarV2_2Governance_Multicall) Reset() {
	*x = CellarV2_2Governance_Multicall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_Multicall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_Multicall) ProtoMessage() {}

func (x *CellarV2_2Governance_Multicall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_Multicall.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_Multicall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CellarV2_2Governance_Multicall) GetFunctionCalls() []*CellarV2_2Governance_FunctionCall {
	if x != nil {
		return x.FunctionCalls
	}
	return nil
}

// Allows the owner to add an adaptor to the Cellar's adaptor catalogue
//
// Represents function `addAdaptorToCatalogue(address adaptor)`
type CellarV2_2Governance_AddAdaptorToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_2Governance_AddAdaptorToCatalogue) Reset() {
	*x = CellarV2_2Governance_AddAdaptorToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_AddAdaptorToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_AddAdaptorToCatalogue) ProtoMessage() {}

func (x *CellarV2_2Governance_AddAdaptorToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_AddAdaptorToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_AddAdaptorToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CellarV2_2Governance_AddAdaptorToCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows the owner to add a position to the Cellar's position catalogue
//
// Represents function `addPositionToCatalogue(uint32 positionId)`
type CellarV2_2Governance_AddPositionToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_2Governance_AddPositionToCatalogue) Reset() {
	*x = CellarV2_2Governance_AddPositionToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_AddPositionToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_AddPositionToCatalogue) ProtoMessage() {}

func (x *CellarV2_2Governance_AddPositionToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_AddPositionToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_AddPositionToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 3}
}

func (x *CellarV2_2Governance_AddPositionToCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type CellarV2_2Governance_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV2_2Governance_SetShareLockPeriod) Reset() {
	*x = CellarV2_2Governance_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV2_2Governance_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 4}
}

func (x *CellarV2_2Governance_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_2Governance_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_2Governance_SetRebalanceDeviation) Reset() {
	*x = CellarV2_2Governance_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_2Governance_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 5}
}

func (x *CellarV2_2Governance_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.
//
// Represents function `initiateShutdown()`
type CellarV2_2Governance_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_2Governance_InitiateShutdown) Reset() {
	*x = CellarV2_2Governance_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2_2Governance_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 6}
}

// Allows strategist to set the platform cut for the cellar.
//
// Represents function `setStrategistPlatformCut(uint64 cut)`
type CellarV2_2Governance_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new strategist platform cut
	NewCut uint64 `protobuf:"varint,1,opt,name=new_cut,json=newCut,proto3" json:"new_cut,omitempty"`
}

func (x *CellarV2_2Governance_SetStrategistPlatformCut) Reset() {
	*x = CellarV2_2Governance_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2_2Governance_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 7}
}

func (x *CellarV2_2Governance_SetStrategistPlatformCut) GetNewCut() uint64 {
	if x != nil {
		return x.NewCut
	}
	return 0
}

// Allows the owner to restart a shut down Cellar
//
// Represents function `liftShutdown()`
type CellarV2_2Governance_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_2Governance_LiftShutdown) Reset() {
	*x = CellarV2_2Governance_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_LiftShutdown) ProtoMessage() {}

func (x *CellarV2_2Governance_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 8}
}

// Allows caller to force a position out of the cellar
//
// Represents function `forcePositionOut(uint32 index, uint32 positionId, bool inDebtArray)`
type CellarV2_2Governance_ForcePositionOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	PositionId  uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	InDebtArray bool   `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2Governance_ForcePositionOut) Reset() {
	*x = CellarV2_2Governance_ForcePositionOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_ForcePositionOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_ForcePositionOut) ProtoMessage() {}

func (x *CellarV2_2Governance_ForcePositionOut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_ForcePositionOut.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_ForcePositionOut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 9}
}

func (x *CellarV2_2Governance_ForcePositionOut) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_2Governance_ForcePositionOut) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_2Governance_ForcePositionOut) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows caller to toggle the ignorePause flag on the cellar
//
// Represents function `toggleIgnorePause(bool ignore)`
type CellarV2_2Governance_ToggleIgnorePause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ignore bool `protobuf:"varint,1,opt,name=ignore,proto3" json:"ignore,omitempty"`
}

func (x *CellarV2_2Governance_ToggleIgnorePause) Reset() {
	*x = CellarV2_2Governance_ToggleIgnorePause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_ToggleIgnorePause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_ToggleIgnorePause) ProtoMessage() {}

func (x *CellarV2_2Governance_ToggleIgnorePause) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_ToggleIgnorePause.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_ToggleIgnorePause) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 10}
}

func (x *CellarV2_2Governance_ToggleIgnorePause) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

// Updates the cellar to use the latest price router in the registry.
//
// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
type CellarV2_2Governance_CachePriceRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to check the total assets of the cellar
	CheckTotalAssets bool `protobuf:"varint,1,opt,name=check_total_assets,json=checkTotalAssets,proto3" json:"check_total_assets,omitempty"`
	// The allowable range of the cellar's total assets to deviate between old and new routers
	AllowableRange uint32 `protobuf:"varint,2,opt,name=allowable_range,json=allowableRange,proto3" json:"allowable_range,omitempty"`
	// The expected price router address
	ExpectedPriceRouter string `protobuf:"bytes,3,opt,name=expected_price_router,json=expectedPriceRouter,proto3" json:"expected_price_router,omitempty"`
}

func (x *CellarV2_2Governance_CachePriceRouter) Reset() {
	*x = CellarV2_2Governance_CachePriceRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_CachePriceRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_CachePriceRouter) ProtoMessage() {}

func (x *CellarV2_2Governance_CachePriceRouter) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_CachePriceRouter.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_CachePriceRouter) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 11}
}

func (x *CellarV2_2Governance_CachePriceRouter) GetCheckTotalAssets() bool {
	if x != nil {
		return x.CheckTotalAssets
	}
	return false
}

func (x *CellarV2_2Governance_CachePriceRouter) GetAllowableRange() uint32 {
	if x != nil {
		return x.AllowableRange
	}
	return 0
}

func (x *CellarV2_2Governance_CachePriceRouter) GetExpectedPriceRouter() string {
	if x != nil {
		return x.ExpectedPriceRouter
	}
	return ""
}

// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_2Governance_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2Governance_AddPosition) Reset() {
	*x = CellarV2_2Governance_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_AddPosition) ProtoMessage() {}

func (x *CellarV2_2Governance_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 12}
}

func (x *CellarV2_2Governance_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_2Governance_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_2Governance_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_2Governance_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_2Governance_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_2Governance_CallOnAdaptor) Reset() {
	*x = CellarV2_2Governance_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_2Governance_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 13}
}

func (x *CellarV2_2Governance_CallOnAdaptor) GetData() []*AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_2Governance_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2Governance_RemovePosition) Reset() {
	*x = CellarV2_2Governance_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_RemovePosition) ProtoMessage() {}

func (x *CellarV2_2Governance_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 14}
}

func (x *CellarV2_2Governance_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_2Governance_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows callers to remove adaptors from this cellar's catalogue
//
// Represents function `removeAdaptorFromCatalogue(address adaptor)`
type CellarV2_2Governance_RemoveAdaptorFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_2Governance_RemoveAdaptorFromCatalogue) Reset() {
	*x = CellarV2_2Governance_RemoveAdaptorFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_RemoveAdaptorFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_RemoveAdaptorFromCatalogue) ProtoMessage() {}

func (x *CellarV2_2Governance_RemoveAdaptorFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_RemoveAdaptorFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_RemoveAdaptorFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 15}
}

func (x *CellarV2_2Governance_RemoveAdaptorFromCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows caller to remove positions from this cellar's catalogue
//
// Represents function `removePositionFromCatalogue(uint32 positionId)`
type CellarV2_2Governance_RemovePositionFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_2Governance_RemovePositionFromCatalogue) Reset() {
	*x = CellarV2_2Governance_RemovePositionFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_RemovePositionFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_RemovePositionFromCatalogue) ProtoMessage() {}

func (x *CellarV2_2Governance_RemovePositionFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_RemovePositionFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_RemovePositionFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 16}
}

func (x *CellarV2_2Governance_RemovePositionFromCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Set the holding position used of the cellar.
//
// Represents function `setHoldingIndex(uint8 index)`
type CellarV2_2Governance_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_2Governance_SetHoldingPosition) Reset() {
	*x = CellarV2_2Governance_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_2Governance_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 17}
}

func (x *CellarV2_2Governance_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint32 index1, uint32 index2)`
type CellarV2_2Governance_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint32 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint32 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
	// Whether to switch positions in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2Governance_SwapPositions) Reset() {
	*x = CellarV2_2Governance_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2Governance_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2Governance_SwapPositions) ProtoMessage() {}

func (x *CellarV2_2Governance_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2Governance_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV2_2Governance_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{3, 18}
}

func (x *CellarV2_2Governance_SwapPositions) GetIndex_1() uint32 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *CellarV2_2Governance_SwapPositions) GetIndex_2() uint32 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

func (x *CellarV2_2Governance_SwapPositions) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// The function you wish to execute on the target cellar
type CellarV2_5_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*CellarV2_5_FunctionCall_AddPosition
	//	*CellarV2_5_FunctionCall_CallOnAdaptor
	//	*CellarV2_5_FunctionCall_RemovePosition
	//	*CellarV2_5_FunctionCall_SetHoldingPosition
	//	*CellarV2_5_FunctionCall_SetStrategistPayoutAddress
	//	*CellarV2_5_FunctionCall_SwapPositions
	//	*CellarV2_5_FunctionCall_SetShareLockPeriod
	//	*CellarV2_5_FunctionCall_InitiateShutdown
	//	*CellarV2_5_FunctionCall_LiftShutdown
	//	*CellarV2_5_FunctionCall_RemoveAdaptorFromCatalogue
	//	*CellarV2_5_FunctionCall_RemovePositionFromCatalogue
	//	*CellarV2_5_FunctionCall_DecreaseShareSupplyCap
	//	*CellarV2_5_FunctionCall_SetAlternativeAssetData
	//	*CellarV2_5_FunctionCall_DropAlternativeAssetData
	//	*CellarV2_5_FunctionCall_AddAdaptorToCatalogue
	//	*CellarV2_5_FunctionCall_AddPositionToCatalogue
	//	*CellarV2_5_FunctionCall_SetRebalanceDeviation
	//	*CellarV2_5_FunctionCall_SetStrategistPlatformCut
	//	*CellarV2_5_FunctionCall_SetSharePriceOracle
	//	*CellarV2_5_FunctionCall_IncreaseShareSupplyCap
	//	*CellarV2_5_FunctionCall_CachePriceRouter
	Function isCellarV2_5_FunctionCall_Function `protobuf_oneof:"function"`
}

func (x *CellarV2_5_FunctionCall) Reset() {
	*x = CellarV2_5_FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_FunctionCall) ProtoMessage() {}

func (x *CellarV2_5_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_FunctionCall.ProtoReflect.Descriptor instead.
func (*CellarV2_5_FunctionCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 0}
}

func (m *CellarV2_5_FunctionCall) GetFunction() isCellarV2_5_FunctionCall_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetAddPosition() *CellarV2_5_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_AddPosition); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetCallOnAdaptor() *CellarV2_5_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_CallOnAdaptor); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetRemovePosition() *CellarV2_5_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_RemovePosition); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSetHoldingPosition() *CellarV2_5_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SetHoldingPosition); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSetStrategistPayoutAddress() *CellarV2_5_SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SetStrategistPayoutAddress); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSwapPositions() *CellarV2_5_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SwapPositions); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSetShareLockPeriod() *CellarV2_5_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SetShareLockPeriod); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetInitiateShutdown() *CellarV2_5_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_InitiateShutdown); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetLiftShutdown() *CellarV2_5_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_LiftShutdown); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetRemoveAdaptorFromCatalogue() *CellarV2_5_RemoveAdaptorFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_RemoveAdaptorFromCatalogue); ok {
		return x.RemoveAdaptorFromCatalogue
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetRemovePositionFromCatalogue() *CellarV2_5_RemovePositionFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_RemovePositionFromCatalogue); ok {
		return x.RemovePositionFromCatalogue
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetDecreaseShareSupplyCap() *CellarV2_5_DecreaseShareSupplyCap {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_DecreaseShareSupplyCap); ok {
		return x.DecreaseShareSupplyCap
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSetAlternativeAssetData() *CellarV2_5_SetAlternativeAssetData {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SetAlternativeAssetData); ok {
		return x.SetAlternativeAssetData
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetDropAlternativeAssetData() *CellarV2_5_DropAlternativeAssetData {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_DropAlternativeAssetData); ok {
		return x.DropAlternativeAssetData
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetAddAdaptorToCatalogue() *CellarV2_5_AddAdaptorToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_AddAdaptorToCatalogue); ok {
		return x.AddAdaptorToCatalogue
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetAddPositionToCatalogue() *CellarV2_5_AddPositionToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_AddPositionToCatalogue); ok {
		return x.AddPositionToCatalogue
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSetRebalanceDeviation() *CellarV2_5_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SetRebalanceDeviation); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSetStrategistPlatformCut() *CellarV2_5_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SetStrategistPlatformCut); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetSetSharePriceOracle() *CellarV2_5_SetSharePriceOracle {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_SetSharePriceOracle); ok {
		return x.SetSharePriceOracle
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetIncreaseShareSupplyCap() *CellarV2_5_IncreaseShareSupplyCap {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_IncreaseShareSupplyCap); ok {
		return x.IncreaseShareSupplyCap
	}
	return nil
}

func (x *CellarV2_5_FunctionCall) GetCachePriceRouter() *CellarV2_5_CachePriceRouter {
	if x, ok := x.GetFunction().(*CellarV2_5_FunctionCall_CachePriceRouter); ok {
		return x.CachePriceRouter
	}
	return nil
}

type isCellarV2_5_FunctionCall_Function interface {
	isCellarV2_5_FunctionCall_Function()
}

type CellarV2_5_FunctionCall_AddPosition struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_5_AddPosition `protobuf:"bytes,1,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_5_FunctionCall_CallOnAdaptor struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_5_CallOnAdaptor `protobuf:"bytes,2,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_5_FunctionCall_RemovePosition struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *CellarV2_5_RemovePosition `protobuf:"bytes,3,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SetHoldingPosition struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_5_SetHoldingPosition `protobuf:"bytes,4,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SetStrategistPayoutAddress struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *CellarV2_5_SetStrategistPayoutAddress `protobuf:"bytes,5,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SwapPositions struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV2_5_SwapPositions `protobuf:"bytes,6,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SetShareLockPeriod struct {
	// Represents function `setShareLockPeriod(uint256 newLock)`
	SetShareLockPeriod *CellarV2_5_SetShareLockPeriod `protobuf:"bytes,8,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

type CellarV2_5_FunctionCall_InitiateShutdown struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2_5_InitiateShutdown `protobuf:"bytes,9,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2_5_FunctionCall_LiftShutdown struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2_5_LiftShutdown `protobuf:"bytes,11,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV2_5_FunctionCall_RemoveAdaptorFromCatalogue struct {
	// Represents function `removeAdaptorFromCatalogue(address adaptor)`
	RemoveAdaptorFromCatalogue *CellarV2_5_RemoveAdaptorFromCatalogue `protobuf:"bytes,12,opt,name=remove_adaptor_from_catalogue,json=removeAdaptorFromCatalogue,proto3,oneof"`
}

type CellarV2_5_FunctionCall_RemovePositionFromCatalogue struct {
	// Represents function `removePositionFromCatalogue(uint32 positionId)`
	RemovePositionFromCatalogue *CellarV2_5_RemovePositionFromCatalogue `protobuf:"bytes,13,opt,name=remove_position_from_catalogue,json=removePositionFromCatalogue,proto3,oneof"`
}

type CellarV2_5_FunctionCall_DecreaseShareSupplyCap struct {
	// Represents function `decreaseShareSupplyCap(uint192)
	DecreaseShareSupplyCap *CellarV2_5_DecreaseShareSupplyCap `protobuf:"bytes,14,opt,name=decrease_share_supply_cap,json=decreaseShareSupplyCap,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SetAlternativeAssetData struct {
	// Represents function `setAlternativeAssetData(ERC20 _alternativeAsset, uint32 _alternativeHoldingPosition, uint32 _alternativeAssetFee)`
	SetAlternativeAssetData *CellarV2_5_SetAlternativeAssetData `protobuf:"bytes,15,opt,name=set_alternative_asset_data,json=setAlternativeAssetData,proto3,oneof"`
}

type CellarV2_5_FunctionCall_DropAlternativeAssetData struct {
	// Represents function `setDropAlternativeAssetData(ERC20 _alternativeAsset)`
	DropAlternativeAssetData *CellarV2_5_DropAlternativeAssetData `protobuf:"bytes,16,opt,name=drop_alternative_asset_data,json=dropAlternativeAssetData,proto3,oneof"`
}

type CellarV2_5_FunctionCall_AddAdaptorToCatalogue struct {
	// Represents function `addAdaptorToCatalogue(address adaptor)`
	AddAdaptorToCatalogue *CellarV2_5_AddAdaptorToCatalogue `protobuf:"bytes,17,opt,name=add_adaptor_to_catalogue,json=addAdaptorToCatalogue,proto3,oneof"`
}

type CellarV2_5_FunctionCall_AddPositionToCatalogue struct {
	// Represents function `addPositionToCatalogue(uint32 positionId)`
	AddPositionToCatalogue *CellarV2_5_AddPositionToCatalogue `protobuf:"bytes,18,opt,name=add_position_to_catalogue,json=addPositionToCatalogue,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SetRebalanceDeviation struct {
	// Represents function `setRebalanceDeviation(uint256)`
	SetRebalanceDeviation *CellarV2_5_SetRebalanceDeviation `protobuf:"bytes,19,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SetStrategistPlatformCut struct {
	// Represents function `setStrategistPlatformCut(uint64 cut)`
	SetStrategistPlatformCut *CellarV2_5_SetStrategistPlatformCut `protobuf:"bytes,20,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2_5_FunctionCall_SetSharePriceOracle struct {
	// Represents function `setSharePriceOracle(uint256 _registryId, ERC4626SharePriceOracle _sharePriceOracle)`
	SetSharePriceOracle *CellarV2_5_SetSharePriceOracle `protobuf:"bytes,21,opt,name=set_share_price_oracle,json=setSharePriceOracle,proto3,oneof"`
}

type CellarV2_5_FunctionCall_IncreaseShareSupplyCap struct {
	// Represents function `increaseShareSupplyCap(uint192 _newShareSupplyCap)`
	IncreaseShareSupplyCap *CellarV2_5_IncreaseShareSupplyCap `protobuf:"bytes,22,opt,name=increase_share_supply_cap,json=increaseShareSupplyCap,proto3,oneof"`
}

type CellarV2_5_FunctionCall_CachePriceRouter struct {
	// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
	CachePriceRouter *CellarV2_5_CachePriceRouter `protobuf:"bytes,23,opt,name=cache_price_router,json=cachePriceRouter,proto3,oneof"`
}

func (*CellarV2_5_FunctionCall_AddPosition) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_CallOnAdaptor) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_RemovePosition) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SetHoldingPosition) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SetStrategistPayoutAddress) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SwapPositions) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SetShareLockPeriod) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_InitiateShutdown) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_LiftShutdown) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_RemoveAdaptorFromCatalogue) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_RemovePositionFromCatalogue) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_DecreaseShareSupplyCap) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SetAlternativeAssetData) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_DropAlternativeAssetData) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_AddAdaptorToCatalogue) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_AddPositionToCatalogue) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SetRebalanceDeviation) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SetStrategistPlatformCut) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_SetSharePriceOracle) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_IncreaseShareSupplyCap) isCellarV2_5_FunctionCall_Function() {}

func (*CellarV2_5_FunctionCall_CachePriceRouter) isCellarV2_5_FunctionCall_Function() {}

// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_5_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_5_AddPosition) Reset() {
	*x = CellarV2_5_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_AddPosition) ProtoMessage() {}

func (x *CellarV2_5_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_5_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CellarV2_5_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_5_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_5_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_5_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_5_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_5_CallOnAdaptor) Reset() {
	*x = CellarV2_5_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_5_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_5_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 2}
}

func (x *CellarV2_5_CallOnAdaptor) GetData() []*AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_5_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_5_RemovePosition) Reset() {
	*x = CellarV2_5_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_RemovePosition) ProtoMessage() {}

func (x *CellarV2_5_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_5_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 3}
}

func (x *CellarV2_5_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_5_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Set the holding position used of the cellar.
//
// Represents function `setHoldingIndex(uint8 index)`
type CellarV2_5_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_5_SetHoldingPosition) Reset() {
	*x = CellarV2_5_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_5_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 4}
}

func (x *CellarV2_5_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type CellarV2_5_SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *CellarV2_5_SetStrategistPayoutAddress) Reset() {
	*x = CellarV2_5_SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SetStrategistPayoutAddress) ProtoMessage() {}

func (x *CellarV2_5_SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 5}
}

func (x *CellarV2_5_SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint32 index1, uint32 index2)`
type CellarV2_5_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint32 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint32 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
	// Whether to switch positions in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_5_SwapPositions) Reset() {
	*x = CellarV2_5_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SwapPositions) ProtoMessage() {}

func (x *CellarV2_5_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 6}
}

func (x *CellarV2_5_SwapPositions) GetIndex_1() uint32 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *CellarV2_5_SwapPositions) GetIndex_2() uint32 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

func (x *CellarV2_5_SwapPositions) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type CellarV2_5_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV2_5_SetShareLockPeriod) Reset() {
	*x = CellarV2_5_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV2_5_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 7}
}

func (x *CellarV2_5_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

// Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.
//
// Represents function `initiateShutdown()`
type CellarV2_5_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_5_InitiateShutdown) Reset() {
	*x = CellarV2_5_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2_5_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_5_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 8}
}

// Allows the owner to restart a shut down Cellar
//
// Represents function `liftShutdown()`
type CellarV2_5_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_5_LiftShutdown) Reset() {
	*x = CellarV2_5_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_LiftShutdown) ProtoMessage() {}

func (x *CellarV2_5_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_5_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 9}
}

// Allows caller to call multiple functions in a single TX.
//
// Represents function `multicall(bytes[] data)`
type CellarV2_5_Multicall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCalls []*CellarV2_5_FunctionCall `protobuf:"bytes,1,rep,name=function_calls,json=functionCalls,proto3" json:"function_calls,omitempty"`
}

func (x *CellarV2_5_Multicall) Reset() {
	*x = CellarV2_5_Multicall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_Multicall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_Multicall) ProtoMessage() {}

func (x *CellarV2_5_Multicall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_Multicall.ProtoReflect.Descriptor instead.
func (*CellarV2_5_Multicall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 10}
}

func (x *CellarV2_5_Multicall) GetFunctionCalls() []*CellarV2_5_FunctionCall {
	if x != nil {
		return x.FunctionCalls
	}
	return nil
}

// Allows callers to remove adaptors from this cellar's catalogue
//
// Represents function `removeAdaptorFromCatalogue(address adaptor)`
type CellarV2_5_RemoveAdaptorFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_5_RemoveAdaptorFromCatalogue) Reset() {
	*x = CellarV2_5_RemoveAdaptorFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_RemoveAdaptorFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_RemoveAdaptorFromCatalogue) ProtoMessage() {}

func (x *CellarV2_5_RemoveAdaptorFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_RemoveAdaptorFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5_RemoveAdaptorFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 11}
}

func (x *CellarV2_5_RemoveAdaptorFromCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows caller to remove positions from this cellar's catalogue
//
// Represents function `removePositionFromCatalogue(uint32 positionId)`
type CellarV2_5_RemovePositionFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_5_RemovePositionFromCatalogue) Reset() {
	*x = CellarV2_5_RemovePositionFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_RemovePositionFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_RemovePositionFromCatalogue) ProtoMessage() {}

func (x *CellarV2_5_RemovePositionFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_RemovePositionFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5_RemovePositionFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 12}
}

func (x *CellarV2_5_RemovePositionFromCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Allows strategist to decrease the share supply cap
//
// Represents function `decreaseShareSupplyCap(uint192)`
type CellarV2_5_DecreaseShareSupplyCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCap string `protobuf:"bytes,1,opt,name=new_cap,json=newCap,proto3" json:"new_cap,omitempty"`
}

func (x *CellarV2_5_DecreaseShareSupplyCap) Reset() {
	*x = CellarV2_5_DecreaseShareSupplyCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_DecreaseShareSupplyCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_DecreaseShareSupplyCap) ProtoMessage() {}

func (x *CellarV2_5_DecreaseShareSupplyCap) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_DecreaseShareSupplyCap.ProtoReflect.Descriptor instead.
func (*CellarV2_5_DecreaseShareSupplyCap) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 13}
}

func (x *CellarV2_5_DecreaseShareSupplyCap) GetNewCap() string {
	if x != nil {
		return x.NewCap
	}
	return ""
}

// Allows the strategist to add, or update an existing alternative asset deposit.
//
// Represents function `setAlternativeAssetData(ERC20 _alternativeAsset, uint32 _alternativeHoldingPosition, uint32 _alternativeAssetFee)`
type CellarV2_5_SetAlternativeAssetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the alternative asset
	AlternativeAsset string `protobuf:"bytes,1,opt,name=alternative_asset,json=alternativeAsset,proto3" json:"alternative_asset,omitempty"`
	// The holding position to direct alternative asset deposits to
	AlternativeHoldingPosition uint32 `protobuf:"varint,2,opt,name=alternative_holding_position,json=alternativeHoldingPosition,proto3" json:"alternative_holding_position,omitempty"`
	// The fee to charge for depositing this alternative asset
	AlternativeAssetFee uint32 `protobuf:"varint,3,opt,name=alternative_asset_fee,json=alternativeAssetFee,proto3" json:"alternative_asset_fee,omitempty"`
}

func (x *CellarV2_5_SetAlternativeAssetData) Reset() {
	*x = CellarV2_5_SetAlternativeAssetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SetAlternativeAssetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SetAlternativeAssetData) ProtoMessage() {}

func (x *CellarV2_5_SetAlternativeAssetData) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SetAlternativeAssetData.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SetAlternativeAssetData) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 14}
}

func (x *CellarV2_5_SetAlternativeAssetData) GetAlternativeAsset() string {
	if x != nil {
		return x.AlternativeAsset
	}
	return ""
}

func (x *CellarV2_5_SetAlternativeAssetData) GetAlternativeHoldingPosition() uint32 {
	if x != nil {
		return x.AlternativeHoldingPosition
	}
	return 0
}

func (x *CellarV2_5_SetAlternativeAssetData) GetAlternativeAssetFee() uint32 {
	if x != nil {
		return x.AlternativeAssetFee
	}
	return 0
}

// Allows the strategist to stop an alternative asset from being deposited.
//
// Represents function `dropAlternativeAssetData(ERC20 _alternativeAsset)`
type CellarV2_5_DropAlternativeAssetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the alternative asset
	AlternativeAsset string `protobuf:"bytes,1,opt,name=alternative_asset,json=alternativeAsset,proto3" json:"alternative_asset,omitempty"`
}

func (x *CellarV2_5_DropAlternativeAssetData) Reset() {
	*x = CellarV2_5_DropAlternativeAssetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_DropAlternativeAssetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_DropAlternativeAssetData) ProtoMessage() {}

func (x *CellarV2_5_DropAlternativeAssetData) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_DropAlternativeAssetData.ProtoReflect.Descriptor instead.
func (*CellarV2_5_DropAlternativeAssetData) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 15}
}

func (x *CellarV2_5_DropAlternativeAssetData) GetAlternativeAsset() string {
	if x != nil {
		return x.AlternativeAsset
	}
	return ""
}

// Allows the owner to add an adaptor to the Cellar's adaptor catalogue
//
// Represents function `addAdaptorToCatalogue(address adaptor)`
type CellarV2_5_AddAdaptorToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_5_AddAdaptorToCatalogue) Reset() {
	*x = CellarV2_5_AddAdaptorToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_AddAdaptorToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_AddAdaptorToCatalogue) ProtoMessage() {}

func (x *CellarV2_5_AddAdaptorToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_AddAdaptorToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5_AddAdaptorToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 16}
}

func (x *CellarV2_5_AddAdaptorToCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows the owner to add a position to the Cellar's position catalogue
//
// Represents function `addPositionToCatalogue(uint32 positionId)`
type CellarV2_5_AddPositionToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_5_AddPositionToCatalogue) Reset() {
	*x = CellarV2_5_AddPositionToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_AddPositionToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_AddPositionToCatalogue) ProtoMessage() {}

func (x *CellarV2_5_AddPositionToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_AddPositionToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5_AddPositionToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 17}
}

func (x *CellarV2_5_AddPositionToCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_5_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_5_SetRebalanceDeviation) Reset() {
	*x = CellarV2_5_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_5_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 18}
}

func (x *CellarV2_5_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// Allows strategist to set the platform cut for the cellar.
//
// Represents function `setStrategistPlatformCut(uint64 cut)`
type CellarV2_5_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new strategist platform cut
	NewCut uint64 `protobuf:"varint,1,opt,name=new_cut,json=newCut,proto3" json:"new_cut,omitempty"`
}

func (x *CellarV2_5_SetStrategistPlatformCut) Reset() {
	*x = CellarV2_5_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2_5_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 19}
}

func (x *CellarV2_5_SetStrategistPlatformCut) GetNewCut() uint64 {
	if x != nil {
		return x.NewCut
	}
	return 0
}

// Allows the caller to increase the share supply cap
//
// Represents function `increaseShareSupplyCap(uint192 _newShareSupplyCap)`
type CellarV2_5_IncreaseShareSupplyCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCap string `protobuf:"bytes,1,opt,name=new_cap,json=newCap,proto3" json:"new_cap,omitempty"`
}

func (x *CellarV2_5_IncreaseShareSupplyCap) Reset() {
	*x = CellarV2_5_IncreaseShareSupplyCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_IncreaseShareSupplyCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_IncreaseShareSupplyCap) ProtoMessage() {}

func (x *CellarV2_5_IncreaseShareSupplyCap) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_IncreaseShareSupplyCap.ProtoReflect.Descriptor instead.
func (*CellarV2_5_IncreaseShareSupplyCap) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 20}
}

func (x *CellarV2_5_IncreaseShareSupplyCap) GetNewCap() string {
	if x != nil {
		return x.NewCap
	}
	return ""
}

// Allows the caller to set the share price oracle contract
//
// Represents function `setSharePriceOracle(uint256 _registryId, ERC4626SharePriceOracle _sharePriceOracle)`
type CellarV2_5_SetSharePriceOracle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The oracle registry ID
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// The oracle contract address
	SharePriceOracle string `protobuf:"bytes,2,opt,name=share_price_oracle,json=sharePriceOracle,proto3" json:"share_price_oracle,omitempty"`
}

func (x *CellarV2_5_SetSharePriceOracle) Reset() {
	*x = CellarV2_5_SetSharePriceOracle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_SetSharePriceOracle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_SetSharePriceOracle) ProtoMessage() {}

func (x *CellarV2_5_SetSharePriceOracle) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_SetSharePriceOracle.ProtoReflect.Descriptor instead.
func (*CellarV2_5_SetSharePriceOracle) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 21}
}

func (x *CellarV2_5_SetSharePriceOracle) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *CellarV2_5_SetSharePriceOracle) GetSharePriceOracle() string {
	if x != nil {
		return x.SharePriceOracle
	}
	return ""
}

// Updates the cellar to use the latest price router in the registry.
//
// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
type CellarV2_5_CachePriceRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to check the total assets of the cellar
	CheckTotalAssets bool `protobuf:"varint,1,opt,name=check_total_assets,json=checkTotalAssets,proto3" json:"check_total_assets,omitempty"`
	// The allowable range of the cellar's total assets to deviate between old and new routers
	AllowableRange uint32 `protobuf:"varint,2,opt,name=allowable_range,json=allowableRange,proto3" json:"allowable_range,omitempty"`
	// The expected price router address
	ExpectedPriceRouter string `protobuf:"bytes,3,opt,name=expected_price_router,json=expectedPriceRouter,proto3" json:"expected_price_router,omitempty"`
}

func (x *CellarV2_5_CachePriceRouter) Reset() {
	*x = CellarV2_5_CachePriceRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5_CachePriceRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5_CachePriceRouter) ProtoMessage() {}

func (x *CellarV2_5_CachePriceRouter) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5_CachePriceRouter.ProtoReflect.Descriptor instead.
func (*CellarV2_5_CachePriceRouter) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{4, 22}
}

func (x *CellarV2_5_CachePriceRouter) GetCheckTotalAssets() bool {
	if x != nil {
		return x.CheckTotalAssets
	}
	return false
}

func (x *CellarV2_5_CachePriceRouter) GetAllowableRange() uint32 {
	if x != nil {
		return x.AllowableRange
	}
	return 0
}

func (x *CellarV2_5_CachePriceRouter) GetExpectedPriceRouter() string {
	if x != nil {
		return x.ExpectedPriceRouter
	}
	return ""
}

// The function you wish to execute on the target cellar
type CellarV2_5Governance_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*CellarV2_5Governance_FunctionCall_AddAdaptorToCatalogue
	//	*CellarV2_5Governance_FunctionCall_AddPositionToCatalogue
	//	*CellarV2_5Governance_FunctionCall_SetRebalanceDeviation
	//	*CellarV2_5Governance_FunctionCall_SetStrategistPlatformCut
	//	*CellarV2_5Governance_FunctionCall_ForcePositionOut
	//	*CellarV2_5Governance_FunctionCall_ToggleIgnorePause
	//	*CellarV2_5Governance_FunctionCall_SetSharePriceOracle
	//	*CellarV2_5Governance_FunctionCall_IncreaseShareSupplyCap
	//	*CellarV2_5Governance_FunctionCall_SetAutomationActions
	//	*CellarV2_5Governance_FunctionCall_CachePriceRouter
	//	*CellarV2_5Governance_FunctionCall_InitiateShutdown
	//	*CellarV2_5Governance_FunctionCall_LiftShutdown
	//	*CellarV2_5Governance_FunctionCall_RemoveAdaptorFromCatalogue
	//	*CellarV2_5Governance_FunctionCall_RemovePositionFromCatalogue
	//	*CellarV2_5Governance_FunctionCall_DecreaseShareSupplyCap
	//	*CellarV2_5Governance_FunctionCall_SetHoldingPosition
	//	*CellarV2_5Governance_FunctionCall_AddPosition
	//	*CellarV2_5Governance_FunctionCall_CallOnAdaptor
	//	*CellarV2_5Governance_FunctionCall_RemovePosition
	Function isCellarV2_5Governance_FunctionCall_Function `protobuf_oneof:"function"`
}

func (x *CellarV2_5Governance_FunctionCall) Reset() {
	*x = CellarV2_5Governance_FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_FunctionCall) ProtoMessage() {}

func (x *CellarV2_5Governance_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_FunctionCall.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_FunctionCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 0}
}

func (m *CellarV2_5Governance_FunctionCall) GetFunction() isCellarV2_5Governance_FunctionCall_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetAddAdaptorToCatalogue() *CellarV2_5Governance_AddAdaptorToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_AddAdaptorToCatalogue); ok {
		return x.AddAdaptorToCatalogue
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetAddPositionToCatalogue() *CellarV2_5Governance_AddPositionToCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_AddPositionToCatalogue); ok {
		return x.AddPositionToCatalogue
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetSetRebalanceDeviation() *CellarV2_5Governance_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_SetRebalanceDeviation); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetSetStrategistPlatformCut() *CellarV2_5Governance_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_SetStrategistPlatformCut); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetForcePositionOut() *CellarV2_5Governance_ForcePositionOut {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_ForcePositionOut); ok {
		return x.ForcePositionOut
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetToggleIgnorePause() *CellarV2_5Governance_ToggleIgnorePause {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_ToggleIgnorePause); ok {
		return x.ToggleIgnorePause
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetSetSharePriceOracle() *CellarV2_5Governance_SetSharePriceOracle {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_SetSharePriceOracle); ok {
		return x.SetSharePriceOracle
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetIncreaseShareSupplyCap() *CellarV2_5Governance_IncreaseShareSupplyCap {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_IncreaseShareSupplyCap); ok {
		return x.IncreaseShareSupplyCap
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetSetAutomationActions() *CellarV2_5Governance_SetAutomationActions {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_SetAutomationActions); ok {
		return x.SetAutomationActions
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetCachePriceRouter() *CellarV2_5Governance_CachePriceRouter {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_CachePriceRouter); ok {
		return x.CachePriceRouter
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetInitiateShutdown() *CellarV2_5Governance_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_InitiateShutdown); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetLiftShutdown() *CellarV2_5Governance_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_LiftShutdown); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetRemoveAdaptorFromCatalogue() *CellarV2_5Governance_RemoveAdaptorFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_RemoveAdaptorFromCatalogue); ok {
		return x.RemoveAdaptorFromCatalogue
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetRemovePositionFromCatalogue() *CellarV2_5Governance_RemovePositionFromCatalogue {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_RemovePositionFromCatalogue); ok {
		return x.RemovePositionFromCatalogue
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetDecreaseShareSupplyCap() *CellarV2_5Governance_DecreaseShareSupplyCap {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_DecreaseShareSupplyCap); ok {
		return x.DecreaseShareSupplyCap
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetSetHoldingPosition() *CellarV2_5Governance_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_SetHoldingPosition); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetAddPosition() *CellarV2_5Governance_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_AddPosition); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetCallOnAdaptor() *CellarV2_5Governance_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_CallOnAdaptor); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2_5Governance_FunctionCall) GetRemovePosition() *CellarV2_5Governance_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_5Governance_FunctionCall_RemovePosition); ok {
		return x.RemovePosition
	}
	return nil
}

type isCellarV2_5Governance_FunctionCall_Function interface {
	isCellarV2_5Governance_FunctionCall_Function()
}

type CellarV2_5Governance_FunctionCall_AddAdaptorToCatalogue struct {
	// Represents function `addAdaptorToCatalogue(address adaptor)`
	AddAdaptorToCatalogue *CellarV2_5Governance_AddAdaptorToCatalogue `protobuf:"bytes,1,opt,name=add_adaptor_to_catalogue,json=addAdaptorToCatalogue,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_AddPositionToCatalogue struct {
	// Represents function `addPositionToCatalogue(uint32 positionId)`
	AddPositionToCatalogue *CellarV2_5Governance_AddPositionToCatalogue `protobuf:"bytes,2,opt,name=add_position_to_catalogue,json=addPositionToCatalogue,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_SetRebalanceDeviation struct {
	// Represents function `setRebalanceDeviation(uint256)`
	SetRebalanceDeviation *CellarV2_5Governance_SetRebalanceDeviation `protobuf:"bytes,3,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_SetStrategistPlatformCut struct {
	// Represents function `setStrategistPlatformCut(uint64 cut)`
	SetStrategistPlatformCut *CellarV2_5Governance_SetStrategistPlatformCut `protobuf:"bytes,4,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_ForcePositionOut struct {
	// Represents function `forcePositionOut(uint32 index, uint32 positionId, bool inDebtArray)`
	ForcePositionOut *CellarV2_5Governance_ForcePositionOut `protobuf:"bytes,5,opt,name=force_position_out,json=forcePositionOut,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_ToggleIgnorePause struct {
	// Represents function `toggleIgnorePause()`
	ToggleIgnorePause *CellarV2_5Governance_ToggleIgnorePause `protobuf:"bytes,6,opt,name=toggle_ignore_pause,json=toggleIgnorePause,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_SetSharePriceOracle struct {
	// Represents function `setSharePriceOracle(uint256 _registryId, ERC4626SharePriceOracle _sharePriceOracle)`
	SetSharePriceOracle *CellarV2_5Governance_SetSharePriceOracle `protobuf:"bytes,7,opt,name=set_share_price_oracle,json=setSharePriceOracle,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_IncreaseShareSupplyCap struct {
	// Represents function `increaseShareSupplyCap(uint192 _newShareSupplyCap)`
	IncreaseShareSupplyCap *CellarV2_5Governance_IncreaseShareSupplyCap `protobuf:"bytes,8,opt,name=increase_share_supply_cap,json=increaseShareSupplyCap,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_SetAutomationActions struct {
	// Represents function `setAutomatiionActions(uint256 _registryId, address _expectedAutomationActions)`
	SetAutomationActions *CellarV2_5Governance_SetAutomationActions `protobuf:"bytes,9,opt,name=set_automation_actions,json=setAutomationActions,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_CachePriceRouter struct {
	// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
	CachePriceRouter *CellarV2_5Governance_CachePriceRouter `protobuf:"bytes,10,opt,name=cache_price_router,json=cachePriceRouter,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_InitiateShutdown struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2_5Governance_InitiateShutdown `protobuf:"bytes,11,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_LiftShutdown struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2_5Governance_LiftShutdown `protobuf:"bytes,12,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_RemoveAdaptorFromCatalogue struct {
	// Represents function `removeAdaptorFromCatalogue(address adaptor)`
	RemoveAdaptorFromCatalogue *CellarV2_5Governance_RemoveAdaptorFromCatalogue `protobuf:"bytes,13,opt,name=remove_adaptor_from_catalogue,json=removeAdaptorFromCatalogue,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_RemovePositionFromCatalogue struct {
	// Represents function `removePositionFromCatalogue(uint32 positionId)`
	RemovePositionFromCatalogue *CellarV2_5Governance_RemovePositionFromCatalogue `protobuf:"bytes,14,opt,name=remove_position_from_catalogue,json=removePositionFromCatalogue,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_DecreaseShareSupplyCap struct {
	// Represents function `decreaseShareSupplyCap(uint192)
	DecreaseShareSupplyCap *CellarV2_5Governance_DecreaseShareSupplyCap `protobuf:"bytes,15,opt,name=decrease_share_supply_cap,json=decreaseShareSupplyCap,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_SetHoldingPosition struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_5Governance_SetHoldingPosition `protobuf:"bytes,16,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_AddPosition struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_5Governance_AddPosition `protobuf:"bytes,17,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_CallOnAdaptor struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_5Governance_CallOnAdaptor `protobuf:"bytes,18,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_5Governance_FunctionCall_RemovePosition struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *CellarV2_5Governance_RemovePosition `protobuf:"bytes,19,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

func (*CellarV2_5Governance_FunctionCall_AddAdaptorToCatalogue) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_AddPositionToCatalogue) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_SetRebalanceDeviation) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_SetStrategistPlatformCut) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_ForcePositionOut) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_ToggleIgnorePause) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_SetSharePriceOracle) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_IncreaseShareSupplyCap) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_SetAutomationActions) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_CachePriceRouter) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_InitiateShutdown) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_LiftShutdown) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_RemoveAdaptorFromCatalogue) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_RemovePositionFromCatalogue) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_DecreaseShareSupplyCap) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_SetHoldingPosition) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_AddPosition) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_CallOnAdaptor) isCellarV2_5Governance_FunctionCall_Function() {
}

func (*CellarV2_5Governance_FunctionCall_RemovePosition) isCellarV2_5Governance_FunctionCall_Function() {
}

// Allows caller to call multiple functions in a single TX.
//
// Represents function `multicall(bytes[] data)`
type CellarV2_5Governance_Multicall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCalls []*CellarV2_5Governance_FunctionCall `protobuf:"bytes,1,rep,name=function_calls,json=functionCalls,proto3" json:"function_calls,omitempty"`
}

func (x *CellarV2_5Governance_Multicall) Reset() {
	*x = CellarV2_5Governance_Multicall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_Multicall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_Multicall) ProtoMessage() {}

func (x *CellarV2_5Governance_Multicall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_Multicall.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_Multicall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CellarV2_5Governance_Multicall) GetFunctionCalls() []*CellarV2_5Governance_FunctionCall {
	if x != nil {
		return x.FunctionCalls
	}
	return nil
}

// Allows the owner to add an adaptor to the Cellar's adaptor catalogue
//
// Represents function `addAdaptorToCatalogue(address adaptor)`
type CellarV2_5Governance_AddAdaptorToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_5Governance_AddAdaptorToCatalogue) Reset() {
	*x = CellarV2_5Governance_AddAdaptorToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_AddAdaptorToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_AddAdaptorToCatalogue) ProtoMessage() {}

func (x *CellarV2_5Governance_AddAdaptorToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_AddAdaptorToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_AddAdaptorToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 2}
}

func (x *CellarV2_5Governance_AddAdaptorToCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows the owner to add a position to the Cellar's position catalogue
//
// Represents function `addPositionToCatalogue(uint32 positionId)`
type CellarV2_5Governance_AddPositionToCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_5Governance_AddPositionToCatalogue) Reset() {
	*x = CellarV2_5Governance_AddPositionToCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_AddPositionToCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_AddPositionToCatalogue) ProtoMessage() {}

func (x *CellarV2_5Governance_AddPositionToCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_AddPositionToCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_AddPositionToCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 3}
}

func (x *CellarV2_5Governance_AddPositionToCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_5Governance_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_5Governance_SetRebalanceDeviation) Reset() {
	*x = CellarV2_5Governance_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_5Governance_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 4}
}

func (x *CellarV2_5Governance_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// Allows strategist to set the platform cut for the cellar.
//
// Represents function `setStrategistPlatformCut(uint64 cut)`
type CellarV2_5Governance_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new strategist platform cut
	NewCut uint64 `protobuf:"varint,1,opt,name=new_cut,json=newCut,proto3" json:"new_cut,omitempty"`
}

func (x *CellarV2_5Governance_SetStrategistPlatformCut) Reset() {
	*x = CellarV2_5Governance_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2_5Governance_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 5}
}

func (x *CellarV2_5Governance_SetStrategistPlatformCut) GetNewCut() uint64 {
	if x != nil {
		return x.NewCut
	}
	return 0
}

// Allows caller to force a position out of the cellar
//
// Represents function `forcePositionOut(uint32 index, uint32 positionId, bool inDebtArray)`
type CellarV2_5Governance_ForcePositionOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	PositionId  uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	InDebtArray bool   `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_5Governance_ForcePositionOut) Reset() {
	*x = CellarV2_5Governance_ForcePositionOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_ForcePositionOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_ForcePositionOut) ProtoMessage() {}

func (x *CellarV2_5Governance_ForcePositionOut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_ForcePositionOut.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_ForcePositionOut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 6}
}

func (x *CellarV2_5Governance_ForcePositionOut) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_5Governance_ForcePositionOut) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_5Governance_ForcePositionOut) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows caller to toggle the ignorePause flag on the cellar
//
// Represents function `toggleIgnorePause()`
type CellarV2_5Governance_ToggleIgnorePause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_5Governance_ToggleIgnorePause) Reset() {
	*x = CellarV2_5Governance_ToggleIgnorePause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_ToggleIgnorePause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_ToggleIgnorePause) ProtoMessage() {}

func (x *CellarV2_5Governance_ToggleIgnorePause) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_ToggleIgnorePause.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_ToggleIgnorePause) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 7}
}

// Allows caller to set automation actions
//
// Represents function `setAutomatiionActions(uint256 _registryId, address _expectedAutomationActions)`
type CellarV2_5Governance_SetAutomationActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The oracle registry ID
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// The automation actions contract address
	ExpectedAutomationActions string `protobuf:"bytes,2,opt,name=expected_automation_actions,json=expectedAutomationActions,proto3" json:"expected_automation_actions,omitempty"`
}

func (x *CellarV2_5Governance_SetAutomationActions) Reset() {
	*x = CellarV2_5Governance_SetAutomationActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_SetAutomationActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_SetAutomationActions) ProtoMessage() {}

func (x *CellarV2_5Governance_SetAutomationActions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_SetAutomationActions.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_SetAutomationActions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 8}
}

func (x *CellarV2_5Governance_SetAutomationActions) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *CellarV2_5Governance_SetAutomationActions) GetExpectedAutomationActions() string {
	if x != nil {
		return x.ExpectedAutomationActions
	}
	return ""
}

// Allows the caller to increase the share supply cap
//
// Represents function `increaseShareSupplyCap(uint192 _newShareSupplyCap)`
type CellarV2_5Governance_IncreaseShareSupplyCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCap string `protobuf:"bytes,1,opt,name=new_cap,json=newCap,proto3" json:"new_cap,omitempty"`
}

func (x *CellarV2_5Governance_IncreaseShareSupplyCap) Reset() {
	*x = CellarV2_5Governance_IncreaseShareSupplyCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_IncreaseShareSupplyCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_IncreaseShareSupplyCap) ProtoMessage() {}

func (x *CellarV2_5Governance_IncreaseShareSupplyCap) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_IncreaseShareSupplyCap.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_IncreaseShareSupplyCap) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 9}
}

func (x *CellarV2_5Governance_IncreaseShareSupplyCap) GetNewCap() string {
	if x != nil {
		return x.NewCap
	}
	return ""
}

// Allows the caller to set the share price oracle contract
//
// Represents function `setSharePriceOracle(uint256 _registryId, ERC4626SharePriceOracle _sharePriceOracle)`
type CellarV2_5Governance_SetSharePriceOracle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The oracle registry ID
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// The oracle contract address
	SharePriceOracle string `protobuf:"bytes,2,opt,name=share_price_oracle,json=sharePriceOracle,proto3" json:"share_price_oracle,omitempty"`
}

func (x *CellarV2_5Governance_SetSharePriceOracle) Reset() {
	*x = CellarV2_5Governance_SetSharePriceOracle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_SetSharePriceOracle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_SetSharePriceOracle) ProtoMessage() {}

func (x *CellarV2_5Governance_SetSharePriceOracle) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_SetSharePriceOracle.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_SetSharePriceOracle) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 10}
}

func (x *CellarV2_5Governance_SetSharePriceOracle) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *CellarV2_5Governance_SetSharePriceOracle) GetSharePriceOracle() string {
	if x != nil {
		return x.SharePriceOracle
	}
	return ""
}

// Updates the cellar to use the latest price router in the registry.
//
// Represents function `cachePriceRouter(bool checkTotalAssets, uint16 allowableRange, address expectedPriceRouter)`
type CellarV2_5Governance_CachePriceRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to check the total assets of the cellar
	CheckTotalAssets bool `protobuf:"varint,1,opt,name=check_total_assets,json=checkTotalAssets,proto3" json:"check_total_assets,omitempty"`
	// The allowable range of the cellar's total assets to deviate between old and new routers
	AllowableRange uint32 `protobuf:"varint,2,opt,name=allowable_range,json=allowableRange,proto3" json:"allowable_range,omitempty"`
	// The expected price router address
	ExpectedPriceRouter string `protobuf:"bytes,3,opt,name=expected_price_router,json=expectedPriceRouter,proto3" json:"expected_price_router,omitempty"`
}

func (x *CellarV2_5Governance_CachePriceRouter) Reset() {
	*x = CellarV2_5Governance_CachePriceRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_CachePriceRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_CachePriceRouter) ProtoMessage() {}

func (x *CellarV2_5Governance_CachePriceRouter) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_CachePriceRouter.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_CachePriceRouter) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 11}
}

func (x *CellarV2_5Governance_CachePriceRouter) GetCheckTotalAssets() bool {
	if x != nil {
		return x.CheckTotalAssets
	}
	return false
}

func (x *CellarV2_5Governance_CachePriceRouter) GetAllowableRange() uint32 {
	if x != nil {
		return x.AllowableRange
	}
	return 0
}

func (x *CellarV2_5Governance_CachePriceRouter) GetExpectedPriceRouter() string {
	if x != nil {
		return x.ExpectedPriceRouter
	}
	return ""
}

// Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.
//
// Represents function `initiateShutdown()`
type CellarV2_5Governance_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_5Governance_InitiateShutdown) Reset() {
	*x = CellarV2_5Governance_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2_5Governance_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 12}
}

// Allows the owner to restart a shut down Cellar
//
// Represents function `liftShutdown()`
type CellarV2_5Governance_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_5Governance_LiftShutdown) Reset() {
	*x = CellarV2_5Governance_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_LiftShutdown) ProtoMessage() {}

func (x *CellarV2_5Governance_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 13}
}

// Allows callers to remove adaptors from this cellar's catalogue
//
// Represents function `removeAdaptorFromCatalogue(address adaptor)`
type CellarV2_5Governance_RemoveAdaptorFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_5Governance_RemoveAdaptorFromCatalogue) Reset() {
	*x = CellarV2_5Governance_RemoveAdaptorFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_RemoveAdaptorFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_RemoveAdaptorFromCatalogue) ProtoMessage() {}

func (x *CellarV2_5Governance_RemoveAdaptorFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_RemoveAdaptorFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_RemoveAdaptorFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 14}
}

func (x *CellarV2_5Governance_RemoveAdaptorFromCatalogue) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

// Allows caller to remove positions from this cellar's catalogue
//
// Represents function `removePositionFromCatalogue(uint32 positionId)`
type CellarV2_5Governance_RemovePositionFromCatalogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_5Governance_RemovePositionFromCatalogue) Reset() {
	*x = CellarV2_5Governance_RemovePositionFromCatalogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_RemovePositionFromCatalogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_RemovePositionFromCatalogue) ProtoMessage() {}

func (x *CellarV2_5Governance_RemovePositionFromCatalogue) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_RemovePositionFromCatalogue.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_RemovePositionFromCatalogue) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 15}
}

func (x *CellarV2_5Governance_RemovePositionFromCatalogue) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Allows strategist to decrease the share supply cap
//
// Represents function `decreaseShareSupplyCap(uint192)`
type CellarV2_5Governance_DecreaseShareSupplyCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCap string `protobuf:"bytes,1,opt,name=new_cap,json=newCap,proto3" json:"new_cap,omitempty"`
}

func (x *CellarV2_5Governance_DecreaseShareSupplyCap) Reset() {
	*x = CellarV2_5Governance_DecreaseShareSupplyCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_DecreaseShareSupplyCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_DecreaseShareSupplyCap) ProtoMessage() {}

func (x *CellarV2_5Governance_DecreaseShareSupplyCap) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_DecreaseShareSupplyCap.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_DecreaseShareSupplyCap) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 16}
}

func (x *CellarV2_5Governance_DecreaseShareSupplyCap) GetNewCap() string {
	if x != nil {
		return x.NewCap
	}
	return ""
}

// Set the holding position used of the cellar.
//
// Represents function `setHoldingIndex(uint8 index)`
type CellarV2_5Governance_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_5Governance_SetHoldingPosition) Reset() {
	*x = CellarV2_5Governance_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_5Governance_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 17}
}

func (x *CellarV2_5Governance_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_5Governance_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_5Governance_AddPosition) Reset() {
	*x = CellarV2_5Governance_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_AddPosition) ProtoMessage() {}

func (x *CellarV2_5Governance_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 18}
}

func (x *CellarV2_5Governance_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_5Governance_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_5Governance_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_5Governance_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_5Governance_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_5Governance_CallOnAdaptor) Reset() {
	*x = CellarV2_5Governance_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_5Governance_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 19}
}

func (x *CellarV2_5Governance_CallOnAdaptor) GetData() []*AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_5Governance_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_5Governance_RemovePosition) Reset() {
	*x = CellarV2_5Governance_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_5Governance_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_5Governance_RemovePosition) ProtoMessage() {}

func (x *CellarV2_5Governance_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_5Governance_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_5Governance_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{5, 20}
}

func (x *CellarV2_5Governance_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_5Governance_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

var File_cellar_v2_proto protoreflect.FileDescriptor

var file_cellar_v2_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x1a, 0x0d, 0x61,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x64, 0x65,
	0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x64,
	0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6c,
	0x6f, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x72, 0x63, 0x34, 0x36, 0x32,
	0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x66, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61,
	0x61, 0x76, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61, 0x61, 0x76,
	0x65, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61, 0x61,
	0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x32, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33,
	0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x62,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f,
	0x62, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x76, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75,
	0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30,
	0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x64,
	0x65, 0x62, 0x74, 0x5f, 0x66, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x75, 0x72,
	0x61, 0x5f, 0x65, 0x72, 0x63, 0x34, 0x36, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x75, 0x72, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x0f,
	0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f,
	0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x1a, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x48, 0x0a,
	0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x74, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x48, 0x00, 0x52, 0x18,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c,
	0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44,
	0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x35, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a,
	0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x2f, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x1a, 0x97, 0x01,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65,
	0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c,
	0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x28, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x32, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x28, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x06,
	0x0a, 0x12, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x52, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x74,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x46, 0x65, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75,
	0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x52, 0x0a,
	0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x75, 0x70, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x6e, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x28, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x32, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x28, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x3c, 0x0a,
	0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x16, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x1a, 0xaa, 0x0c, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x32, 0x5f, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x50,
	0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x76, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x79, 0x0a, 0x1e, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f,
	0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1a,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x18, 0x61, 0x64, 0x64,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x32, 0x5f, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x64, 0x64,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x66,
	0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x70, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x48, 0x00, 0x52, 0x18,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x4a, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e,
	0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x6c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x57, 0x0a, 0x12,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x3c, 0x0a, 0x0d, 0x43,
	0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x36, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x3e, 0x0a,
	0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x35, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x77,
	0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x1a, 0x57, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x4a,
	0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x1a, 0x31, 0x0a, 0x15, 0x41, 0x64,
	0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x39, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x33, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x74,
	0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x1a, 0x9d, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xea, 0x19,
	0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x1a, 0x93, 0x0e, 0x0a, 0x0c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a, 0x18, 0x61, 0x64, 0x64,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x64, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x74, 0x0a, 0x19,
	0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61, 0x64, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x7a,
	0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x54, 0x0a, 0x0d,
	0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x61, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x64, 0x0a, 0x13, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x12, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61,
	0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65,
	0x12, 0x67, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x61,
	0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x0e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x1a, 0x31, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54,
	0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x1a, 0x39, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a,
	0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x6b,
	0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12,
	0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x1a, 0x33, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x74, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x6d, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x2b, 0x0a, 0x11, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x3c, 0x0a,
	0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x0e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65,
	0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x36, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a,
	0x3e, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a,
	0x35, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe3, 0x1e, 0x0a, 0x0a, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x1a, 0xc6, 0x10, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x5f, 0x35, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x5f, 0x35, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f,
	0x35, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1a,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35,
	0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35,
	0x2e, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x6c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x76, 0x0a,
	0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x79, 0x0a, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65,
	0x12, 0x6a, 0x0a, 0x19, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x44, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x12, 0x6d, 0x0a, 0x1a,
	0x73, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x1b, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a,
	0x18, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x61, 0x64, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f,
	0x35, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61, 0x64, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x66, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x1b, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x16,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x5f, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12,
	0x6a, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x12, 0x57, 0x0a, 0x12, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62,
	0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x3c, 0x0a, 0x0d, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x1a, 0x35, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x34, 0x0a, 0x1a, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44,
	0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x0e, 0x0a,
	0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x57, 0x0a,
	0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x0e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x1a, 0x36, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x3e,
	0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x31,
	0x0a, 0x16, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x61,
	0x70, 0x1a, 0xbc, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x1a, 0x47, 0x0a, 0x18, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x1a, 0x31, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x39, 0x0a, 0x16,
	0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x74, 0x1a, 0x31, 0x0a, 0x16, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x70, 0x1a, 0x64, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x84, 0x1d, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x4a, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x1a, 0x98, 0x10, 0x0a, 0x0c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a, 0x18,
	0x61, 0x64, 0x64, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x64, 0x64, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12,
	0x74, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61,
	0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x15, 0x73, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x43, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x48, 0x00, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x64, 0x0a, 0x13, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x61, 0x70, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x12,
	0x6d, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61,
	0x0a, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x12, 0x60, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x54, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x66,
	0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x66,
	0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x83, 0x01, 0x0a,
	0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x16, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x12, 0x67, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x5a,
	0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x35, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x61, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x32, 0x5f, 0x35, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x1a, 0x31, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x39, 0x0a, 0x16,
	0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x74, 0x1a, 0x6d, 0x0a, 0x10, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e,
	0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x13, 0x0a, 0x11, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x1a, 0x77,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x31, 0x0a, 0x16, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x70, 0x1a, 0x64, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x1a, 0x9d, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x36, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x3e, 0x0a, 0x1b,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x31, 0x0a, 0x16,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x70, 0x1a,
	0x35, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x1a, 0x3c, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4a,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62,
	0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x1c, 0x0a, 0x0b, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x58, 0x0a, 0x15, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x61,
	0x76, 0x65, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56,
	0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x61, 0x76, 0x65, 0x41, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x61,
	0x61, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76,
	0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x44,
	0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56,
	0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x61, 0x61, 0x76, 0x65, 0x44, 0x65,
	0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x64,
	0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x15, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x41, 0x61, 0x76, 0x65, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x61, 0x76,
	0x65, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x61,
	0x0a, 0x18, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x61,
	0x76, 0x65, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x61, 0x61, 0x76,
	0x65, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x61,
	0x61, 0x76, 0x65, 0x56, 0x33, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x68, 0x0a, 0x1b, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x64, 0x65,
	0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33, 0x44, 0x65, 0x62, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x16, 0x61, 0x61, 0x76, 0x65, 0x56, 0x33, 0x44, 0x65, 0x62, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x11,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x63, 0x68, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x67, 0x0a, 0x1a,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x16, 0x66,
	0x65, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x56, 0x31,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x78, 0x5f,
	0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x5a, 0x65, 0x72, 0x6f,
	0x58, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x7a, 0x65, 0x72, 0x6f, 0x58, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x67, 0x0a, 0x1a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x69,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x77, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61,
	0x70, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x76, 0x33, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56, 0x33, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x73,
	0x77, 0x61, 0x70, 0x56, 0x33, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x94, 0x01, 0x0a,
	0x2b, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x41, 0x61, 0x76, 0x65, 0x56, 0x32, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x41, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x24, 0x61,
	0x61, 0x76, 0x65, 0x56, 0x32, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x41, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x31, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x66, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76,
	0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x72, 0x0a, 0x1f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61, 0x61, 0x76, 0x65, 0x5f,
	0x76, 0x32, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76,
	0x65, 0x56, 0x32, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x6f, 0x72, 0x70, 0x68,
	0x6f, 0x41, 0x61, 0x76, 0x65, 0x56, 0x32, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x7b, 0x0a, 0x22, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61,
	0x61, 0x76, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f,
	0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76, 0x65, 0x56, 0x32, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76, 0x65, 0x56,
	0x32, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x2a, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61, 0x61, 0x76,
	0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33,
	0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x23, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33, 0x41, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x31,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x7c, 0x0a, 0x23, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f,
	0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x70, 0x32, 0x70, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33, 0x41, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x32, 0x50, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76,
	0x65, 0x56, 0x33, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x32, 0x70, 0x56, 0x31, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x7b, 0x0a, 0x22, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x61, 0x61,
	0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f, 0x72,
	0x70, 0x68, 0x6f, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x1c, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33,
	0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x5d, 0x0a, 0x16, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x5d, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x58,
	0x0a, 0x15, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x66, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76,
	0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x65, 0x62, 0x74, 0x46,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x62, 0x74, 0x46, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76,
	0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x26, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33,
	0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x34, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x4c, 0x6f, 0x61, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x1f, 0x61, 0x61, 0x76,
	0x65, 0x56, 0x33, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x7a, 0x0a, 0x21,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x31,
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4c,
	0x6f, 0x61, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x31, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4c,
	0x6f, 0x61, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x43, 0x75, 0x72, 0x76, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x43, 0x75, 0x72, 0x76, 0x65, 0x56, 0x31, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x76, 0x31,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x76, 0x65, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x5a, 0x0a,
	0x15, 0x61, 0x75, 0x72, 0x61, 0x5f, 0x65, 0x72, 0x63, 0x34, 0x36, 0x32, 0x36, 0x5f, 0x76, 0x31,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x45, 0x52,
	0x43, 0x34, 0x36, 0x32, 0x36, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x72, 0x61, 0x45, 0x72, 0x63, 0x34, 0x36,
	0x32, 0x36, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x1f, 0x6d, 0x6f, 0x72,
	0x70, 0x68, 0x6f, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x42, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x64, 0x0a, 0x19, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x5f, 0x62, 0x6c, 0x75, 0x65,
	0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x62, 0x74,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x15, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x62, 0x74,
	0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x1b, 0x6d, 0x6f, 0x72, 0x70, 0x68,
	0x6f, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x31,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f,
	0x42, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x6f, 0x72, 0x70,
	0x68, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x31, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x65, 0x72, 0x63, 0x34, 0x36, 0x32, 0x36, 0x5f, 0x76,
	0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x45, 0x52, 0x43, 0x34, 0x36,
	0x32, 0x36, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x65, 0x72, 0x63, 0x34, 0x36, 0x32, 0x36, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x31,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellar_v2_proto_rawDescOnce sync.Once
	file_cellar_v2_proto_rawDescData = file_cellar_v2_proto_rawDesc
)

func file_cellar_v2_proto_rawDescGZIP() []byte {
	file_cellar_v2_proto_rawDescOnce.Do(func() {
		file_cellar_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellar_v2_proto_rawDescData)
	})
	return file_cellar_v2_proto_rawDescData
}

var file_cellar_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 107)
var file_cellar_v2_proto_goTypes = []interface{}{
	(*CellarV2)(nil),                                         // 0: steward.v4.CellarV2
	(*CellarV2Governance)(nil),                               // 1: steward.v4.CellarV2Governance
	(*CellarV2_2)(nil),                                       // 2: steward.v4.CellarV2_2
	(*CellarV2_2Governance)(nil),                             // 3: steward.v4.CellarV2_2Governance
	(*CellarV2_5)(nil),                                       // 4: steward.v4.CellarV2_5
	(*CellarV2_5Governance)(nil),                             // 5: steward.v4.CellarV2_5Governance
	(*AdaptorCall)(nil),                                      // 6: steward.v4.AdaptorCall
	(*CellarV2_CallOnAdaptor)(nil),                           // 7: steward.v4.CellarV2.CallOnAdaptor
	(*CellarV2_RemovePosition)(nil),                          // 8: steward.v4.CellarV2.RemovePosition
	(*CellarV2_SetHoldingPosition)(nil),                      // 9: steward.v4.CellarV2.SetHoldingPosition
	(*CellarV2_SetStrategistPayoutAddress)(nil),              // 10: steward.v4.CellarV2.SetStrategistPayoutAddress
	(*CellarV2_SwapPositions)(nil),                           // 11: steward.v4.CellarV2.SwapPositions
	(*CellarV2_SetShareLockPeriod)(nil),                      // 12: steward.v4.CellarV2.SetShareLockPeriod
	(*CellarV2_AddPosition)(nil),                             // 13: steward.v4.CellarV2.AddPosition
	(*CellarV2_InitiateShutdown)(nil),                        // 14: steward.v4.CellarV2.InitiateShutdown
	(*CellarV2_LiftShutdown)(nil),                            // 15: steward.v4.CellarV2.LiftShutdown
	(*CellarV2_SetPlatformFee)(nil),                          // 16: steward.v4.CellarV2.SetPlatformFee
	(*CellarV2_SetStrategistPlatformCut)(nil),                // 17: steward.v4.CellarV2.SetStrategistPlatformCut
	(*CellarV2_SetupAdaptor)(nil),                            // 18: steward.v4.CellarV2.SetupAdaptor
	(*CellarV2_SetRebalanceDeviation)(nil),                   // 19: steward.v4.CellarV2.SetRebalanceDeviation
	(*CellarV2Governance_InitiateShutdown)(nil),              // 20: steward.v4.CellarV2Governance.InitiateShutdown
	(*CellarV2Governance_LiftShutdown)(nil),                  // 21: steward.v4.CellarV2Governance.LiftShutdown
	(*CellarV2Governance_SetPlatformFee)(nil),                // 22: steward.v4.CellarV2Governance.SetPlatformFee
	(*CellarV2Governance_SetStrategistPlatformCut)(nil),      // 23: steward.v4.CellarV2Governance.SetStrategistPlatformCut
	(*CellarV2Governance_SetupAdaptor)(nil),                  // 24: steward.v4.CellarV2Governance.SetupAdaptor
	(*CellarV2Governance_SetRebalanceDeviation)(nil),         // 25: steward.v4.CellarV2Governance.SetRebalanceDeviation
	(*CellarV2_2_FunctionCall)(nil),                          // 26: steward.v4.CellarV2_2.FunctionCall
	(*CellarV2_2_AddPosition)(nil),                           // 27: steward.v4.CellarV2_2.AddPosition
	(*CellarV2_2_CallOnAdaptor)(nil),                         // 28: steward.v4.CellarV2_2.CallOnAdaptor
	(*CellarV2_2_RemovePosition)(nil),                        // 29: steward.v4.CellarV2_2.RemovePosition
	(*CellarV2_2_RemoveAdaptorFromCatalogue)(nil),            // 30: steward.v4.CellarV2_2.RemoveAdaptorFromCatalogue
	(*CellarV2_2_RemovePositionFromCatalogue)(nil),           // 31: steward.v4.CellarV2_2.RemovePositionFromCatalogue
	(*CellarV2_2_SetHoldingPosition)(nil),                    // 32: steward.v4.CellarV2_2.SetHoldingPosition
	(*CellarV2_2_SetStrategistPayoutAddress)(nil),            // 33: steward.v4.CellarV2_2.SetStrategistPayoutAddress
	(*CellarV2_2_SwapPositions)(nil),                         // 34: steward.v4.CellarV2_2.SwapPositions
	(*CellarV2_2_Multicall)(nil),                             // 35: steward.v4.CellarV2_2.Multicall
	(*CellarV2_2_AddAdaptorToCatalogue)(nil),                 // 36: steward.v4.CellarV2_2.AddAdaptorToCatalogue
	(*CellarV2_2_AddPositionToCatalogue)(nil),                // 37: steward.v4.CellarV2_2.AddPositionToCatalogue
	(*CellarV2_2_SetShareLockPeriod)(nil),                    // 38: steward.v4.CellarV2_2.SetShareLockPeriod
	(*CellarV2_2_SetRebalanceDeviation)(nil),                 // 39: steward.v4.CellarV2_2.SetRebalanceDeviation
	(*CellarV2_2_InitiateShutdown)(nil),                      // 40: steward.v4.CellarV2_2.InitiateShutdown
	(*CellarV2_2_SetStrategistPlatformCut)(nil),              // 41: steward.v4.CellarV2_2.SetStrategistPlatformCut
	(*CellarV2_2_LiftShutdown)(nil),                          // 42: steward.v4.CellarV2_2.LiftShutdown
	(*CellarV2_2_CachePriceRouter)(nil),                      // 43: steward.v4.CellarV2_2.CachePriceRouter
	(*CellarV2_2Governance_FunctionCall)(nil),                // 44: steward.v4.CellarV2_2Governance.FunctionCall
	(*CellarV2_2Governance_Multicall)(nil),                   // 45: steward.v4.CellarV2_2Governance.Multicall
	(*CellarV2_2Governance_AddAdaptorToCatalogue)(nil),       // 46: steward.v4.CellarV2_2Governance.AddAdaptorToCatalogue
	(*CellarV2_2Governance_AddPositionToCatalogue)(nil),      // 47: steward.v4.CellarV2_2Governance.AddPositionToCatalogue
	(*CellarV2_2Governance_SetShareLockPeriod)(nil),          // 48: steward.v4.CellarV2_2Governance.SetShareLockPeriod
	(*CellarV2_2Governance_SetRebalanceDeviation)(nil),       // 49: steward.v4.CellarV2_2Governance.SetRebalanceDeviation
	(*CellarV2_2Governance_InitiateShutdown)(nil),            // 50: steward.v4.CellarV2_2Governance.InitiateShutdown
	(*CellarV2_2Governance_SetStrategistPlatformCut)(nil),    // 51: steward.v4.CellarV2_2Governance.SetStrategistPlatformCut
	(*CellarV2_2Governance_LiftShutdown)(nil),                // 52: steward.v4.CellarV2_2Governance.LiftShutdown
	(*CellarV2_2Governance_ForcePositionOut)(nil),            // 53: steward.v4.CellarV2_2Governance.ForcePositionOut
	(*CellarV2_2Governance_ToggleIgnorePause)(nil),           // 54: steward.v4.CellarV2_2Governance.ToggleIgnorePause
	(*CellarV2_2Governance_CachePriceRouter)(nil),            // 55: steward.v4.CellarV2_2Governance.CachePriceRouter
	(*CellarV2_2Governance_AddPosition)(nil),                 // 56: steward.v4.CellarV2_2Governance.AddPosition
	(*CellarV2_2Governance_CallOnAdaptor)(nil),               // 57: steward.v4.CellarV2_2Governance.CallOnAdaptor
	(*CellarV2_2Governance_RemovePosition)(nil),              // 58: steward.v4.CellarV2_2Governance.RemovePosition
	(*CellarV2_2Governance_RemoveAdaptorFromCatalogue)(nil),  // 59: steward.v4.CellarV2_2Governance.RemoveAdaptorFromCatalogue
	(*CellarV2_2Governance_RemovePositionFromCatalogue)(nil), // 60: steward.v4.CellarV2_2Governance.RemovePositionFromCatalogue
	(*CellarV2_2Governance_SetHoldingPosition)(nil),          // 61: steward.v4.CellarV2_2Governance.SetHoldingPosition
	(*CellarV2_2Governance_SwapPositions)(nil),               // 62: steward.v4.CellarV2_2Governance.SwapPositions
	(*CellarV2_5_FunctionCall)(nil),                          // 63: steward.v4.CellarV2_5.FunctionCall
	(*CellarV2_5_AddPosition)(nil),                           // 64: steward.v4.CellarV2_5.AddPosition
	(*CellarV2_5_CallOnAdaptor)(nil),                         // 65: steward.v4.CellarV2_5.CallOnAdaptor
	(*CellarV2_5_RemovePosition)(nil),                        // 66: steward.v4.CellarV2_5.RemovePosition
	(*CellarV2_5_SetHoldingPosition)(nil),                    // 67: steward.v4.CellarV2_5.SetHoldingPosition
	(*CellarV2_5_SetStrategistPayoutAddress)(nil),            // 68: steward.v4.CellarV2_5.SetStrategistPayoutAddress
	(*CellarV2_5_SwapPositions)(nil),                         // 69: steward.v4.CellarV2_5.SwapPositions
	(*CellarV2_5_SetShareLockPeriod)(nil),                    // 70: steward.v4.CellarV2_5.SetShareLockPeriod
	(*CellarV2_5_InitiateShutdown)(nil),                      // 71: steward.v4.CellarV2_5.InitiateShutdown
	(*CellarV2_5_LiftShutdown)(nil),                          // 72: steward.v4.CellarV2_5.LiftShutdown
	(*CellarV2_5_Multicall)(nil),                             // 73: steward.v4.CellarV2_5.Multicall
	(*CellarV2_5_RemoveAdaptorFromCatalogue)(nil),            // 74: steward.v4.CellarV2_5.RemoveAdaptorFromCatalogue
	(*CellarV2_5_RemovePositionFromCatalogue)(nil),           // 75: steward.v4.CellarV2_5.RemovePositionFromCatalogue
	(*CellarV2_5_DecreaseShareSupplyCap)(nil),                // 76: steward.v4.CellarV2_5.DecreaseShareSupplyCap
	(*CellarV2_5_SetAlternativeAssetData)(nil),               // 77: steward.v4.CellarV2_5.SetAlternativeAssetData
	(*CellarV2_5_DropAlternativeAssetData)(nil),              // 78: steward.v4.CellarV2_5.DropAlternativeAssetData
	(*CellarV2_5_AddAdaptorToCatalogue)(nil),                 // 79: steward.v4.CellarV2_5.AddAdaptorToCatalogue
	(*CellarV2_5_AddPositionToCatalogue)(nil),                // 80: steward.v4.CellarV2_5.AddPositionToCatalogue
	(*CellarV2_5_SetRebalanceDeviation)(nil),                 // 81: steward.v4.CellarV2_5.SetRebalanceDeviation
	(*CellarV2_5_SetStrategistPlatformCut)(nil),              // 82: steward.v4.CellarV2_5.SetStrategistPlatformCut
	(*CellarV2_5_IncreaseShareSupplyCap)(nil),                // 83: steward.v4.CellarV2_5.IncreaseShareSupplyCap
	(*CellarV2_5_SetSharePriceOracle)(nil),                   // 84: steward.v4.CellarV2_5.SetSharePriceOracle
	(*CellarV2_5_CachePriceRouter)(nil),                      // 85: steward.v4.CellarV2_5.CachePriceRouter
	(*CellarV2_5Governance_FunctionCall)(nil),                // 86: steward.v4.CellarV2_5Governance.FunctionCall
	(*CellarV2_5Governance_Multicall)(nil),                   // 87: steward.v4.CellarV2_5Governance.Multicall
	(*CellarV2_5Governance_AddAdaptorToCatalogue)(nil),       // 88: steward.v4.CellarV2_5Governance.AddAdaptorToCatalogue
	(*CellarV2_5Governance_AddPositionToCatalogue)(nil),      // 89: steward.v4.CellarV2_5Governance.AddPositionToCatalogue
	(*CellarV2_5Governance_SetRebalanceDeviation)(nil),       // 90: steward.v4.CellarV2_5Governance.SetRebalanceDeviation
	(*CellarV2_5Governance_SetStrategistPlatformCut)(nil),    // 91: steward.v4.CellarV2_5Governance.SetStrategistPlatformCut
	(*CellarV2_5Governance_ForcePositionOut)(nil),            // 92: steward.v4.CellarV2_5Governance.ForcePositionOut
	(*CellarV2_5Governance_ToggleIgnorePause)(nil),           // 93: steward.v4.CellarV2_5Governance.ToggleIgnorePause
	(*CellarV2_5Governance_SetAutomationActions)(nil),        // 94: steward.v4.CellarV2_5Governance.SetAutomationActions
	(*CellarV2_5Governance_IncreaseShareSupplyCap)(nil),      // 95: steward.v4.CellarV2_5Governance.IncreaseShareSupplyCap
	(*CellarV2_5Governance_SetSharePriceOracle)(nil),         // 96: steward.v4.CellarV2_5Governance.SetSharePriceOracle
	(*CellarV2_5Governance_CachePriceRouter)(nil),            // 97: steward.v4.CellarV2_5Governance.CachePriceRouter
	(*CellarV2_5Governance_InitiateShutdown)(nil),            // 98: steward.v4.CellarV2_5Governance.InitiateShutdown
	(*CellarV2_5Governance_LiftShutdown)(nil),                // 99: steward.v4.CellarV2_5Governance.LiftShutdown
	(*CellarV2_5Governance_RemoveAdaptorFromCatalogue)(nil),  // 100: steward.v4.CellarV2_5Governance.RemoveAdaptorFromCatalogue
	(*CellarV2_5Governance_RemovePositionFromCatalogue)(nil), // 101: steward.v4.CellarV2_5Governance.RemovePositionFromCatalogue
	(*CellarV2_5Governance_DecreaseShareSupplyCap)(nil),      // 102: steward.v4.CellarV2_5Governance.DecreaseShareSupplyCap
	(*CellarV2_5Governance_SetHoldingPosition)(nil),          // 103: steward.v4.CellarV2_5Governance.SetHoldingPosition
	(*CellarV2_5Governance_AddPosition)(nil),                 // 104: steward.v4.CellarV2_5Governance.AddPosition
	(*CellarV2_5Governance_CallOnAdaptor)(nil),               // 105: steward.v4.CellarV2_5Governance.CallOnAdaptor
	(*CellarV2_5Governance_RemovePosition)(nil),              // 106: steward.v4.CellarV2_5Governance.RemovePosition
	(*AaveATokenAdaptorV1Calls)(nil),                         // 107: steward.v4.AaveATokenAdaptorV1Calls
	(*AaveDebtTokenAdaptorV1Calls)(nil),                      // 108: steward.v4.AaveDebtTokenAdaptorV1Calls
	(*CompoundCTokenAdaptorV2Calls)(nil),                     // 109: steward.v4.CompoundCTokenAdaptorV2Calls
	(*AaveATokenAdaptorV2Calls)(nil),                         // 110: steward.v4.AaveATokenAdaptorV2Calls
	(*AaveDebtTokenAdaptorV2Calls)(nil),                      // 111: steward.v4.AaveDebtTokenAdaptorV2Calls
	(*AaveV3ATokenAdaptorV1Calls)(nil),                       // 112: steward.v4.AaveV3ATokenAdaptorV1Calls
	(*AaveV3DebtTokenAdaptorV1Calls)(nil),                    // 113: steward.v4.AaveV3DebtTokenAdaptorV1Calls
	(*OneInchAdaptorV1Calls)(nil),                            // 114: steward.v4.OneInchAdaptorV1Calls
	(*FeesAndReservesAdaptorV1Calls)(nil),                    // 115: steward.v4.FeesAndReservesAdaptorV1Calls
	(*ZeroXAdaptorV1Calls)(nil),                              // 116: steward.v4.ZeroXAdaptorV1Calls
	(*SwapWithUniswapAdaptorV1Calls)(nil),                    // 117: steward.v4.SwapWithUniswapAdaptorV1Calls
	(*VestingSimpleAdaptorV2Calls)(nil),                      // 118: steward.v4.VestingSimpleAdaptorV2Calls
	(*CellarAdaptorV1Calls)(nil),                             // 119: steward.v4.CellarAdaptorV1Calls
	(*UniswapV3AdaptorV2Calls)(nil),                          // 120: steward.v4.UniswapV3AdaptorV2Calls
	(*AaveV2EnableAssetAsCollateralAdaptorV1Calls)(nil),      // 121: steward.v4.AaveV2EnableAssetAsCollateralAdaptorV1Calls
	(*FTokenAdaptorV1Calls)(nil),                             // 122: steward.v4.FTokenAdaptorV1Calls
	(*MorphoAaveV2ATokenAdaptorV1Calls)(nil),                 // 123: steward.v4.MorphoAaveV2ATokenAdaptorV1Calls
	(*MorphoAaveV2DebtTokenAdaptorV1Calls)(nil),              // 124: steward.v4.MorphoAaveV2DebtTokenAdaptorV1Calls
	(*MorphoAaveV3ATokenCollateralAdaptorV1Calls)(nil),       // 125: steward.v4.MorphoAaveV3ATokenCollateralAdaptorV1Calls
	(*MorphoAaveV3ATokenP2PAdaptorV1Calls)(nil),              // 126: steward.v4.MorphoAaveV3ATokenP2PAdaptorV1Calls
	(*MorphoAaveV3DebtTokenAdaptorV1Calls)(nil),              // 127: steward.v4.MorphoAaveV3DebtTokenAdaptorV1Calls
	(*BalancerPoolAdaptorV1Calls)(nil),                       // 128: steward.v4.BalancerPoolAdaptorV1Calls
	(*LegacyCellarAdaptorV1Calls)(nil),                       // 129: steward.v4.LegacyCellarAdaptorV1Calls
	(*DebtFTokenAdaptorV1Calls)(nil),                         // 130: steward.v4.DebtFTokenAdaptorV1Calls
	(*CollateralFTokenAdaptorV1Calls)(nil),                   // 131: steward.v4.CollateralFTokenAdaptorV1Calls
	(*AaveV3DebtTokenAdaptorV1FlashLoanCalls)(nil),           // 132: steward.v4.AaveV3DebtTokenAdaptorV1FlashLoanCalls
	(*BalancerPoolAdaptorV1FlashLoanCalls)(nil),              // 133: steward.v4.BalancerPoolAdaptorV1FlashLoanCalls
	(*ConvexCurveAdaptorV1Calls)(nil),                        // 134: steward.v4.ConvexCurveAdaptorV1Calls
	(*CurveAdaptorV1Calls)(nil),                              // 135: steward.v4.CurveAdaptorV1Calls
	(*AuraERC4626AdaptorV1Calls)(nil),                        // 136: steward.v4.AuraERC4626AdaptorV1Calls
	(*MorphoBlueCollateralAdaptorV1Calls)(nil),               // 137: steward.v4.MorphoBlueCollateralAdaptorV1Calls
	(*MorphoBlueDebtAdaptorV1Calls)(nil),                     // 138: steward.v4.MorphoBlueDebtAdaptorV1Calls
	(*MorphoBlueSupplyAdaptorV1Calls)(nil),                   // 139: steward.v4.MorphoBlueSupplyAdaptorV1Calls
	(*ERC4626AdaptorV1Calls)(nil),                            // 140: steward.v4.ERC4626AdaptorV1Calls
	(*StakingAdaptorV1Calls)(nil),                            // 141: steward.v4.StakingAdaptorV1Calls
	(*PendleAdaptorV1Calls)(nil),                             // 142: steward.v4.PendleAdaptorV1Calls
}
var file_cellar_v2_proto_depIdxs = []int32{
	7,   // 0: steward.v4.CellarV2.call_on_adaptor:type_name -> steward.v4.CellarV2.CallOnAdaptor
	8,   // 1: steward.v4.CellarV2.remove_position:type_name -> steward.v4.CellarV2.RemovePosition
	9,   // 2: steward.v4.CellarV2.set_holding_position:type_name -> steward.v4.CellarV2.SetHoldingPosition
	10,  // 3: steward.v4.CellarV2.set_strategist_payout_address:type_name -> steward.v4.CellarV2.SetStrategistPayoutAddress
	11,  // 4: steward.v4.CellarV2.swap_positions:type_name -> steward.v4.CellarV2.SwapPositions
	12,  // 5: steward.v4.CellarV2.set_share_lock_period:type_name -> steward.v4.CellarV2.SetShareLockPeriod
	13,  // 6: steward.v4.CellarV2.add_position:type_name -> steward.v4.CellarV2.AddPosition
	18,  // 7: steward.v4.CellarV2.setup_adaptor:type_name -> steward.v4.CellarV2.SetupAdaptor
	14,  // 8: steward.v4.CellarV2.initiate_shutdown:type_name -> steward.v4.CellarV2.InitiateShutdown
	15,  // 9: steward.v4.CellarV2.lift_shutdown:type_name -> steward.v4.CellarV2.LiftShutdown
	16,  // 10: steward.v4.CellarV2.set_platform_fee:type_name -> steward.v4.CellarV2.SetPlatformFee
	17,  // 11: steward.v4.CellarV2.set_strategist_platform_cut:type_name -> steward.v4.CellarV2.SetStrategistPlatformCut
	19,  // 12: steward.v4.CellarV2.set_rebalance_deviation:type_name -> steward.v4.CellarV2.SetRebalanceDeviation
	20,  // 13: steward.v4.CellarV2Governance.initiate_shutdown:type_name -> steward.v4.CellarV2Governance.InitiateShutdown
	21,  // 14: steward.v4.CellarV2Governance.lift_shutdown:type_name -> steward.v4.CellarV2Governance.LiftShutdown
	22,  // 15: steward.v4.CellarV2Governance.set_platform_fee:type_name -> steward.v4.CellarV2Governance.SetPlatformFee
	23,  // 16: steward.v4.CellarV2Governance.set_strategist_platform_cut:type_name -> steward.v4.CellarV2Governance.SetStrategistPlatformCut
	24,  // 17: steward.v4.CellarV2Governance.setup_adaptor:type_name -> steward.v4.CellarV2Governance.SetupAdaptor
	25,  // 18: steward.v4.CellarV2Governance.set_rebalance_deviation:type_name -> steward.v4.CellarV2Governance.SetRebalanceDeviation
	26,  // 19: steward.v4.CellarV2_2.function_call:type_name -> steward.v4.CellarV2_2.FunctionCall
	35,  // 20: steward.v4.CellarV2_2.multicall:type_name -> steward.v4.CellarV2_2.Multicall
	44,  // 21: steward.v4.CellarV2_2Governance.function_call:type_name -> steward.v4.CellarV2_2Governance.FunctionCall
	45,  // 22: steward.v4.CellarV2_2Governance.multicall:type_name -> steward.v4.CellarV2_2Governance.Multicall
	63,  // 23: steward.v4.CellarV2_5.function_call:type_name -> steward.v4.CellarV2_5.FunctionCall
	73,  // 24: steward.v4.CellarV2_5.multicall:type_name -> steward.v4.CellarV2_5.Multicall
	86,  // 25: steward.v4.CellarV2_5Governance.function_call:type_name -> steward.v4.CellarV2_5Governance.FunctionCall
	87,  // 26: steward.v4.CellarV2_5Governance.multicall:type_name -> steward.v4.CellarV2_5Governance.Multicall
	107, // 27: steward.v4.AdaptorCall.aave_a_token_v1_calls:type_name -> steward.v4.AaveATokenAdaptorV1Calls
	108, // 28: steward.v4.AdaptorCall.aave_debt_token_v1_calls:type_name -> steward.v4.AaveDebtTokenAdaptorV1Calls
	109, // 29: steward.v4.AdaptorCall.compound_c_token_v2_calls:type_name -> steward.v4.CompoundCTokenAdaptorV2Calls
	110, // 30: steward.v4.AdaptorCall.aave_a_token_v2_calls:type_name -> steward.v4.AaveATokenAdaptorV2Calls
	111, // 31: steward.v4.AdaptorCall.aave_debt_token_v2_calls:type_name -> steward.v4.AaveDebtTokenAdaptorV2Calls
	112, // 32: steward.v4.AdaptorCall.aave_v3_a_token_v1_calls:type_name -> steward.v4.AaveV3ATokenAdaptorV1Calls
	113, // 33: steward.v4.AdaptorCall.aave_v3_debt_token_v1_calls:type_name -> steward.v4.AaveV3DebtTokenAdaptorV1Calls
	114, // 34: steward.v4.AdaptorCall.one_inch_v1_calls:type_name -> steward.v4.OneInchAdaptorV1Calls
	115, // 35: steward.v4.AdaptorCall.fees_and_reserves_v1_calls:type_name -> steward.v4.FeesAndReservesAdaptorV1Calls
	116, // 36: steward.v4.AdaptorCall.zero_x_v1_calls:type_name -> steward.v4.ZeroXAdaptorV1Calls
	117, // 37: steward.v4.AdaptorCall.swap_with_uniswap_v1_calls:type_name -> steward.v4.SwapWithUniswapAdaptorV1Calls
	118, // 38: steward.v4.AdaptorCall.vesting_simple_v2_calls:type_name -> steward.v4.VestingSimpleAdaptorV2Calls
	119, // 39: steward.v4.AdaptorCall.cellar_v1_calls:type_name -> steward.v4.CellarAdaptorV1Calls
	120, // 40: steward.v4.AdaptorCall.uniswap_v3_v2_calls:type_name -> steward.v4.UniswapV3AdaptorV2Calls
	121, // 41: steward.v4.AdaptorCall.aave_v2_enable_asset_as_collateral_v1_calls:type_name -> steward.v4.AaveV2EnableAssetAsCollateralAdaptorV1Calls
	122, // 42: steward.v4.AdaptorCall.f_token_v1_calls:type_name -> steward.v4.FTokenAdaptorV1Calls
	123, // 43: steward.v4.AdaptorCall.morpho_aave_v2_a_token_v1_calls:type_name -> steward.v4.MorphoAaveV2ATokenAdaptorV1Calls
	124, // 44: steward.v4.AdaptorCall.morpho_aave_v2_debt_token_v1_calls:type_name -> steward.v4.MorphoAaveV2DebtTokenAdaptorV1Calls
	125, // 45: steward.v4.AdaptorCall.morpho_aave_v3_a_token_collateral_v1_calls:type_name -> steward.v4.MorphoAaveV3ATokenCollateralAdaptorV1Calls
	126, // 46: steward.v4.AdaptorCall.morpho_aave_v3_a_token_p2p_v1_calls:type_name -> steward.v4.MorphoAaveV3ATokenP2PAdaptorV1Calls
	127, // 47: steward.v4.AdaptorCall.morpho_aave_v3_debt_token_v1_calls:type_name -> steward.v4.MorphoAaveV3DebtTokenAdaptorV1Calls
	128, // 48: steward.v4.AdaptorCall.balancer_pool_v1_calls:type_name -> steward.v4.BalancerPoolAdaptorV1Calls
	129, // 49: steward.v4.AdaptorCall.legacy_cellar_v1_calls:type_name -> steward.v4.LegacyCellarAdaptorV1Calls
	130, // 50: steward.v4.AdaptorCall.debt_f_token_v1_calls:type_name -> steward.v4.DebtFTokenAdaptorV1Calls
	131, // 51: steward.v4.AdaptorCall.collateral_f_token_v1_calls:type_name -> steward.v4.CollateralFTokenAdaptorV1Calls
	132, // 52: steward.v4.AdaptorCall.aave_v3_debt_token_v1_flash_loan_calls:type_name -> steward.v4.AaveV3DebtTokenAdaptorV1FlashLoanCalls
	133, // 53: steward.v4.AdaptorCall.balancer_pool_v1_flash_loan_calls:type_name -> steward.v4.BalancerPoolAdaptorV1FlashLoanCalls
	134, // 54: steward.v4.AdaptorCall.convex_curve_v1_calls:type_name -> steward.v4.ConvexCurveAdaptorV1Calls
	135, // 55: steward.v4.AdaptorCall.curve_v1_calls:type_name -> steward.v4.CurveAdaptorV1Calls
	136, // 56: steward.v4.AdaptorCall.aura_erc4626_v1_calls:type_name -> steward.v4.AuraERC4626AdaptorV1Calls
	137, // 57: steward.v4.AdaptorCall.morpho_blue_collateral_v1_calls:type_name -> steward.v4.MorphoBlueCollateralAdaptorV1Calls
	138, // 58: steward.v4.AdaptorCall.morpho_blue_debt_v1_calls:type_name -> steward.v4.MorphoBlueDebtAdaptorV1Calls
	139, // 59: steward.v4.AdaptorCall.morpho_blue_supply_v1_calls:type_name -> steward.v4.MorphoBlueSupplyAdaptorV1Calls
	140, // 60: steward.v4.AdaptorCall.erc4626_v1_calls:type_name -> steward.v4.ERC4626AdaptorV1Calls
	141, // 61: steward.v4.AdaptorCall.staking_v1_calls:type_name -> steward.v4.StakingAdaptorV1Calls
	142, // 62: steward.v4.AdaptorCall.pendle_v1_calls:type_name -> steward.v4.PendleAdaptorV1Calls
	6,   // 63: steward.v4.CellarV2.CallOnAdaptor.data:type_name -> steward.v4.AdaptorCall
	27,  // 64: steward.v4.CellarV2_2.FunctionCall.add_position:type_name -> steward.v4.CellarV2_2.AddPosition
	28,  // 65: steward.v4.CellarV2_2.FunctionCall.call_on_adaptor:type_name -> steward.v4.CellarV2_2.CallOnAdaptor
	29,  // 66: steward.v4.CellarV2_2.FunctionCall.remove_position:type_name -> steward.v4.CellarV2_2.RemovePosition
	30,  // 67: steward.v4.CellarV2_2.FunctionCall.remove_adaptor_from_catalogue:type_name -> steward.v4.CellarV2_2.RemoveAdaptorFromCatalogue
	31,  // 68: steward.v4.CellarV2_2.FunctionCall.remove_position_from_catalogue:type_name -> steward.v4.CellarV2_2.RemovePositionFromCatalogue
	32,  // 69: steward.v4.CellarV2_2.FunctionCall.set_holding_position:type_name -> steward.v4.CellarV2_2.SetHoldingPosition
	33,  // 70: steward.v4.CellarV2_2.FunctionCall.set_strategist_payout_address:type_name -> steward.v4.CellarV2_2.SetStrategistPayoutAddress
	34,  // 71: steward.v4.CellarV2_2.FunctionCall.swap_positions:type_name -> steward.v4.CellarV2_2.SwapPositions
	36,  // 72: steward.v4.CellarV2_2.FunctionCall.add_adaptor_to_catalogue:type_name -> steward.v4.CellarV2_2.AddAdaptorToCatalogue
	37,  // 73: steward.v4.CellarV2_2.FunctionCall.add_position_to_catalogue:type_name -> steward.v4.CellarV2_2.AddPositionToCatalogue
	39,  // 74: steward.v4.CellarV2_2.FunctionCall.set_rebalance_deviation:type_name -> steward.v4.CellarV2_2.SetRebalanceDeviation
	38,  // 75: steward.v4.CellarV2_2.FunctionCall.set_share_lock_period:type_name -> steward.v4.CellarV2_2.SetShareLockPeriod
	41,  // 76: steward.v4.CellarV2_2.FunctionCall.set_strategist_platform_cut:type_name -> steward.v4.CellarV2_2.SetStrategistPlatformCut
	40,  // 77: steward.v4.CellarV2_2.FunctionCall.initiate_shutdown:type_name -> steward.v4.CellarV2_2.InitiateShutdown
	42,  // 78: steward.v4.CellarV2_2.FunctionCall.lift_shutdown:type_name -> steward.v4.CellarV2_2.LiftShutdown
	43,  // 79: steward.v4.CellarV2_2.FunctionCall.cache_price_router:type_name -> steward.v4.CellarV2_2.CachePriceRouter
	6,   // 80: steward.v4.CellarV2_2.CallOnAdaptor.data:type_name -> steward.v4.AdaptorCall
	26,  // 81: steward.v4.CellarV2_2.Multicall.function_calls:type_name -> steward.v4.CellarV2_2.FunctionCall
	46,  // 82: steward.v4.CellarV2_2Governance.FunctionCall.add_adaptor_to_catalogue:type_name -> steward.v4.CellarV2_2Governance.AddAdaptorToCatalogue
	47,  // 83: steward.v4.CellarV2_2Governance.FunctionCall.add_position_to_catalogue:type_name -> steward.v4.CellarV2_2Governance.AddPositionToCatalogue
	49,  // 84: steward.v4.CellarV2_2Governance.FunctionCall.set_rebalance_deviation:type_name -> steward.v4.CellarV2_2Governance.SetRebalanceDeviation
	48,  // 85: steward.v4.CellarV2_2Governance.FunctionCall.set_share_lock_period:type_name -> steward.v4.CellarV2_2Governance.SetShareLockPeriod
	51,  // 86: steward.v4.CellarV2_2Governance.FunctionCall.set_strategist_platform_cut:type_name -> steward.v4.CellarV2_2Governance.SetStrategistPlatformCut
	50,  // 87: steward.v4.CellarV2_2Governance.FunctionCall.initiate_shutdown:type_name -> steward.v4.CellarV2_2Governance.InitiateShutdown
	52,  // 88: steward.v4.CellarV2_2Governance.FunctionCall.lift_shutdown:type_name -> steward.v4.CellarV2_2Governance.LiftShutdown
	53,  // 89: steward.v4.CellarV2_2Governance.FunctionCall.force_position_out:type_name -> steward.v4.CellarV2_2Governance.ForcePositionOut
	54,  // 90: steward.v4.CellarV2_2Governance.FunctionCall.toggle_ignore_pause:type_name -> steward.v4.CellarV2_2Governance.ToggleIgnorePause
	55,  // 91: steward.v4.CellarV2_2Governance.FunctionCall.cache_price_router:type_name -> steward.v4.CellarV2_2Governance.CachePriceRouter
	56,  // 92: steward.v4.CellarV2_2Governance.FunctionCall.add_position:type_name -> steward.v4.CellarV2_2Governance.AddPosition
	57,  // 93: steward.v4.CellarV2_2Governance.FunctionCall.call_on_adaptor:type_name -> steward.v4.CellarV2_2Governance.CallOnAdaptor
	58,  // 94: steward.v4.CellarV2_2Governance.FunctionCall.remove_position:type_name -> steward.v4.CellarV2_2Governance.RemovePosition
	59,  // 95: steward.v4.CellarV2_2Governance.FunctionCall.remove_adaptor_from_catalogue:type_name -> steward.v4.CellarV2_2Governance.RemoveAdaptorFromCatalogue
	60,  // 96: steward.v4.CellarV2_2Governance.FunctionCall.remove_position_from_catalogue:type_name -> steward.v4.CellarV2_2Governance.RemovePositionFromCatalogue
	61,  // 97: steward.v4.CellarV2_2Governance.FunctionCall.set_holding_position:type_name -> steward.v4.CellarV2_2Governance.SetHoldingPosition
	62,  // 98: steward.v4.CellarV2_2Governance.FunctionCall.swap_positions:type_name -> steward.v4.CellarV2_2Governance.SwapPositions
	44,  // 99: steward.v4.CellarV2_2Governance.Multicall.function_calls:type_name -> steward.v4.CellarV2_2Governance.FunctionCall
	6,   // 100: steward.v4.CellarV2_2Governance.CallOnAdaptor.data:type_name -> steward.v4.AdaptorCall
	64,  // 101: steward.v4.CellarV2_5.FunctionCall.add_position:type_name -> steward.v4.CellarV2_5.AddPosition
	65,  // 102: steward.v4.CellarV2_5.FunctionCall.call_on_adaptor:type_name -> steward.v4.CellarV2_5.CallOnAdaptor
	66,  // 103: steward.v4.CellarV2_5.FunctionCall.remove_position:type_name -> steward.v4.CellarV2_5.RemovePosition
	67,  // 104: steward.v4.CellarV2_5.FunctionCall.set_holding_position:type_name -> steward.v4.CellarV2_5.SetHoldingPosition
	68,  // 105: steward.v4.CellarV2_5.FunctionCall.set_strategist_payout_address:type_name -> steward.v4.CellarV2_5.SetStrategistPayoutAddress
	69,  // 106: steward.v4.CellarV2_5.FunctionCall.swap_positions:type_name -> steward.v4.CellarV2_5.SwapPositions
	70,  // 107: steward.v4.CellarV2_5.FunctionCall.set_share_lock_period:type_name -> steward.v4.CellarV2_5.SetShareLockPeriod
	71,  // 108: steward.v4.CellarV2_5.FunctionCall.initiate_shutdown:type_name -> steward.v4.CellarV2_5.InitiateShutdown
	72,  // 109: steward.v4.CellarV2_5.FunctionCall.lift_shutdown:type_name -> steward.v4.CellarV2_5.LiftShutdown
	74,  // 110: steward.v4.CellarV2_5.FunctionCall.remove_adaptor_from_catalogue:type_name -> steward.v4.CellarV2_5.RemoveAdaptorFromCatalogue
	75,  // 111: steward.v4.CellarV2_5.FunctionCall.remove_position_from_catalogue:type_name -> steward.v4.CellarV2_5.RemovePositionFromCatalogue
	76,  // 112: steward.v4.CellarV2_5.FunctionCall.decrease_share_supply_cap:type_name -> steward.v4.CellarV2_5.DecreaseShareSupplyCap
	77,  // 113: steward.v4.CellarV2_5.FunctionCall.set_alternative_asset_data:type_name -> steward.v4.CellarV2_5.SetAlternativeAssetData
	78,  // 114: steward.v4.CellarV2_5.FunctionCall.drop_alternative_asset_data:type_name -> steward.v4.CellarV2_5.DropAlternativeAssetData
	79,  // 115: steward.v4.CellarV2_5.FunctionCall.add_adaptor_to_catalogue:type_name -> steward.v4.CellarV2_5.AddAdaptorToCatalogue
	80,  // 116: steward.v4.CellarV2_5.FunctionCall.add_position_to_catalogue:type_name -> steward.v4.CellarV2_5.AddPositionToCatalogue
	81,  // 117: steward.v4.CellarV2_5.FunctionCall.set_rebalance_deviation:type_name -> steward.v4.CellarV2_5.SetRebalanceDeviation
	82,  // 118: steward.v4.CellarV2_5.FunctionCall.set_strategist_platform_cut:type_name -> steward.v4.CellarV2_5.SetStrategistPlatformCut
	84,  // 119: steward.v4.CellarV2_5.FunctionCall.set_share_price_oracle:type_name -> steward.v4.CellarV2_5.SetSharePriceOracle
	83,  // 120: steward.v4.CellarV2_5.FunctionCall.increase_share_supply_cap:type_name -> steward.v4.CellarV2_5.IncreaseShareSupplyCap
	85,  // 121: steward.v4.CellarV2_5.FunctionCall.cache_price_router:type_name -> steward.v4.CellarV2_5.CachePriceRouter
	6,   // 122: steward.v4.CellarV2_5.CallOnAdaptor.data:type_name -> steward.v4.AdaptorCall
	63,  // 123: steward.v4.CellarV2_5.Multicall.function_calls:type_name -> steward.v4.CellarV2_5.FunctionCall
	88,  // 124: steward.v4.CellarV2_5Governance.FunctionCall.add_adaptor_to_catalogue:type_name -> steward.v4.CellarV2_5Governance.AddAdaptorToCatalogue
	89,  // 125: steward.v4.CellarV2_5Governance.FunctionCall.add_position_to_catalogue:type_name -> steward.v4.CellarV2_5Governance.AddPositionToCatalogue
	90,  // 126: steward.v4.CellarV2_5Governance.FunctionCall.set_rebalance_deviation:type_name -> steward.v4.CellarV2_5Governance.SetRebalanceDeviation
	91,  // 127: steward.v4.CellarV2_5Governance.FunctionCall.set_strategist_platform_cut:type_name -> steward.v4.CellarV2_5Governance.SetStrategistPlatformCut
	92,  // 128: steward.v4.CellarV2_5Governance.FunctionCall.force_position_out:type_name -> steward.v4.CellarV2_5Governance.ForcePositionOut
	93,  // 129: steward.v4.CellarV2_5Governance.FunctionCall.toggle_ignore_pause:type_name -> steward.v4.CellarV2_5Governance.ToggleIgnorePause
	96,  // 130: steward.v4.CellarV2_5Governance.FunctionCall.set_share_price_oracle:type_name -> steward.v4.CellarV2_5Governance.SetSharePriceOracle
	95,  // 131: steward.v4.CellarV2_5Governance.FunctionCall.increase_share_supply_cap:type_name -> steward.v4.CellarV2_5Governance.IncreaseShareSupplyCap
	94,  // 132: steward.v4.CellarV2_5Governance.FunctionCall.set_automation_actions:type_name -> steward.v4.CellarV2_5Governance.SetAutomationActions
	97,  // 133: steward.v4.CellarV2_5Governance.FunctionCall.cache_price_router:type_name -> steward.v4.CellarV2_5Governance.CachePriceRouter
	98,  // 134: steward.v4.CellarV2_5Governance.FunctionCall.initiate_shutdown:type_name -> steward.v4.CellarV2_5Governance.InitiateShutdown
	99,  // 135: steward.v4.CellarV2_5Governance.FunctionCall.lift_shutdown:type_name -> steward.v4.CellarV2_5Governance.LiftShutdown
	100, // 136: steward.v4.CellarV2_5Governance.FunctionCall.remove_adaptor_from_catalogue:type_name -> steward.v4.CellarV2_5Governance.RemoveAdaptorFromCatalogue
	101, // 137: steward.v4.CellarV2_5Governance.FunctionCall.remove_position_from_catalogue:type_name -> steward.v4.CellarV2_5Governance.RemovePositionFromCatalogue
	102, // 138: steward.v4.CellarV2_5Governance.FunctionCall.decrease_share_supply_cap:type_name -> steward.v4.CellarV2_5Governance.DecreaseShareSupplyCap
	103, // 139: steward.v4.CellarV2_5Governance.FunctionCall.set_holding_position:type_name -> steward.v4.CellarV2_5Governance.SetHoldingPosition
	104, // 140: steward.v4.CellarV2_5Governance.FunctionCall.add_position:type_name -> steward.v4.CellarV2_5Governance.AddPosition
	105, // 141: steward.v4.CellarV2_5Governance.FunctionCall.call_on_adaptor:type_name -> steward.v4.CellarV2_5Governance.CallOnAdaptor
	106, // 142: steward.v4.CellarV2_5Governance.FunctionCall.remove_position:type_name -> steward.v4.CellarV2_5Governance.RemovePosition
	86,  // 143: steward.v4.CellarV2_5Governance.Multicall.function_calls:type_name -> steward.v4.CellarV2_5Governance.FunctionCall
	6,   // 144: steward.v4.CellarV2_5Governance.CallOnAdaptor.data:type_name -> steward.v4.AdaptorCall
	145, // [145:145] is the sub-list for method output_type
	145, // [145:145] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_cellar_v2_proto_init() }
func file_cellar_v2_proto_init() {
	if File_cellar_v2_proto != nil {
		return
	}
	file_a_token_proto_init()
	file_debt_token_proto_init()
	file_aave_v3_a_token_proto_init()
	file_aave_v3_debt_token_proto_init()
	file_aave_v3_debt_token_flash_loan_proto_init()
	file_balancer_pool_proto_init()
	file_balancer_pool_flash_loan_proto_init()
	file_c_token_proto_init()
	file_erc4626_proto_init()
	file_f_token_proto_init()
	file_morpho_aave_v2_a_token_proto_init()
	file_morpho_aave_v2_debt_token_proto_init()
	file_morpho_aave_v3_a_token_collateral_proto_init()
	file_morpho_aave_v3_a_token_p2p_proto_init()
	file_morpho_aave_v3_debt_token_proto_init()
	file_morpho_blue_collateral_proto_init()
	file_morpho_blue_debt_proto_init()
	file_morpho_blue_supply_proto_init()
	file_uniswap_v3_proto_init()
	file_swap_with_uniswap_proto_init()
	file_fees_and_reserves_proto_init()
	file_zero_x_proto_init()
	file_oneinch_proto_init()
	file_vesting_simple_proto_init()
	file_cellar_adaptor_proto_init()
	file_aave_v2_enable_asset_as_collateral_adaptor_proto_init()
	file_legacy_cellar_adaptor_proto_init()
	file_debt_f_token_proto_init()
	file_collateral_f_token_proto_init()
	file_aura_erc4626_proto_init()
	file_convex_curve_proto_init()
	file_curve_proto_init()
	file_staking_proto_init()
	file_pendle_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cellar_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetPlatformFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetupAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_SetPlatformFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_SetupAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_RemoveAdaptorFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_RemovePositionFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_Multicall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_AddAdaptorToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_AddPositionToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_CachePriceRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_Multicall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_AddAdaptorToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_AddPositionToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_ForcePositionOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_ToggleIgnorePause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_CachePriceRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_RemoveAdaptorFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_RemovePositionFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2Governance_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_Multicall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_RemoveAdaptorFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_RemovePositionFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_DecreaseShareSupplyCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SetAlternativeAssetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_DropAlternativeAssetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_AddAdaptorToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_AddPositionToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_IncreaseShareSupplyCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_SetSharePriceOracle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5_CachePriceRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_Multicall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_AddAdaptorToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_AddPositionToCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_ForcePositionOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_ToggleIgnorePause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_SetAutomationActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_IncreaseShareSupplyCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_SetSharePriceOracle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_CachePriceRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_RemoveAdaptorFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_RemovePositionFromCatalogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_DecreaseShareSupplyCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_5Governance_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cellar_v2_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CellarV2_CallOnAdaptor_)(nil),
		(*CellarV2_RemovePosition_)(nil),
		(*CellarV2_SetHoldingPosition_)(nil),
		(*CellarV2_SetStrategistPayoutAddress_)(nil),
		(*CellarV2_SwapPositions_)(nil),
		(*CellarV2_SetShareLockPeriod_)(nil),
		(*CellarV2_AddPosition_)(nil),
		(*CellarV2_SetupAdaptor_)(nil),
		(*CellarV2_InitiateShutdown_)(nil),
		(*CellarV2_LiftShutdown_)(nil),
		(*CellarV2_SetPlatformFee_)(nil),
		(*CellarV2_SetStrategistPlatformCut_)(nil),
		(*CellarV2_SetRebalanceDeviation_)(nil),
	}
	file_cellar_v2_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CellarV2Governance_InitiateShutdown_)(nil),
		(*CellarV2Governance_LiftShutdown_)(nil),
		(*CellarV2Governance_SetPlatformFee_)(nil),
		(*CellarV2Governance_SetStrategistPlatformCut_)(nil),
		(*CellarV2Governance_SetupAdaptor_)(nil),
		(*CellarV2Governance_SetRebalanceDeviation_)(nil),
	}
	file_cellar_v2_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CellarV2_2_FunctionCall_)(nil),
		(*CellarV2_2_Multicall_)(nil),
	}
	file_cellar_v2_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CellarV2_2Governance_FunctionCall_)(nil),
		(*CellarV2_2Governance_Multicall_)(nil),
	}
	file_cellar_v2_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CellarV2_5_FunctionCall_)(nil),
		(*CellarV2_5_Multicall_)(nil),
	}
	file_cellar_v2_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CellarV2_5Governance_FunctionCall_)(nil),
		(*CellarV2_5Governance_Multicall_)(nil),
	}
	file_cellar_v2_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AdaptorCall_AaveATokenV1Calls)(nil),
		(*AdaptorCall_AaveDebtTokenV1Calls)(nil),
		(*AdaptorCall_CompoundCTokenV2Calls)(nil),
		(*AdaptorCall_AaveATokenV2Calls)(nil),
		(*AdaptorCall_AaveDebtTokenV2Calls)(nil),
		(*AdaptorCall_AaveV3ATokenV1Calls)(nil),
		(*AdaptorCall_AaveV3DebtTokenV1Calls)(nil),
		(*AdaptorCall_OneInchV1Calls)(nil),
		(*AdaptorCall_FeesAndReservesV1Calls)(nil),
		(*AdaptorCall_ZeroXV1Calls)(nil),
		(*AdaptorCall_SwapWithUniswapV1Calls)(nil),
		(*AdaptorCall_VestingSimpleV2Calls)(nil),
		(*AdaptorCall_CellarV1Calls)(nil),
		(*AdaptorCall_UniswapV3V2Calls)(nil),
		(*AdaptorCall_AaveV2EnableAssetAsCollateralV1Calls)(nil),
		(*AdaptorCall_FTokenV1Calls)(nil),
		(*AdaptorCall_MorphoAaveV2ATokenV1Calls)(nil),
		(*AdaptorCall_MorphoAaveV2DebtTokenV1Calls)(nil),
		(*AdaptorCall_MorphoAaveV3ATokenCollateralV1Calls)(nil),
		(*AdaptorCall_MorphoAaveV3ATokenP2PV1Calls)(nil),
		(*AdaptorCall_MorphoAaveV3DebtTokenV1Calls)(nil),
		(*AdaptorCall_BalancerPoolV1Calls)(nil),
		(*AdaptorCall_LegacyCellarV1Calls)(nil),
		(*AdaptorCall_DebtFTokenV1Calls)(nil),
		(*AdaptorCall_CollateralFTokenV1Calls)(nil),
		(*AdaptorCall_AaveV3DebtTokenV1FlashLoanCalls)(nil),
		(*AdaptorCall_BalancerPoolV1FlashLoanCalls)(nil),
		(*AdaptorCall_ConvexCurveV1Calls)(nil),
		(*AdaptorCall_CurveV1Calls)(nil),
		(*AdaptorCall_AuraErc4626V1Calls)(nil),
		(*AdaptorCall_MorphoBlueCollateralV1Calls)(nil),
		(*AdaptorCall_MorphoBlueDebtV1Calls)(nil),
		(*AdaptorCall_MorphoBlueSupplyV1Calls)(nil),
		(*AdaptorCall_Erc4626V1Calls)(nil),
		(*AdaptorCall_StakingV1Calls)(nil),
		(*AdaptorCall_PendleV1Calls)(nil),
	}
	file_cellar_v2_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*CellarV2_2_FunctionCall_AddPosition)(nil),
		(*CellarV2_2_FunctionCall_CallOnAdaptor)(nil),
		(*CellarV2_2_FunctionCall_RemovePosition)(nil),
		(*CellarV2_2_FunctionCall_RemoveAdaptorFromCatalogue)(nil),
		(*CellarV2_2_FunctionCall_RemovePositionFromCatalogue)(nil),
		(*CellarV2_2_FunctionCall_SetHoldingPosition)(nil),
		(*CellarV2_2_FunctionCall_SetStrategistPayoutAddress)(nil),
		(*CellarV2_2_FunctionCall_SwapPositions)(nil),
		(*CellarV2_2_FunctionCall_AddAdaptorToCatalogue)(nil),
		(*CellarV2_2_FunctionCall_AddPositionToCatalogue)(nil),
		(*CellarV2_2_FunctionCall_SetRebalanceDeviation)(nil),
		(*CellarV2_2_FunctionCall_SetShareLockPeriod)(nil),
		(*CellarV2_2_FunctionCall_SetStrategistPlatformCut)(nil),
		(*CellarV2_2_FunctionCall_InitiateShutdown)(nil),
		(*CellarV2_2_FunctionCall_LiftShutdown)(nil),
		(*CellarV2_2_FunctionCall_CachePriceRouter)(nil),
	}
	file_cellar_v2_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*CellarV2_2Governance_FunctionCall_AddAdaptorToCatalogue)(nil),
		(*CellarV2_2Governance_FunctionCall_AddPositionToCatalogue)(nil),
		(*CellarV2_2Governance_FunctionCall_SetRebalanceDeviation)(nil),
		(*CellarV2_2Governance_FunctionCall_SetShareLockPeriod)(nil),
		(*CellarV2_2Governance_FunctionCall_SetStrategistPlatformCut)(nil),
		(*CellarV2_2Governance_FunctionCall_InitiateShutdown)(nil),
		(*CellarV2_2Governance_FunctionCall_LiftShutdown)(nil),
		(*CellarV2_2Governance_FunctionCall_ForcePositionOut)(nil),
		(*CellarV2_2Governance_FunctionCall_ToggleIgnorePause)(nil),
		(*CellarV2_2Governance_FunctionCall_CachePriceRouter)(nil),
		(*CellarV2_2Governance_FunctionCall_AddPosition)(nil),
		(*CellarV2_2Governance_FunctionCall_CallOnAdaptor)(nil),
		(*CellarV2_2Governance_FunctionCall_RemovePosition)(nil),
		(*CellarV2_2Governance_FunctionCall_RemoveAdaptorFromCatalogue)(nil),
		(*CellarV2_2Governance_FunctionCall_RemovePositionFromCatalogue)(nil),
		(*CellarV2_2Governance_FunctionCall_SetHoldingPosition)(nil),
		(*CellarV2_2Governance_FunctionCall_SwapPositions)(nil),
	}
	file_cellar_v2_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*CellarV2_5_FunctionCall_AddPosition)(nil),
		(*CellarV2_5_FunctionCall_CallOnAdaptor)(nil),
		(*CellarV2_5_FunctionCall_RemovePosition)(nil),
		(*CellarV2_5_FunctionCall_SetHoldingPosition)(nil),
		(*CellarV2_5_FunctionCall_SetStrategistPayoutAddress)(nil),
		(*CellarV2_5_FunctionCall_SwapPositions)(nil),
		(*CellarV2_5_FunctionCall_SetShareLockPeriod)(nil),
		(*CellarV2_5_FunctionCall_InitiateShutdown)(nil),
		(*CellarV2_5_FunctionCall_LiftShutdown)(nil),
		(*CellarV2_5_FunctionCall_RemoveAdaptorFromCatalogue)(nil),
		(*CellarV2_5_FunctionCall_RemovePositionFromCatalogue)(nil),
		(*CellarV2_5_FunctionCall_DecreaseShareSupplyCap)(nil),
		(*CellarV2_5_FunctionCall_SetAlternativeAssetData)(nil),
		(*CellarV2_5_FunctionCall_DropAlternativeAssetData)(nil),
		(*CellarV2_5_FunctionCall_AddAdaptorToCatalogue)(nil),
		(*CellarV2_5_FunctionCall_AddPositionToCatalogue)(nil),
		(*CellarV2_5_FunctionCall_SetRebalanceDeviation)(nil),
		(*CellarV2_5_FunctionCall_SetStrategistPlatformCut)(nil),
		(*CellarV2_5_FunctionCall_SetSharePriceOracle)(nil),
		(*CellarV2_5_FunctionCall_IncreaseShareSupplyCap)(nil),
		(*CellarV2_5_FunctionCall_CachePriceRouter)(nil),
	}
	file_cellar_v2_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*CellarV2_5Governance_FunctionCall_AddAdaptorToCatalogue)(nil),
		(*CellarV2_5Governance_FunctionCall_AddPositionToCatalogue)(nil),
		(*CellarV2_5Governance_FunctionCall_SetRebalanceDeviation)(nil),
		(*CellarV2_5Governance_FunctionCall_SetStrategistPlatformCut)(nil),
		(*CellarV2_5Governance_FunctionCall_ForcePositionOut)(nil),
		(*CellarV2_5Governance_FunctionCall_ToggleIgnorePause)(nil),
		(*CellarV2_5Governance_FunctionCall_SetSharePriceOracle)(nil),
		(*CellarV2_5Governance_FunctionCall_IncreaseShareSupplyCap)(nil),
		(*CellarV2_5Governance_FunctionCall_SetAutomationActions)(nil),
		(*CellarV2_5Governance_FunctionCall_CachePriceRouter)(nil),
		(*CellarV2_5Governance_FunctionCall_InitiateShutdown)(nil),
		(*CellarV2_5Governance_FunctionCall_LiftShutdown)(nil),
		(*CellarV2_5Governance_FunctionCall_RemoveAdaptorFromCatalogue)(nil),
		(*CellarV2_5Governance_FunctionCall_RemovePositionFromCatalogue)(nil),
		(*CellarV2_5Governance_FunctionCall_DecreaseShareSupplyCap)(nil),
		(*CellarV2_5Governance_FunctionCall_SetHoldingPosition)(nil),
		(*CellarV2_5Governance_FunctionCall_AddPosition)(nil),
		(*CellarV2_5Governance_FunctionCall_CallOnAdaptor)(nil),
		(*CellarV2_5Governance_FunctionCall_RemovePosition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellar_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   107,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cellar_v2_proto_goTypes,
		DependencyIndexes: file_cellar_v2_proto_depIdxs,
		MessageInfos:      file_cellar_v2_proto_msgTypes,
	}.Build()
	File_cellar_v2_proto = out.File
	file_cellar_v2_proto_rawDesc = nil
	file_cellar_v2_proto_goTypes = nil
	file_cellar_v2_proto_depIdxs = nil
}

//
// Protos for function calls to the Curve adaptor.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: curve.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents call data for the Curve adaptor V1
type CurveAdaptorV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*CurveAdaptorV1_RevokeApproval
	//	*CurveAdaptorV1_AddLiquidity_
	//	*CurveAdaptorV1_AddLiquidityEth
	//	*CurveAdaptorV1_RemoveLiquidity_
	//	*CurveAdaptorV1_RemoveLiquidityEth
	//	*CurveAdaptorV1_StakeInGauge_
	//	*CurveAdaptorV1_UnstakeFromGauge_
	//	*CurveAdaptorV1_ClaimRewards_
	Function isCurveAdaptorV1_Function `protobuf_oneof:"function"`
}

func (x *CurveAdaptorV1) Reset() {
	*x = CurveAdaptorV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1) ProtoMessage() {}

func (x *CurveAdaptorV1) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0}
}

func (m *CurveAdaptorV1) GetFunction() isCurveAdaptorV1_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CurveAdaptorV1) GetRevokeApproval() *RevokeApproval {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_RevokeApproval); ok {
		return x.RevokeApproval
	}
	return nil
}

func (x *CurveAdaptorV1) GetAddLiquidity() *CurveAdaptorV1_AddLiquidity {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_AddLiquidity_); ok {
		return x.AddLiquidity
	}
	return nil
}

func (x *CurveAdaptorV1) GetAddLiquidityEth() *CurveAdaptorV1_AddLiquidityETH {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_AddLiquidityEth); ok {
		return x.AddLiquidityEth
	}
	return nil
}

func (x *CurveAdaptorV1) GetRemoveLiquidity() *CurveAdaptorV1_RemoveLiquidity {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_RemoveLiquidity_); ok {
		return x.RemoveLiquidity
	}
	return nil
}

func (x *CurveAdaptorV1) GetRemoveLiquidityEth() *CurveAdaptorV1_RemoveLiquidityETH {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_RemoveLiquidityEth); ok {
		return x.RemoveLiquidityEth
	}
	return nil
}

func (x *CurveAdaptorV1) GetStakeInGauge() *CurveAdaptorV1_StakeInGauge {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_StakeInGauge_); ok {
		return x.StakeInGauge
	}
	return nil
}

func (x *CurveAdaptorV1) GetUnstakeFromGauge() *CurveAdaptorV1_UnstakeFromGauge {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_UnstakeFromGauge_); ok {
		return x.UnstakeFromGauge
	}
	return nil
}

func (x *CurveAdaptorV1) GetClaimRewards() *CurveAdaptorV1_ClaimRewards {
	if x, ok := x.GetFunction().(*CurveAdaptorV1_ClaimRewards_); ok {
		return x.ClaimRewards
	}
	return nil
}

type isCurveAdaptorV1_Function interface {
	isCurveAdaptorV1_Function()
}

type CurveAdaptorV1_RevokeApproval struct {
	// Represents function `revokeApproval(ERC20 asset, address spender)`
	RevokeApproval *RevokeApproval `protobuf:"bytes,1,opt,name=revoke_approval,json=revokeApproval,proto3,oneof"`
}

type CurveAdaptorV1_AddLiquidity_ struct {
	// Represents function `addLiquidity(address pool, ERC20 lpToken, uint256[] orderedUnderlyingTokenAmounts, uint256 minLPAmount, CurveGauge gauge, bytes4 selector)`
	AddLiquidity *CurveAdaptorV1_AddLiquidity `protobuf:"bytes,2,opt,name=add_liquidity,json=addLiquidity,proto3,oneof"`
}

type CurveAdaptorV1_AddLiquidityEth struct {
	// Represents function `addLiquidityETH(address pool, ERC20 lpToken, uint256[] orderedMinimumUnderlyingTokenAmountsOut, uint256 minLPAmount, bool useUnderlying, CurveGauge gauge, bytes4 selector)`
	AddLiquidityEth *CurveAdaptorV1_AddLiquidityETH `protobuf:"bytes,3,opt,name=add_liquidity_eth,json=addLiquidityEth,proto3,oneof"`
}

type CurveAdaptorV1_RemoveLiquidity_ struct {
	// Represents function `removeLiquidity(address pool, ERC20 lpToken, uint256 lpTokenAmount, uint256[] orderedMinimumUnderlyingTokenAmountsOut, CurveGauge gauge, bytes4 selector)`
	RemoveLiquidity *CurveAdaptorV1_RemoveLiquidity `protobuf:"bytes,4,opt,name=remove_liquidity,json=removeLiquidity,proto3,oneof"`
}

type CurveAdaptorV1_RemoveLiquidityEth struct {
	// Represents function `removeLiquidityETH(address pool, ERC20 lpToken, uint256 lpTokenAmount, uint256[] orderedMinimumUnderlyingTokenAmountsOut, bool useUnderlying, CurveGauge gauge, bytes4 selector)`
	RemoveLiquidityEth *CurveAdaptorV1_RemoveLiquidityETH `protobuf:"bytes,5,opt,name=remove_liquidity_eth,json=removeLiquidityEth,proto3,oneof"`
}

type CurveAdaptorV1_StakeInGauge_ struct {
	// Represents function `stakeInGauge(ERC20 lpToken, CurveGauge gauge, uint256 amount, CurvePool pool, bytes4 selector)`
	StakeInGauge *CurveAdaptorV1_StakeInGauge `protobuf:"bytes,6,opt,name=stake_in_gauge,json=stakeInGauge,proto3,oneof"`
}

type CurveAdaptorV1_UnstakeFromGauge_ struct {
	// Represents function `unstakeFromGauge(CurveGauge gauge, uint256 amount)`
	UnstakeFromGauge *CurveAdaptorV1_UnstakeFromGauge `protobuf:"bytes,7,opt,name=unstake_from_gauge,json=unstakeFromGauge,proto3,oneof"`
}

type CurveAdaptorV1_ClaimRewards_ struct {
	// Represents function `claimRewards(CurveGauge gauge)`
	ClaimRewards *CurveAdaptorV1_ClaimRewards `protobuf:"bytes,8,opt,name=claim_rewards,json=claimRewards,proto3,oneof"`
}

func (*CurveAdaptorV1_RevokeApproval) isCurveAdaptorV1_Function() {}

func (*CurveAdaptorV1_AddLiquidity_) isCurveAdaptorV1_Function() {}

func (*CurveAdaptorV1_AddLiquidityEth) isCurveAdaptorV1_Function() {}

func (*CurveAdaptorV1_RemoveLiquidity_) isCurveAdaptorV1_Function() {}

func (*CurveAdaptorV1_RemoveLiquidityEth) isCurveAdaptorV1_Function() {}

func (*CurveAdaptorV1_StakeInGauge_) isCurveAdaptorV1_Function() {}

func (*CurveAdaptorV1_UnstakeFromGauge_) isCurveAdaptorV1_Function() {}

func (*CurveAdaptorV1_ClaimRewards_) isCurveAdaptorV1_Function() {}

type CurveAdaptorV1Calls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*CurveAdaptorV1 `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *CurveAdaptorV1Calls) Reset() {
	*x = CurveAdaptorV1Calls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1Calls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1Calls) ProtoMessage() {}

func (x *CurveAdaptorV1Calls) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1Calls.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1Calls) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{1}
}

func (x *CurveAdaptorV1Calls) GetCalls() []*CurveAdaptorV1 {
	if x != nil {
		return x.Calls
	}
	return nil
}

// Allows strategist to add liquidity to Curve pairs that do NOT use the native asset.
//
// Represents function `addLiquidity(address pool, ERC20 lpToken, uint256[] orderedUnderlyingTokenAmounts, uint256 minLPAmount, CurveGauge gauge, bytes4 selector)`
type CurveAdaptorV1_AddLiquidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the Curve pool
	Pool string `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// Address of the LP token
	LpToken string `protobuf:"bytes,2,opt,name=lp_token,json=lpToken,proto3" json:"lp_token,omitempty"`
	// Minimum amount of each underlying token to receive
	OrderedUnderlyingTokenAmounts []string `protobuf:"bytes,3,rep,name=ordered_underlying_token_amounts,json=orderedUnderlyingTokenAmounts,proto3" json:"ordered_underlying_token_amounts,omitempty"`
	// Minimum amount of LP tokens to receive
	MinLpAmount string `protobuf:"bytes,4,opt,name=min_lp_amount,json=minLpAmount,proto3" json:"min_lp_amount,omitempty"`
	// Address of the Curve gauge
	Gauge string `protobuf:"bytes,5,opt,name=gauge,proto3" json:"gauge,omitempty"`
	// Selector of the function to call
	Selector string `protobuf:"bytes,6,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *CurveAdaptorV1_AddLiquidity) Reset() {
	*x = CurveAdaptorV1_AddLiquidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1_AddLiquidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1_AddLiquidity) ProtoMessage() {}

func (x *CurveAdaptorV1_AddLiquidity) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1_AddLiquidity.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1_AddLiquidity) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CurveAdaptorV1_AddLiquidity) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidity) GetLpToken() string {
	if x != nil {
		return x.LpToken
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidity) GetOrderedUnderlyingTokenAmounts() []string {
	if x != nil {
		return x.OrderedUnderlyingTokenAmounts
	}
	return nil
}

func (x *CurveAdaptorV1_AddLiquidity) GetMinLpAmount() string {
	if x != nil {
		return x.MinLpAmount
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidity) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidity) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

// Allows strategist to add liquidity to Curve pairs that use the native asset.
//
// Represents function `addLiquidityETH(address pool, ERC20 lpToken, uint256[] orderedUnderlyingTokenAmounts, uint256 minLPAmount, bool useUnderlying, CurveGauge gauge, bytes4 selector)`
type CurveAdaptorV1_AddLiquidityETH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the Curve pool
	Pool string `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// Address of the LP token
	LpToken string `protobuf:"bytes,2,opt,name=lp_token,json=lpToken,proto3" json:"lp_token,omitempty"`
	// Minimum amount of each underlying token to receive
	OrderedUnderlyingTokenAmounts []string `protobuf:"bytes,3,rep,name=ordered_underlying_token_amounts,json=orderedUnderlyingTokenAmounts,proto3" json:"ordered_underlying_token_amounts,omitempty"`
	// Minimum amount of LP tokens to receive
	MinLpAmount string `protobuf:"bytes,4,opt,name=min_lp_amount,json=minLpAmount,proto3" json:"min_lp_amount,omitempty"`
	// Whether to use the underlying asset or the wrapped asset
	UseUnderlying bool `protobuf:"varint,5,opt,name=use_underlying,json=useUnderlying,proto3" json:"use_underlying,omitempty"`
	// Address of the Curve gauge
	Gauge string `protobuf:"bytes,6,opt,name=gauge,proto3" json:"gauge,omitempty"`
	// Selector of the function to call
	Selector string `protobuf:"bytes,7,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *CurveAdaptorV1_AddLiquidityETH) Reset() {
	*x = CurveAdaptorV1_AddLiquidityETH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1_AddLiquidityETH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1_AddLiquidityETH) ProtoMessage() {}

func (x *CurveAdaptorV1_AddLiquidityETH) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1_AddLiquidityETH.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1_AddLiquidityETH) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CurveAdaptorV1_AddLiquidityETH) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidityETH) GetLpToken() string {
	if x != nil {
		return x.LpToken
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidityETH) GetOrderedUnderlyingTokenAmounts() []string {
	if x != nil {
		return x.OrderedUnderlyingTokenAmounts
	}
	return nil
}

func (x *CurveAdaptorV1_AddLiquidityETH) GetMinLpAmount() string {
	if x != nil {
		return x.MinLpAmount
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidityETH) GetUseUnderlying() bool {
	if x != nil {
		return x.UseUnderlying
	}
	return false
}

func (x *CurveAdaptorV1_AddLiquidityETH) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

func (x *CurveAdaptorV1_AddLiquidityETH) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

// Allows strategist to remove liquidity from Curve pairs that do NOT use the native asset.
//
// Represents function `removeLiquidity(address pool, ERC20 lpToken, uint256 lpTokenAmount, uint256[] orderedMinimumUnderlyingTokenAmountsOut, CurveGauge gauge, bytes4 selector)`
type CurveAdaptorV1_RemoveLiquidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the Curve pool
	Pool string `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// Address of the LP token
	LpToken string `protobuf:"bytes,2,opt,name=lp_token,json=lpToken,proto3" json:"lp_token,omitempty"`
	// Amount of LP tokens to remove
	LpTokenAmount string `protobuf:"bytes,3,opt,name=lp_token_amount,json=lpTokenAmount,proto3" json:"lp_token_amount,omitempty"`
	// Minimum amount of each underlying token to receive
	OrderedMinimumUnderlyingTokenAmountsOut []string `protobuf:"bytes,4,rep,name=ordered_minimum_underlying_token_amounts_out,json=orderedMinimumUnderlyingTokenAmountsOut,proto3" json:"ordered_minimum_underlying_token_amounts_out,omitempty"`
	// Address of the Curve gauge
	Gauge string `protobuf:"bytes,5,opt,name=gauge,proto3" json:"gauge,omitempty"`
	// Selector of the function to call
	Selector string `protobuf:"bytes,6,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *CurveAdaptorV1_RemoveLiquidity) Reset() {
	*x = CurveAdaptorV1_RemoveLiquidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1_RemoveLiquidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1_RemoveLiquidity) ProtoMessage() {}

func (x *CurveAdaptorV1_RemoveLiquidity) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1_RemoveLiquidity.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1_RemoveLiquidity) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CurveAdaptorV1_RemoveLiquidity) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidity) GetLpToken() string {
	if x != nil {
		return x.LpToken
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidity) GetLpTokenAmount() string {
	if x != nil {
		return x.LpTokenAmount
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidity) GetOrderedMinimumUnderlyingTokenAmountsOut() []string {
	if x != nil {
		return x.OrderedMinimumUnderlyingTokenAmountsOut
	}
	return nil
}

func (x *CurveAdaptorV1_RemoveLiquidity) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidity) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

// Allows strategist to remove liquidity from Curve pairs that use the native asset.
//
// Represents function `removeLiquidityETH(address pool, ERC20 lpToken, uint256 lpTokenAmount, uint256[] orderedMinimumUnderlyingTokenAmountsOut, bool useUnderlying, CurveGauge gauge, bytes4 selector)`
type CurveAdaptorV1_RemoveLiquidityETH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the Curve pool
	Pool string `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// Address of the LP token
	LpToken string `protobuf:"bytes,2,opt,name=lp_token,json=lpToken,proto3" json:"lp_token,omitempty"`
	// Amount of LP tokens to remove
	LpTokenAmount string `protobuf:"bytes,3,opt,name=lp_token_amount,json=lpTokenAmount,proto3" json:"lp_token_amount,omitempty"`
	// Minimum amount of each underlying token to receive
	OrderedMinimumUnderlyingTokenAmountsOut []string `protobuf:"bytes,4,rep,name=ordered_minimum_underlying_token_amounts_out,json=orderedMinimumUnderlyingTokenAmountsOut,proto3" json:"ordered_minimum_underlying_token_amounts_out,omitempty"`
	// Whether to use the underlying asset or the wrapped asset
	UseUnderlying bool `protobuf:"varint,5,opt,name=use_underlying,json=useUnderlying,proto3" json:"use_underlying,omitempty"`
	// Address of the Curve gauge
	Gauge string `protobuf:"bytes,6,opt,name=gauge,proto3" json:"gauge,omitempty"`
	// Selector of the function to call
	Selector string `protobuf:"bytes,7,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) Reset() {
	*x = CurveAdaptorV1_RemoveLiquidityETH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1_RemoveLiquidityETH) ProtoMessage() {}

func (x *CurveAdaptorV1_RemoveLiquidityETH) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1_RemoveLiquidityETH.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1_RemoveLiquidityETH) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) GetLpToken() string {
	if x != nil {
		return x.LpToken
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) GetLpTokenAmount() string {
	if x != nil {
		return x.LpTokenAmount
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) GetOrderedMinimumUnderlyingTokenAmountsOut() []string {
	if x != nil {
		return x.OrderedMinimumUnderlyingTokenAmountsOut
	}
	return nil
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) GetUseUnderlying() bool {
	if x != nil {
		return x.UseUnderlying
	}
	return false
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

func (x *CurveAdaptorV1_RemoveLiquidityETH) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

// Allows strategist to stake Curve LP tokens in their gauge.
//
// Represents function `stakeInGauge(ERC20 lpToken, CurveGauge gauge, uint256 amount, CurvePool pool, bytes4 selector)`
type CurveAdaptorV1_StakeInGauge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the LP token
	LpToken string `protobuf:"bytes,1,opt,name=lp_token,json=lpToken,proto3" json:"lp_token,omitempty"`
	// Address of the Curve gauge
	Gauge string `protobuf:"bytes,2,opt,name=gauge,proto3" json:"gauge,omitempty"`
	// Amount of LP tokens to stake
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Address of the Curve pool
	Pool string `protobuf:"bytes,4,opt,name=pool,proto3" json:"pool,omitempty"`
	// Selector of the function to call
	Selector string `protobuf:"bytes,5,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *CurveAdaptorV1_StakeInGauge) Reset() {
	*x = CurveAdaptorV1_StakeInGauge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1_StakeInGauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1_StakeInGauge) ProtoMessage() {}

func (x *CurveAdaptorV1_StakeInGauge) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1_StakeInGauge.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1_StakeInGauge) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CurveAdaptorV1_StakeInGauge) GetLpToken() string {
	if x != nil {
		return x.LpToken
	}
	return ""
}

func (x *CurveAdaptorV1_StakeInGauge) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

func (x *CurveAdaptorV1_StakeInGauge) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CurveAdaptorV1_StakeInGauge) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *CurveAdaptorV1_StakeInGauge) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

// Allows strategist to unstake Curve LP tokens from their gauge.
//
// Represents function `unstakeFromGauge(CurveGauge gauge, uint256 amount)`
type CurveAdaptorV1_UnstakeFromGauge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the Curve gauge
	Gauge string `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge,omitempty"`
	// Amount of LP tokens to unstake
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CurveAdaptorV1_UnstakeFromGauge) Reset() {
	*x = CurveAdaptorV1_UnstakeFromGauge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1_UnstakeFromGauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1_UnstakeFromGauge) ProtoMessage() {}

func (x *CurveAdaptorV1_UnstakeFromGauge) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1_UnstakeFromGauge.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1_UnstakeFromGauge) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CurveAdaptorV1_UnstakeFromGauge) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

func (x *CurveAdaptorV1_UnstakeFromGauge) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Allows strategist to claim rewards from a gauge.
//
// Represents function `claimRewards(CurveGauge gauge)`
type CurveAdaptorV1_ClaimRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the Curve gauge
	Gauge string `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge,omitempty"`
}

func (x *CurveAdaptorV1_ClaimRewards) Reset() {
	*x = CurveAdaptorV1_ClaimRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curve_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveAdaptorV1_ClaimRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveAdaptorV1_ClaimRewards) ProtoMessage() {}

func (x *CurveAdaptorV1_ClaimRewards) ProtoReflect() protoreflect.Message {
	mi := &file_curve_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveAdaptorV1_ClaimRewards.ProtoReflect.Descriptor instead.
func (*CurveAdaptorV1_ClaimRewards) Descriptor() ([]byte, []int) {
	return file_curve_proto_rawDescGZIP(), []int{0, 6}
}

func (x *CurveAdaptorV1_ClaimRewards) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

var File_curve_proto protoreflect.FileDescriptor

var file_curve_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x0f, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12,
	0x4e, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x58, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x45, 0x54, 0x48, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x45, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x61, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75,
	0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x45, 0x54, 0x48, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x45, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49,
	0x6e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x49,
	0x6e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x61, 0x75, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x61,
	0x75, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x70, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4c, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x1a, 0x86, 0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x45, 0x54, 0x48, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x70,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x1d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4c, 0x70, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xf9, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x27, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xa3, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x45, 0x54, 0x48, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x27, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x87, 0x01,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x40, 0x0a, 0x10, 0x55, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x24, 0x0a, 0x0c, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x13, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x52, 0x05, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_curve_proto_rawDescOnce sync.Once
	file_curve_proto_rawDescData = file_curve_proto_rawDesc
)

func file_curve_proto_rawDescGZIP() []byte {
	file_curve_proto_rawDescOnce.Do(func() {
		file_curve_proto_rawDescData = protoimpl.X.CompressGZIP(file_curve_proto_rawDescData)
	})
	return file_curve_proto_rawDescData
}

var file_curve_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_curve_proto_goTypes = []interface{}{
	(*CurveAdaptorV1)(nil),                    // 0: steward.v4.CurveAdaptorV1
	(*CurveAdaptorV1Calls)(nil),               // 1: steward.v4.CurveAdaptorV1Calls
	(*CurveAdaptorV1_AddLiquidity)(nil),       // 2: steward.v4.CurveAdaptorV1.AddLiquidity
	(*CurveAdaptorV1_AddLiquidityETH)(nil),    // 3: steward.v4.CurveAdaptorV1.AddLiquidityETH
	(*CurveAdaptorV1_RemoveLiquidity)(nil),    // 4: steward.v4.CurveAdaptorV1.RemoveLiquidity
	(*CurveAdaptorV1_RemoveLiquidityETH)(nil), // 5: steward.v4.CurveAdaptorV1.RemoveLiquidityETH
	(*CurveAdaptorV1_StakeInGauge)(nil),       // 6: steward.v4.CurveAdaptorV1.StakeInGauge
	(*CurveAdaptorV1_UnstakeFromGauge)(nil),   // 7: steward.v4.CurveAdaptorV1.UnstakeFromGauge
	(*CurveAdaptorV1_ClaimRewards)(nil),       // 8: steward.v4.CurveAdaptorV1.ClaimRewards
	(*RevokeApproval)(nil),                    // 9: steward.v4.RevokeApproval
}
var file_curve_proto_depIdxs = []int32{
	9, // 0: steward.v4.CurveAdaptorV1.revoke_approval:type_name -> steward.v4.RevokeApproval
	2, // 1: steward.v4.CurveAdaptorV1.add_liquidity:type_name -> steward.v4.CurveAdaptorV1.AddLiquidity
	3, // 2: steward.v4.CurveAdaptorV1.add_liquidity_eth:type_name -> steward.v4.CurveAdaptorV1.AddLiquidityETH
	4, // 3: steward.v4.CurveAdaptorV1.remove_liquidity:type_name -> steward.v4.CurveAdaptorV1.RemoveLiquidity
	5, // 4: steward.v4.CurveAdaptorV1.remove_liquidity_eth:type_name -> steward.v4.CurveAdaptorV1.RemoveLiquidityETH
	6, // 5: steward.v4.CurveAdaptorV1.stake_in_gauge:type_name -> steward.v4.CurveAdaptorV1.StakeInGauge
	7, // 6: steward.v4.CurveAdaptorV1.unstake_from_gauge:type_name -> steward.v4.CurveAdaptorV1.UnstakeFromGauge
	8, // 7: steward.v4.CurveAdaptorV1.claim_rewards:type_name -> steward.v4.CurveAdaptorV1.ClaimRewards
	0, // 8: steward.v4.CurveAdaptorV1Calls.calls:type_name -> steward.v4.CurveAdaptorV1
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_curve_proto_init() }
func file_curve_proto_init() {
	if File_curve_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_curve_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1Calls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1_AddLiquidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1_AddLiquidityETH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1_RemoveLiquidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1_RemoveLiquidityETH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1_StakeInGauge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1_UnstakeFromGauge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curve_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveAdaptorV1_ClaimRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_curve_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CurveAdaptorV1_RevokeApproval)(nil),
		(*CurveAdaptorV1_AddLiquidity_)(nil),
		(*CurveAdaptorV1_AddLiquidityEth)(nil),
		(*CurveAdaptorV1_RemoveLiquidity_)(nil),
		(*CurveAdaptorV1_RemoveLiquidityEth)(nil),
		(*CurveAdaptorV1_StakeInGauge_)(nil),
		(*CurveAdaptorV1_UnstakeFromGauge_)(nil),
		(*CurveAdaptorV1_ClaimRewards_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_curve_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_curve_proto_goTypes,
		DependencyIndexes: file_curve_proto_depIdxs,
		MessageInfos:      file_curve_proto_msgTypes,
	}.Build()
	File_curve_proto = out.File
	file_curve_proto_rawDesc = nil
	file_curve_proto_goTypes = nil
	file_curve_proto_depIdxs = nil
}

//
// Protos for function calls to the FeesAndReserves and FeesAndReservesAdaptor contracts.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: fees_and_reserves.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents call data for the FeesAndReserves and FeesAndReservesAdaptor contracts.
type FeesAndReservesAdaptorV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*FeesAndReservesAdaptorV1_RevokeApproval
	//	*FeesAndReservesAdaptorV1_UpdatePerformanceFees_
	//	*FeesAndReservesAdaptorV1_UpdateManagementFees_
	//	*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency_
	//	*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas_
	//	*FeesAndReservesAdaptorV1_SetupMetaData_
	//	*FeesAndReservesAdaptorV1_AddAssetsToReserves_
	//	*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves_
	//	*FeesAndReservesAdaptorV1_PrepareFees_
	Function isFeesAndReservesAdaptorV1_Function `protobuf_oneof:"function"`
}

func (x *FeesAndReservesAdaptorV1) Reset() {
	*x = FeesAndReservesAdaptorV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0}
}

func (m *FeesAndReservesAdaptorV1) GetFunction() isFeesAndReservesAdaptorV1_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetRevokeApproval() *RevokeApproval {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_RevokeApproval); ok {
		return x.RevokeApproval
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetUpdatePerformanceFees() *FeesAndReservesAdaptorV1_UpdatePerformanceFees {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_UpdatePerformanceFees_); ok {
		return x.UpdatePerformanceFees
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetUpdateManagementFees() *FeesAndReservesAdaptorV1_UpdateManagementFees {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_UpdateManagementFees_); ok {
		return x.UpdateManagementFees
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetChangeUpkeepFrequency() *FeesAndReservesAdaptorV1_ChangeUpkeepFrequency {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency_); ok {
		return x.ChangeUpkeepFrequency
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetChangeUpkeepMaxGas() *FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas_); ok {
		return x.ChangeUpkeepMaxGas
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetSetupMetaData() *FeesAndReservesAdaptorV1_SetupMetaData {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_SetupMetaData_); ok {
		return x.SetupMetaData
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetAddAssetsToReserves() *FeesAndReservesAdaptorV1_AddAssetsToReserves {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_AddAssetsToReserves_); ok {
		return x.AddAssetsToReserves
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetWithdrawAssetsFromReserves() *FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves_); ok {
		return x.WithdrawAssetsFromReserves
	}
	return nil
}

func (x *FeesAndReservesAdaptorV1) GetPrepareFees() *FeesAndReservesAdaptorV1_PrepareFees {
	if x, ok := x.GetFunction().(*FeesAndReservesAdaptorV1_PrepareFees_); ok {
		return x.PrepareFees
	}
	return nil
}

type isFeesAndReservesAdaptorV1_Function interface {
	isFeesAndReservesAdaptorV1_Function()
}

type FeesAndReservesAdaptorV1_RevokeApproval struct {
	// Represents function `revokeApproval(ERC20 asset, address spender)`
	RevokeApproval *RevokeApproval `protobuf:"bytes,1,opt,name=revoke_approval,json=revokeApproval,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_UpdatePerformanceFees_ struct {
	// Represents function `updatePerformanceFee(uint32 performanceFee)`
	UpdatePerformanceFees *FeesAndReservesAdaptorV1_UpdatePerformanceFees `protobuf:"bytes,2,opt,name=update_performance_fees,json=updatePerformanceFees,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_UpdateManagementFees_ struct {
	// Represents function `updateManagementFee(uint32 managementFee)`
	UpdateManagementFees *FeesAndReservesAdaptorV1_UpdateManagementFees `protobuf:"bytes,3,opt,name=update_management_fees,json=updateManagementFees,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_ChangeUpkeepFrequency_ struct {
	// Represents function `changeUpkeepFrequency(uint64 newFrequency)`
	ChangeUpkeepFrequency *FeesAndReservesAdaptorV1_ChangeUpkeepFrequency `protobuf:"bytes,4,opt,name=change_upkeep_frequency,json=changeUpkeepFrequency,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas_ struct {
	// Represents function `changeUpkeepMaxGas(uint64 newMaxGas)`
	ChangeUpkeepMaxGas *FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas `protobuf:"bytes,5,opt,name=change_upkeep_max_gas,json=changeUpkeepMaxGas,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_SetupMetaData_ struct {
	// Represents function `setupMetaData(uint32 managementFee, uint32 performanceFee)`
	SetupMetaData *FeesAndReservesAdaptorV1_SetupMetaData `protobuf:"bytes,6,opt,name=setup_meta_data,json=setupMetaData,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_AddAssetsToReserves_ struct {
	// Represents function `addAssetsToReserves(uint256 amount)`
	AddAssetsToReserves *FeesAndReservesAdaptorV1_AddAssetsToReserves `protobuf:"bytes,7,opt,name=add_assets_to_reserves,json=addAssetsToReserves,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves_ struct {
	// Represents function `withdrawAssetsFromReserves(uint256 amount)`
	WithdrawAssetsFromReserves *FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves `protobuf:"bytes,8,opt,name=withdraw_assets_from_reserves,json=withdrawAssetsFromReserves,proto3,oneof"`
}

type FeesAndReservesAdaptorV1_PrepareFees_ struct {
	// Represents function `prepareFees(uint256 amount)`
	PrepareFees *FeesAndReservesAdaptorV1_PrepareFees `protobuf:"bytes,9,opt,name=prepare_fees,json=prepareFees,proto3,oneof"`
}

func (*FeesAndReservesAdaptorV1_RevokeApproval) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_UpdatePerformanceFees_) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_UpdateManagementFees_) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency_) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas_) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_SetupMetaData_) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_AddAssetsToReserves_) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves_) isFeesAndReservesAdaptorV1_Function() {}

func (*FeesAndReservesAdaptorV1_PrepareFees_) isFeesAndReservesAdaptorV1_Function() {}

type FeesAndReservesAdaptorV1Calls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*FeesAndReservesAdaptorV1 `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *FeesAndReservesAdaptorV1Calls) Reset() {
	*x = FeesAndReservesAdaptorV1Calls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1Calls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1Calls) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1Calls) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1Calls.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1Calls) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{1}
}

func (x *FeesAndReservesAdaptorV1Calls) GetCalls() []*FeesAndReservesAdaptorV1 {
	if x != nil {
		return x.Calls
	}
	return nil
}

// Allows the owner to update a Cellar's performance fee.
//
// Represents function `updatePerformanceFee(uint32 performanceFee)`
type FeesAndReservesAdaptorV1_UpdatePerformanceFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformanceFee uint32 `protobuf:"varint,1,opt,name=performance_fee,json=performanceFee,proto3" json:"performance_fee,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_UpdatePerformanceFees) Reset() {
	*x = FeesAndReservesAdaptorV1_UpdatePerformanceFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_UpdatePerformanceFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_UpdatePerformanceFees) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_UpdatePerformanceFees) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_UpdatePerformanceFees.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_UpdatePerformanceFees) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FeesAndReservesAdaptorV1_UpdatePerformanceFees) GetPerformanceFee() uint32 {
	if x != nil {
		return x.PerformanceFee
	}
	return 0
}

// Allows the owner to update a Cellar's management fee.
//
// Represents function `updateManagementFee(uint32 managementFee)`
type FeesAndReservesAdaptorV1_UpdateManagementFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagementFee uint32 `protobuf:"varint,1,opt,name=management_fee,json=managementFee,proto3" json:"management_fee,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_UpdateManagementFees) Reset() {
	*x = FeesAndReservesAdaptorV1_UpdateManagementFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_UpdateManagementFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_UpdateManagementFees) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_UpdateManagementFees) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_UpdateManagementFees.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_UpdateManagementFees) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FeesAndReservesAdaptorV1_UpdateManagementFees) GetManagementFee() uint32 {
	if x != nil {
		return x.ManagementFee
	}
	return 0
}

// Allows the owner to update a Cellar's upkeep frequency.
//
// Represents function `changeUpkeepFrequency(uint64 newFrequency)`
type FeesAndReservesAdaptorV1_ChangeUpkeepFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewFrequency uint64 `protobuf:"varint,1,opt,name=new_frequency,json=newFrequency,proto3" json:"new_frequency,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepFrequency) Reset() {
	*x = FeesAndReservesAdaptorV1_ChangeUpkeepFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_ChangeUpkeepFrequency.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepFrequency) GetNewFrequency() uint64 {
	if x != nil {
		return x.NewFrequency
	}
	return 0
}

// Allows the owner to update a Cellar's upkeep max gas.
//
// Represents function `changeUpkeepMaxGas(uint64 newMaxGas)`
type FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewMaxGas uint64 `protobuf:"varint,1,opt,name=new_max_gas,json=newMaxGas,proto3" json:"new_max_gas,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas) Reset() {
	*x = FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 3}
}

func (x *FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas) GetNewMaxGas() uint64 {
	if x != nil {
		return x.NewMaxGas
	}
	return 0
}

// Allows the owner to set the Cellar's fee metadata
//
// Represents function `setupMetaData(uint32 managementFee, uint32 performanceFee)`
type FeesAndReservesAdaptorV1_SetupMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagementFee  uint32 `protobuf:"varint,1,opt,name=management_fee,json=managementFee,proto3" json:"management_fee,omitempty"`
	PerformanceFee uint32 `protobuf:"varint,2,opt,name=performance_fee,json=performanceFee,proto3" json:"performance_fee,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_SetupMetaData) Reset() {
	*x = FeesAndReservesAdaptorV1_SetupMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_SetupMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_SetupMetaData) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_SetupMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_SetupMetaData.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_SetupMetaData) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 4}
}

func (x *FeesAndReservesAdaptorV1_SetupMetaData) GetManagementFee() uint32 {
	if x != nil {
		return x.ManagementFee
	}
	return 0
}

func (x *FeesAndReservesAdaptorV1_SetupMetaData) GetPerformanceFee() uint32 {
	if x != nil {
		return x.PerformanceFee
	}
	return 0
}

// Allows the owner to add assets to the Cellar's reserves
//
// Represents function `addAssetsToReserves(uint256 amount)`
type FeesAndReservesAdaptorV1_AddAssetsToReserves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_AddAssetsToReserves) Reset() {
	*x = FeesAndReservesAdaptorV1_AddAssetsToReserves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_AddAssetsToReserves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_AddAssetsToReserves) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_AddAssetsToReserves) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_AddAssetsToReserves.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_AddAssetsToReserves) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 5}
}

func (x *FeesAndReservesAdaptorV1_AddAssetsToReserves) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Allows the owner to withdraw assets from the Cellar's reserves
//
// Represents function `withdrawAssetsFromReserves(uint256 amount)`
type FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves) Reset() {
	*x = FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 6}
}

func (x *FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Allows the owner to prepare fees to be split between the platform, strategist, and protocol
//
// Represents function `prepareFees(uint256 amount)`
type FeesAndReservesAdaptorV1_PrepareFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *FeesAndReservesAdaptorV1_PrepareFees) Reset() {
	*x = FeesAndReservesAdaptorV1_PrepareFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fees_and_reserves_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesAndReservesAdaptorV1_PrepareFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesAndReservesAdaptorV1_PrepareFees) ProtoMessage() {}

func (x *FeesAndReservesAdaptorV1_PrepareFees) ProtoReflect() protoreflect.Message {
	mi := &file_fees_and_reserves_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesAndReservesAdaptorV1_PrepareFees.ProtoReflect.Descriptor instead.
func (*FeesAndReservesAdaptorV1_PrepareFees) Descriptor() ([]byte, []int) {
	return file_fees_and_reserves_proto_rawDescGZIP(), []int{0, 7}
}

func (x *FeesAndReservesAdaptorV1_PrepareFees) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

var File_fees_and_reserves_proto protoreflect.FileDescriptor

var file_fees_and_reserves_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc9, 0x0b, 0x0a, 0x18, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x12, 0x45,
	0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x74, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x16, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x73, 0x48, 0x00, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x74,
	0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x6b, 0x65,
	0x65, 0x70, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x15, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x6b, 0x65, 0x65, 0x70, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x6c, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75,
	0x70, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x55, 0x70, 0x6b, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x6b, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x78, 0x47,
	0x61, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x6f, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64,
	0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x12, 0x84, 0x01, 0x0a, 0x1d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x65, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x65, 0x65, 0x73, 0x1a,
	0x40, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65,
	0x65, 0x1a, 0x3d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65,
	0x1a, 0x3c, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x6b, 0x65, 0x65, 0x70,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x34,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x6b, 0x65, 0x65, 0x70, 0x4d, 0x61,
	0x78, 0x47, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x61,
	0x78, 0x47, 0x61, 0x73, 0x1a, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x65, 0x65, 0x1a, 0x2d, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x34, 0x0a, 0x1a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x25, 0x0a, 0x0b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a,
	0x1d, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3a,
	0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fees_and_reserves_proto_rawDescOnce sync.Once
	file_fees_and_reserves_proto_rawDescData = file_fees_and_reserves_proto_rawDesc
)

func file_fees_and_reserves_proto_rawDescGZIP() []byte {
	file_fees_and_reserves_proto_rawDescOnce.Do(func() {
		file_fees_and_reserves_proto_rawDescData = protoimpl.X.CompressGZIP(file_fees_and_reserves_proto_rawDescData)
	})
	return file_fees_and_reserves_proto_rawDescData
}

var file_fees_and_reserves_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_fees_and_reserves_proto_goTypes = []interface{}{
	(*FeesAndReservesAdaptorV1)(nil),                            // 0: steward.v4.FeesAndReservesAdaptorV1
	(*FeesAndReservesAdaptorV1Calls)(nil),                       // 1: steward.v4.FeesAndReservesAdaptorV1Calls
	(*FeesAndReservesAdaptorV1_UpdatePerformanceFees)(nil),      // 2: steward.v4.FeesAndReservesAdaptorV1.UpdatePerformanceFees
	(*FeesAndReservesAdaptorV1_UpdateManagementFees)(nil),       // 3: steward.v4.FeesAndReservesAdaptorV1.UpdateManagementFees
	(*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency)(nil),      // 4: steward.v4.FeesAndReservesAdaptorV1.ChangeUpkeepFrequency
	(*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas)(nil),         // 5: steward.v4.FeesAndReservesAdaptorV1.ChangeUpkeepMaxGas
	(*FeesAndReservesAdaptorV1_SetupMetaData)(nil),              // 6: steward.v4.FeesAndReservesAdaptorV1.SetupMetaData
	(*FeesAndReservesAdaptorV1_AddAssetsToReserves)(nil),        // 7: steward.v4.FeesAndReservesAdaptorV1.AddAssetsToReserves
	(*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves)(nil), // 8: steward.v4.FeesAndReservesAdaptorV1.WithdrawAssetsFromReserves
	(*FeesAndReservesAdaptorV1_PrepareFees)(nil),                // 9: steward.v4.FeesAndReservesAdaptorV1.PrepareFees
	(*RevokeApproval)(nil),                                      // 10: steward.v4.RevokeApproval
}
var file_fees_and_reserves_proto_depIdxs = []int32{
	10, // 0: steward.v4.FeesAndReservesAdaptorV1.revoke_approval:type_name -> steward.v4.RevokeApproval
	2,  // 1: steward.v4.FeesAndReservesAdaptorV1.update_performance_fees:type_name -> steward.v4.FeesAndReservesAdaptorV1.UpdatePerformanceFees
	3,  // 2: steward.v4.FeesAndReservesAdaptorV1.update_management_fees:type_name -> steward.v4.FeesAndReservesAdaptorV1.UpdateManagementFees
	4,  // 3: steward.v4.FeesAndReservesAdaptorV1.change_upkeep_frequency:type_name -> steward.v4.FeesAndReservesAdaptorV1.ChangeUpkeepFrequency
	5,  // 4: steward.v4.FeesAndReservesAdaptorV1.change_upkeep_max_gas:type_name -> steward.v4.FeesAndReservesAdaptorV1.ChangeUpkeepMaxGas
	6,  // 5: steward.v4.FeesAndReservesAdaptorV1.setup_meta_data:type_name -> steward.v4.FeesAndReservesAdaptorV1.SetupMetaData
	7,  // 6: steward.v4.FeesAndReservesAdaptorV1.add_assets_to_reserves:type_name -> steward.v4.FeesAndReservesAdaptorV1.AddAssetsToReserves
	8,  // 7: steward.v4.FeesAndReservesAdaptorV1.withdraw_assets_from_reserves:type_name -> steward.v4.FeesAndReservesAdaptorV1.WithdrawAssetsFromReserves
	9,  // 8: steward.v4.FeesAndReservesAdaptorV1.prepare_fees:type_name -> steward.v4.FeesAndReservesAdaptorV1.PrepareFees
	0,  // 9: steward.v4.FeesAndReservesAdaptorV1Calls.calls:type_name -> steward.v4.FeesAndReservesAdaptorV1
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_fees_and_reserves_proto_init() }
func file_fees_and_reserves_proto_init() {
	if File_fees_and_reserves_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fees_and_reserves_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1Calls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_UpdatePerformanceFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_UpdateManagementFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_SetupMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_AddAssetsToReserves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fees_and_reserves_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesAndReservesAdaptorV1_PrepareFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fees_and_reserves_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FeesAndReservesAdaptorV1_RevokeApproval)(nil),
		(*FeesAndReservesAdaptorV1_UpdatePerformanceFees_)(nil),
		(*FeesAndReservesAdaptorV1_UpdateManagementFees_)(nil),
		(*FeesAndReservesAdaptorV1_ChangeUpkeepFrequency_)(nil),
		(*FeesAndReservesAdaptorV1_ChangeUpkeepMaxGas_)(nil),
		(*FeesAndReservesAdaptorV1_SetupMetaData_)(nil),
		(*FeesAndReservesAdaptorV1_AddAssetsToReserves_)(nil),
		(*FeesAndReservesAdaptorV1_WithdrawAssetsFromReserves_)(nil),
		(*FeesAndReservesAdaptorV1_PrepareFees_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fees_and_reserves_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fees_and_reserves_proto_goTypes,
		DependencyIndexes: file_fees_and_reserves_proto_depIdxs,
		MessageInfos:      file_fees_and_reserves_proto_msgTypes,
	}.Build()
	File_fees_and_reserves_proto = out.File
	file_fees_and_reserves_proto_rawDesc = nil
	file_fees_and_reserves_proto_goTypes = nil
	file_fees_and_reserves_proto_depIdxs = nil
}

//
// Protos for function calls to the Balancer Pool adaptor.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: balancer_pool.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the SwapKind enum defined here:
// https://github.com/PeggyJV/cellar-contracts/blob/main/src/interfaces/external/Balancer/IVault.sol
type BalancerPoolAdaptorV1_SwapKind int32

const (
	BalancerPoolAdaptorV1_SWAP_KIND_UNSPECIFIED BalancerPoolAdaptorV1_SwapKind = 0
	BalancerPoolAdaptorV1_SWAP_KIND_GIVEN_IN    BalancerPoolAdaptorV1_SwapKind = 1
	BalancerPoolAdaptorV1_SWAP_KIND_GIVEN_OUT   BalancerPoolAdaptorV1_SwapKind = 2
)

// Enum value maps for BalancerPoolAdaptorV1_SwapKind.
var (
	BalancerPoolAdaptorV1_SwapKind_name = map[int32]string{
		0: "SWAP_KIND_UNSPECIFIED",
		1: "SWAP_KIND_GIVEN_IN",
		2: "SWAP_KIND_GIVEN_OUT",
	}
	BalancerPoolAdaptorV1_SwapKind_value = map[string]int32{
		"SWAP_KIND_UNSPECIFIED": 0,
		"SWAP_KIND_GIVEN_IN":    1,
		"SWAP_KIND_GIVEN_OUT":   2,
	}
)

func (x BalancerPoolAdaptorV1_SwapKind) Enum() *BalancerPoolAdaptorV1_SwapKind {
	p := new(BalancerPoolAdaptorV1_SwapKind)
	*p = x
	return p
}

func (x BalancerPoolAdaptorV1_SwapKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalancerPoolAdaptorV1_SwapKind) Descriptor() protoreflect.EnumDescriptor {
	return file_balancer_pool_proto_enumTypes[0].Descriptor()
}

func (BalancerPoolAdaptorV1_SwapKind) Type() protoreflect.EnumType {
	return &file_balancer_pool_proto_enumTypes[0]
}

func (x BalancerPoolAdaptorV1_SwapKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_SwapKind.Descriptor instead.
func (BalancerPoolAdaptorV1_SwapKind) EnumDescriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 0}
}

// Represents call data for the Balancer Pool adaptor V1, for managing pool positions on Balancer.
type BalancerPoolAdaptorV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*BalancerPoolAdaptorV1_RevokeApproval
	//	*BalancerPoolAdaptorV1_JoinPool_
	//	*BalancerPoolAdaptorV1_ExitPool_
	//	*BalancerPoolAdaptorV1_StakeBpt
	//	*BalancerPoolAdaptorV1_UnstakeBpt
	//	*BalancerPoolAdaptorV1_ClaimRewards_
	Function isBalancerPoolAdaptorV1_Function `protobuf_oneof:"function"`
}

func (x *BalancerPoolAdaptorV1) Reset() {
	*x = BalancerPoolAdaptorV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0}
}

func (m *BalancerPoolAdaptorV1) GetFunction() isBalancerPoolAdaptorV1_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *BalancerPoolAdaptorV1) GetRevokeApproval() *RevokeApproval {
	if x, ok := x.GetFunction().(*BalancerPoolAdaptorV1_RevokeApproval); ok {
		return x.RevokeApproval
	}
	return nil
}

func (x *BalancerPoolAdaptorV1) GetJoinPool() *BalancerPoolAdaptorV1_JoinPool {
	if x, ok := x.GetFunction().(*BalancerPoolAdaptorV1_JoinPool_); ok {
		return x.JoinPool
	}
	return nil
}

func (x *BalancerPoolAdaptorV1) GetExitPool() *BalancerPoolAdaptorV1_ExitPool {
	if x, ok := x.GetFunction().(*BalancerPoolAdaptorV1_ExitPool_); ok {
		return x.ExitPool
	}
	return nil
}

func (x *BalancerPoolAdaptorV1) GetStakeBpt() *BalancerPoolAdaptorV1_StakeBPT {
	if x, ok := x.GetFunction().(*BalancerPoolAdaptorV1_StakeBpt); ok {
		return x.StakeBpt
	}
	return nil
}

func (x *BalancerPoolAdaptorV1) GetUnstakeBpt() *BalancerPoolAdaptorV1_UnstakeBPT {
	if x, ok := x.GetFunction().(*BalancerPoolAdaptorV1_UnstakeBpt); ok {
		return x.UnstakeBpt
	}
	return nil
}

func (x *BalancerPoolAdaptorV1) GetClaimRewards() *BalancerPoolAdaptorV1_ClaimRewards {
	if x, ok := x.GetFunction().(*BalancerPoolAdaptorV1_ClaimRewards_); ok {
		return x.ClaimRewards
	}
	return nil
}

type isBalancerPoolAdaptorV1_Function interface {
	isBalancerPoolAdaptorV1_Function()
}

type BalancerPoolAdaptorV1_RevokeApproval struct {
	// Represents function `revokeApproval(ERC20 asset, address spender)`
	RevokeApproval *RevokeApproval `protobuf:"bytes,1,opt,name=revoke_approval,json=revokeApproval,proto3,oneof"`
}

type BalancerPoolAdaptorV1_JoinPool_ struct {
	// Represents function `relayerJoinPool(ERC20[] tokensIn, uint256[] amountsIn, ERC20 btpOut, bytes[] memory callData)`
	JoinPool *BalancerPoolAdaptorV1_JoinPool `protobuf:"bytes,2,opt,name=join_pool,json=joinPool,proto3,oneof"`
}

type BalancerPoolAdaptorV1_ExitPool_ struct {
	// Represents function `relayerExitPool(ERC20 bptIn, uint256 amountIn, ERC20[] memory tokensOut, bytes[] memory callData)`
	ExitPool *BalancerPoolAdaptorV1_ExitPool `protobuf:"bytes,3,opt,name=exit_pool,json=exitPool,proto3,oneof"`
}

type BalancerPoolAdaptorV1_StakeBpt struct {
	// Represents function `stakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountIn)`
	StakeBpt *BalancerPoolAdaptorV1_StakeBPT `protobuf:"bytes,4,opt,name=stake_bpt,json=stakeBpt,proto3,oneof"`
}

type BalancerPoolAdaptorV1_UnstakeBpt struct {
	// Represents function `unstakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountOut)`
	UnstakeBpt *BalancerPoolAdaptorV1_UnstakeBPT `protobuf:"bytes,5,opt,name=unstake_bpt,json=unstakeBpt,proto3,oneof"`
}

type BalancerPoolAdaptorV1_ClaimRewards_ struct {
	// Represents function `claimRewards(address gauge)`
	ClaimRewards *BalancerPoolAdaptorV1_ClaimRewards `protobuf:"bytes,6,opt,name=claim_rewards,json=claimRewards,proto3,oneof"`
}

func (*BalancerPoolAdaptorV1_RevokeApproval) isBalancerPoolAdaptorV1_Function() {}

func (*BalancerPoolAdaptorV1_JoinPool_) isBalancerPoolAdaptorV1_Function() {}

func (*BalancerPoolAdaptorV1_ExitPool_) isBalancerPoolAdaptorV1_Function() {}

func (*BalancerPoolAdaptorV1_StakeBpt) isBalancerPoolAdaptorV1_Function() {}

func (*BalancerPoolAdaptorV1_UnstakeBpt) isBalancerPoolAdaptorV1_Function() {}

func (*BalancerPoolAdaptorV1_ClaimRewards_) isBalancerPoolAdaptorV1_Function() {}

type BalancerPoolAdaptorV1Calls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*BalancerPoolAdaptorV1 `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *BalancerPoolAdaptorV1Calls) Reset() {
	*x = BalancerPoolAdaptorV1Calls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1Calls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1Calls) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1Calls) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1Calls.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1Calls) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{1}
}

func (x *BalancerPoolAdaptorV1Calls) GetCalls() []*BalancerPoolAdaptorV1 {
	if x != nil {
		return x.Calls
	}
	return nil
}

// Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on the `kind` value.
// Represents the SingleSwap struct defined here:
// https://github.com/PeggyJV/cellar-contracts/blob/main/src/interfaces/external/Balancer/IVault.sol
type BalancerPoolAdaptorV1_SingleSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool ID (bytes32)
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// The swap kind (enum)
	Kind BalancerPoolAdaptorV1_SwapKind `protobuf:"varint,2,opt,name=kind,proto3,enum=steward.v4.BalancerPoolAdaptorV1_SwapKind" json:"kind,omitempty"`
	// The asset in (address)
	AssetIn string `protobuf:"bytes,3,opt,name=asset_in,json=assetIn,proto3" json:"asset_in,omitempty"`
	// The asset out (address)
	AssetOut string `protobuf:"bytes,4,opt,name=asset_out,json=assetOut,proto3" json:"asset_out,omitempty"`
	// The amount (uint256)
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The user data (bytes)
	UserData []byte `protobuf:"bytes,6,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (x *BalancerPoolAdaptorV1_SingleSwap) Reset() {
	*x = BalancerPoolAdaptorV1_SingleSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_SingleSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_SingleSwap) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_SingleSwap) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_SingleSwap.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_SingleSwap) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BalancerPoolAdaptorV1_SingleSwap) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_SingleSwap) GetKind() BalancerPoolAdaptorV1_SwapKind {
	if x != nil {
		return x.Kind
	}
	return BalancerPoolAdaptorV1_SWAP_KIND_UNSPECIFIED
}

func (x *BalancerPoolAdaptorV1_SingleSwap) GetAssetIn() string {
	if x != nil {
		return x.AssetIn
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_SingleSwap) GetAssetOut() string {
	if x != nil {
		return x.AssetOut
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_SingleSwap) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_SingleSwap) GetUserData() []byte {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Stores each swaps min amount, and deadline
type BalancerPoolAdaptorV1_SwapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum amounts for swaps
	MinAmountsForSwaps []string `protobuf:"bytes,1,rep,name=min_amounts_for_swaps,json=minAmountsForSwaps,proto3" json:"min_amounts_for_swaps,omitempty"`
	// The swap deadlines
	SwapDeadlines []string `protobuf:"bytes,2,rep,name=swap_deadlines,json=swapDeadlines,proto3" json:"swap_deadlines,omitempty"`
}

func (x *BalancerPoolAdaptorV1_SwapData) Reset() {
	*x = BalancerPoolAdaptorV1_SwapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_SwapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_SwapData) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_SwapData) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_SwapData.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_SwapData) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BalancerPoolAdaptorV1_SwapData) GetMinAmountsForSwaps() []string {
	if x != nil {
		return x.MinAmountsForSwaps
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_SwapData) GetSwapDeadlines() []string {
	if x != nil {
		return x.SwapDeadlines
	}
	return nil
}

// Allows strategists to join Balancer pools using EXACT_TOKENS_IN_FOR_BPT_OUT joins
//
// Represents function `joinPool(ERC20 targetBpt, IVault.SingleSwap[] memory swapsBeforeJoin, SwapData memory swapData, uint256 minimumBpt)`
type BalancerPoolAdaptorV1_JoinPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target pool
	TargetBpt string `protobuf:"bytes,1,opt,name=target_bpt,json=targetBpt,proto3" json:"target_bpt,omitempty"`
	// Swap to execute before joining pool
	SwapsBeforeJoin []*BalancerPoolAdaptorV1_SingleSwap `protobuf:"bytes,2,rep,name=swaps_before_join,json=swapsBeforeJoin,proto3" json:"swaps_before_join,omitempty"`
	// Data for swaps
	SwapData *BalancerPoolAdaptorV1_SwapData `protobuf:"bytes,3,opt,name=swap_data,json=swapData,proto3" json:"swap_data,omitempty"`
	// The minimum BPT to mint
	MinimumBpt string `protobuf:"bytes,4,opt,name=minimum_bpt,json=minimumBpt,proto3" json:"minimum_bpt,omitempty"`
}

func (x *BalancerPoolAdaptorV1_JoinPool) Reset() {
	*x = BalancerPoolAdaptorV1_JoinPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_JoinPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_JoinPool) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_JoinPool) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_JoinPool.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_JoinPool) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 2}
}

func (x *BalancerPoolAdaptorV1_JoinPool) GetTargetBpt() string {
	if x != nil {
		return x.TargetBpt
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_JoinPool) GetSwapsBeforeJoin() []*BalancerPoolAdaptorV1_SingleSwap {
	if x != nil {
		return x.SwapsBeforeJoin
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_JoinPool) GetSwapData() *BalancerPoolAdaptorV1_SwapData {
	if x != nil {
		return x.SwapData
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_JoinPool) GetMinimumBpt() string {
	if x != nil {
		return x.MinimumBpt
	}
	return ""
}

type BalancerPoolAdaptorV1_ExitPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets            []string `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	MinAmountsOut     []string `protobuf:"bytes,2,rep,name=min_amounts_out,json=minAmountsOut,proto3" json:"min_amounts_out,omitempty"`
	UserData          []byte   `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	ToInternalBalance bool     `protobuf:"varint,4,opt,name=to_internal_balance,json=toInternalBalance,proto3" json:"to_internal_balance,omitempty"`
}

func (x *BalancerPoolAdaptorV1_ExitPoolRequest) Reset() {
	*x = BalancerPoolAdaptorV1_ExitPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_ExitPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_ExitPoolRequest) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_ExitPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_ExitPoolRequest.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_ExitPoolRequest) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 3}
}

func (x *BalancerPoolAdaptorV1_ExitPoolRequest) GetAssets() []string {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_ExitPoolRequest) GetMinAmountsOut() []string {
	if x != nil {
		return x.MinAmountsOut
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_ExitPoolRequest) GetUserData() []byte {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_ExitPoolRequest) GetToInternalBalance() bool {
	if x != nil {
		return x.ToInternalBalance
	}
	return false
}

// Call `BalancerRelayer` on mainnet to carry out exit txs
//
// Represents function `exitPool(ERC20 targetBpt, IVault.SingleSwap[] memory swapsBeforeJoin, SwapData memory swapData, IVault.ExitPoolRequest request)`
type BalancerPoolAdaptorV1_ExitPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target pool
	TargetBpt string `protobuf:"bytes,1,opt,name=target_bpt,json=targetBpt,proto3" json:"target_bpt,omitempty"`
	// Swaps to execute after exiting pool
	SwapsAfterExit []*BalancerPoolAdaptorV1_SingleSwap `protobuf:"bytes,2,rep,name=swaps_after_exit,json=swapsAfterExit,proto3" json:"swaps_after_exit,omitempty"`
	// Data for swaps
	SwapData *BalancerPoolAdaptorV1_SwapData        `protobuf:"bytes,3,opt,name=swap_data,json=swapData,proto3" json:"swap_data,omitempty"`
	Request  *BalancerPoolAdaptorV1_ExitPoolRequest `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *BalancerPoolAdaptorV1_ExitPool) Reset() {
	*x = BalancerPoolAdaptorV1_ExitPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_ExitPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_ExitPool) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_ExitPool) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_ExitPool.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_ExitPool) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 4}
}

func (x *BalancerPoolAdaptorV1_ExitPool) GetTargetBpt() string {
	if x != nil {
		return x.TargetBpt
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_ExitPool) GetSwapsAfterExit() []*BalancerPoolAdaptorV1_SingleSwap {
	if x != nil {
		return x.SwapsAfterExit
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_ExitPool) GetSwapData() *BalancerPoolAdaptorV1_SwapData {
	if x != nil {
		return x.SwapData
	}
	return nil
}

func (x *BalancerPoolAdaptorV1_ExitPool) GetRequest() *BalancerPoolAdaptorV1_ExitPoolRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// Stake (deposit) BPTs into respective pool gauge
//
// Represents `function stakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountIn)“
type BalancerPoolAdaptorV1_StakeBPT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BPT to stake
	Bpt string `protobuf:"bytes,1,opt,name=bpt,proto3" json:"bpt,omitempty"`
	// The liquidity gauge to stake into
	LiquidityGauge string `protobuf:"bytes,2,opt,name=liquidity_gauge,json=liquidityGauge,proto3" json:"liquidity_gauge,omitempty"`
	// The amount to stake
	AmountIn string `protobuf:"bytes,3,opt,name=amount_in,json=amountIn,proto3" json:"amount_in,omitempty"`
}

func (x *BalancerPoolAdaptorV1_StakeBPT) Reset() {
	*x = BalancerPoolAdaptorV1_StakeBPT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_StakeBPT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_StakeBPT) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_StakeBPT) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_StakeBPT.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_StakeBPT) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 5}
}

func (x *BalancerPoolAdaptorV1_StakeBPT) GetBpt() string {
	if x != nil {
		return x.Bpt
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_StakeBPT) GetLiquidityGauge() string {
	if x != nil {
		return x.LiquidityGauge
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_StakeBPT) GetAmountIn() string {
	if x != nil {
		return x.AmountIn
	}
	return ""
}

// Unstake (withdraw) BPT from respective pool gauge
//
// Represents `function unstakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountOut)“
type BalancerPoolAdaptorV1_UnstakeBPT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BPT to unstake
	Bpt string `protobuf:"bytes,1,opt,name=bpt,proto3" json:"bpt,omitempty"`
	// The liquidity gauge to unstake from
	LiquidityGauge string `protobuf:"bytes,2,opt,name=liquidity_gauge,json=liquidityGauge,proto3" json:"liquidity_gauge,omitempty"`
	// The amount to unstake
	AmountOut string `protobuf:"bytes,3,opt,name=amount_out,json=amountOut,proto3" json:"amount_out,omitempty"`
}

func (x *BalancerPoolAdaptorV1_UnstakeBPT) Reset() {
	*x = BalancerPoolAdaptorV1_UnstakeBPT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_UnstakeBPT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_UnstakeBPT) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_UnstakeBPT) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_UnstakeBPT.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_UnstakeBPT) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 6}
}

func (x *BalancerPoolAdaptorV1_UnstakeBPT) GetBpt() string {
	if x != nil {
		return x.Bpt
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_UnstakeBPT) GetLiquidityGauge() string {
	if x != nil {
		return x.LiquidityGauge
	}
	return ""
}

func (x *BalancerPoolAdaptorV1_UnstakeBPT) GetAmountOut() string {
	if x != nil {
		return x.AmountOut
	}
	return ""
}

// Claim rewards ($BAL) from LP position
//
// Represents `function claimRewards(address gauge)`
type BalancerPoolAdaptorV1_ClaimRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The gauge to claim rewards from
	Gauge string `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge,omitempty"`
}

func (x *BalancerPoolAdaptorV1_ClaimRewards) Reset() {
	*x = BalancerPoolAdaptorV1_ClaimRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balancer_pool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancerPoolAdaptorV1_ClaimRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerPoolAdaptorV1_ClaimRewards) ProtoMessage() {}

func (x *BalancerPoolAdaptorV1_ClaimRewards) ProtoReflect() protoreflect.Message {
	mi := &file_balancer_pool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerPoolAdaptorV1_ClaimRewards.ProtoReflect.Descriptor instead.
func (*BalancerPoolAdaptorV1_ClaimRewards) Descriptor() ([]byte, []int) {
	return file_balancer_pool_proto_rawDescGZIP(), []int{0, 7}
}

func (x *BalancerPoolAdaptorV1_ClaimRewards) GetGauge() string {
	if x != nil {
		return x.Gauge
	}
	return ""
}

var File_balancer_pool_proto protoreflect.FileDescriptor

var file_balancer_pool_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x0e,
	0x0a, 0x15, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x49,
	0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e,
	0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x62, 0x70,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x42, 0x50, 0x54, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x70, 0x74, 0x12,
	0x4f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x62, 0x70, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42,
	0x50, 0x54, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x70, 0x74,
	0x12, 0x55, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x64, 0x0a, 0x08,
	0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x70, 0x74, 0x12, 0x58,
	0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42,
	0x70, 0x74, 0x1a, 0x9e, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0x97, 0x02, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x70, 0x74, 0x12,
	0x56, 0x0a, 0x10, 0x73, 0x77, 0x61, 0x70, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x73, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x62, 0x0a,
	0x08, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x50, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x47,
	0x61, 0x75, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x1a, 0x66, 0x0a, 0x0a, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x50, 0x54, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x70,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x1a, 0x24, 0x0a, 0x0c, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x22,
	0x56, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x57, 0x41, 0x50, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x1a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_balancer_pool_proto_rawDescOnce sync.Once
	file_balancer_pool_proto_rawDescData = file_balancer_pool_proto_rawDesc
)

func file_balancer_pool_proto_rawDescGZIP() []byte {
	file_balancer_pool_proto_rawDescOnce.Do(func() {
		file_balancer_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_balancer_pool_proto_rawDescData)
	})
	return file_balancer_pool_proto_rawDescData
}

var file_balancer_pool_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_balancer_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_balancer_pool_proto_goTypes = []interface{}{
	(BalancerPoolAdaptorV1_SwapKind)(0),           // 0: steward.v4.BalancerPoolAdaptorV1.SwapKind
	(*BalancerPoolAdaptorV1)(nil),                 // 1: steward.v4.BalancerPoolAdaptorV1
	(*BalancerPoolAdaptorV1Calls)(nil),            // 2: steward.v4.BalancerPoolAdaptorV1Calls
	(*BalancerPoolAdaptorV1_SingleSwap)(nil),      // 3: steward.v4.BalancerPoolAdaptorV1.SingleSwap
	(*BalancerPoolAdaptorV1_SwapData)(nil),        // 4: steward.v4.BalancerPoolAdaptorV1.SwapData
	(*BalancerPoolAdaptorV1_JoinPool)(nil),        // 5: steward.v4.BalancerPoolAdaptorV1.JoinPool
	(*BalancerPoolAdaptorV1_ExitPoolRequest)(nil), // 6: steward.v4.BalancerPoolAdaptorV1.ExitPoolRequest
	(*BalancerPoolAdaptorV1_ExitPool)(nil),        // 7: steward.v4.BalancerPoolAdaptorV1.ExitPool
	(*BalancerPoolAdaptorV1_StakeBPT)(nil),        // 8: steward.v4.BalancerPoolAdaptorV1.StakeBPT
	(*BalancerPoolAdaptorV1_UnstakeBPT)(nil),      // 9: steward.v4.BalancerPoolAdaptorV1.UnstakeBPT
	(*BalancerPoolAdaptorV1_ClaimRewards)(nil),    // 10: steward.v4.BalancerPoolAdaptorV1.ClaimRewards
	(*RevokeApproval)(nil),                        // 11: steward.v4.RevokeApproval
}
var file_balancer_pool_proto_depIdxs = []int32{
	11, // 0: steward.v4.BalancerPoolAdaptorV1.revoke_approval:type_name -> steward.v4.RevokeApproval
	5,  // 1: steward.v4.BalancerPoolAdaptorV1.join_pool:type_name -> steward.v4.BalancerPoolAdaptorV1.JoinPool
	7,  // 2: steward.v4.BalancerPoolAdaptorV1.exit_pool:type_name -> steward.v4.BalancerPoolAdaptorV1.ExitPool
	8,  // 3: steward.v4.BalancerPoolAdaptorV1.stake_bpt:type_name -> steward.v4.BalancerPoolAdaptorV1.StakeBPT
	9,  // 4: steward.v4.BalancerPoolAdaptorV1.unstake_bpt:type_name -> steward.v4.BalancerPoolAdaptorV1.UnstakeBPT
	10, // 5: steward.v4.BalancerPoolAdaptorV1.claim_rewards:type_name -> steward.v4.BalancerPoolAdaptorV1.ClaimRewards
	1,  // 6: steward.v4.BalancerPoolAdaptorV1Calls.calls:type_name -> steward.v4.BalancerPoolAdaptorV1
	0,  // 7: steward.v4.BalancerPoolAdaptorV1.SingleSwap.kind:type_name -> steward.v4.BalancerPoolAdaptorV1.SwapKind
	3,  // 8: steward.v4.BalancerPoolAdaptorV1.JoinPool.swaps_before_join:type_name -> steward.v4.BalancerPoolAdaptorV1.SingleSwap
	4,  // 9: steward.v4.BalancerPoolAdaptorV1.JoinPool.swap_data:type_name -> steward.v4.BalancerPoolAdaptorV1.SwapData
	3,  // 10: steward.v4.BalancerPoolAdaptorV1.ExitPool.swaps_after_exit:type_name -> steward.v4.BalancerPoolAdaptorV1.SingleSwap
	4,  // 11: steward.v4.BalancerPoolAdaptorV1.ExitPool.swap_data:type_name -> steward.v4.BalancerPoolAdaptorV1.SwapData
	6,  // 12: steward.v4.BalancerPoolAdaptorV1.ExitPool.request:type_name -> steward.v4.BalancerPoolAdaptorV1.ExitPoolRequest
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_balancer_pool_proto_init() }
func file_balancer_pool_proto_init() {
	if File_balancer_pool_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_balancer_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1Calls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_SingleSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_SwapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_JoinPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_ExitPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_ExitPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_StakeBPT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_UnstakeBPT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balancer_pool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancerPoolAdaptorV1_ClaimRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_balancer_pool_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BalancerPoolAdaptorV1_RevokeApproval)(nil),
		(*BalancerPoolAdaptorV1_JoinPool_)(nil),
		(*BalancerPoolAdaptorV1_ExitPool_)(nil),
		(*BalancerPoolAdaptorV1_StakeBpt)(nil),
		(*BalancerPoolAdaptorV1_UnstakeBpt)(nil),
		(*BalancerPoolAdaptorV1_ClaimRewards_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_balancer_pool_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_balancer_pool_proto_goTypes,
		DependencyIndexes: file_balancer_pool_proto_depIdxs,
		EnumInfos:         file_balancer_pool_proto_enumTypes,
		MessageInfos:      file_balancer_pool_proto_msgTypes,
	}.Build()
	File_balancer_pool_proto = out.File
	file_balancer_pool_proto_rawDesc = nil
	file_balancer_pool_proto_goTypes = nil
	file_balancer_pool_proto_depIdxs = nil
}

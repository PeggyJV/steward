//
// Protos for function calls to the Pendle adaptor.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: pendle.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents call data for the Pendle adaptor.
type PendleAdaptorV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*PendleAdaptorV1_RevokeApproval
	//	*PendleAdaptorV1_MintSyFromToken_
	//	*PendleAdaptorV1_MintPyFromSy_
	//	*PendleAdaptorV1_SwapExactPtForYt_
	//	*PendleAdaptorV1_SwapExactYtForPt_
	//	*PendleAdaptorV1_AddLiquidityDualSyAndPt_
	//	*PendleAdaptorV1_RemoveLiquidityDualSyAndPt_
	//	*PendleAdaptorV1_RedeemPyToSy_
	//	*PendleAdaptorV1_RedeemSyToToken_
	Function isPendleAdaptorV1_Function `protobuf_oneof:"function"`
}

func (x *PendleAdaptorV1) Reset() {
	*x = PendleAdaptorV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1) ProtoMessage() {}

func (x *PendleAdaptorV1) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0}
}

func (m *PendleAdaptorV1) GetFunction() isPendleAdaptorV1_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *PendleAdaptorV1) GetRevokeApproval() *RevokeApproval {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_RevokeApproval); ok {
		return x.RevokeApproval
	}
	return nil
}

func (x *PendleAdaptorV1) GetMintSyFromToken() *PendleAdaptorV1_MintSyFromToken {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_MintSyFromToken_); ok {
		return x.MintSyFromToken
	}
	return nil
}

func (x *PendleAdaptorV1) GetMintPyFromSy() *PendleAdaptorV1_MintPyFromSy {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_MintPyFromSy_); ok {
		return x.MintPyFromSy
	}
	return nil
}

func (x *PendleAdaptorV1) GetSwapExactPtForYt() *PendleAdaptorV1_SwapExactPtForYt {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_SwapExactPtForYt_); ok {
		return x.SwapExactPtForYt
	}
	return nil
}

func (x *PendleAdaptorV1) GetSwapExactYtForPt() *PendleAdaptorV1_SwapExactYtForPt {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_SwapExactYtForPt_); ok {
		return x.SwapExactYtForPt
	}
	return nil
}

func (x *PendleAdaptorV1) GetAddLiquidityDualSyAndPt() *PendleAdaptorV1_AddLiquidityDualSyAndPt {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_AddLiquidityDualSyAndPt_); ok {
		return x.AddLiquidityDualSyAndPt
	}
	return nil
}

func (x *PendleAdaptorV1) GetRemoveLiquidityDualSyAndPt() *PendleAdaptorV1_RemoveLiquidityDualSyAndPt {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_RemoveLiquidityDualSyAndPt_); ok {
		return x.RemoveLiquidityDualSyAndPt
	}
	return nil
}

func (x *PendleAdaptorV1) GetRedeemPyToSy() *PendleAdaptorV1_RedeemPyToSy {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_RedeemPyToSy_); ok {
		return x.RedeemPyToSy
	}
	return nil
}

func (x *PendleAdaptorV1) GetRedeemSyToToken() *PendleAdaptorV1_RedeemSyToToken {
	if x, ok := x.GetFunction().(*PendleAdaptorV1_RedeemSyToToken_); ok {
		return x.RedeemSyToToken
	}
	return nil
}

type isPendleAdaptorV1_Function interface {
	isPendleAdaptorV1_Function()
}

type PendleAdaptorV1_RevokeApproval struct {
	// Represents function `revokeApproval(ERC20 asset, address spender)`
	RevokeApproval *RevokeApproval `protobuf:"bytes,1,opt,name=revoke_approval,json=revokeApproval,proto3,oneof"`
}

type PendleAdaptorV1_MintSyFromToken_ struct {
	// Represents function `mintSyFromToken(IPendleMarket market, uint256 minSyOut, TokenInput memory input)`
	MintSyFromToken *PendleAdaptorV1_MintSyFromToken `protobuf:"bytes,2,opt,name=mint_sy_from_token,json=mintSyFromToken,proto3,oneof"`
}

type PendleAdaptorV1_MintPyFromSy_ struct {
	// Represents function `mintPyFromSy(IPendleMarket market, uint256 netSyIn, uint256 minPyOut)`
	MintPyFromSy *PendleAdaptorV1_MintPyFromSy `protobuf:"bytes,3,opt,name=mint_py_from_sy,json=mintPyFromSy,proto3,oneof"`
}

type PendleAdaptorV1_SwapExactPtForYt_ struct {
	// Represents function `swapExactPtForYt(IPendleMarket market, uint256 exactPtIn, uint256 minYtOut, ApproxParams calldata guessTotalYtToSwap)`
	SwapExactPtForYt *PendleAdaptorV1_SwapExactPtForYt `protobuf:"bytes,4,opt,name=swap_exact_pt_for_yt,json=swapExactPtForYt,proto3,oneof"`
}

type PendleAdaptorV1_SwapExactYtForPt_ struct {
	// Represents function `swapExactYtForPt(IPendleMarket market, uint256 exactYtIn, uint256 minPtOut, ApproxParams calldata guessTotalPtToSwap)`
	SwapExactYtForPt *PendleAdaptorV1_SwapExactYtForPt `protobuf:"bytes,5,opt,name=swap_exact_yt_for_pt,json=swapExactYtForPt,proto3,oneof"`
}

type PendleAdaptorV1_AddLiquidityDualSyAndPt_ struct {
	// Represents function `addLiquidityDualSyAndPt(IPendleMarket market, uint256 netSyDesired, uint256 netPtDesired, uint256 minLpOut)`
	AddLiquidityDualSyAndPt *PendleAdaptorV1_AddLiquidityDualSyAndPt `protobuf:"bytes,6,opt,name=add_liquidity_dual_sy_and_pt,json=addLiquidityDualSyAndPt,proto3,oneof"`
}

type PendleAdaptorV1_RemoveLiquidityDualSyAndPt_ struct {
	// Represents function `removeLiquidityDualSyAndPt(IPendleMarket market, uint256 netLpToRemove, uint256 minSyOut, uint256 minPtOut)`
	RemoveLiquidityDualSyAndPt *PendleAdaptorV1_RemoveLiquidityDualSyAndPt `protobuf:"bytes,7,opt,name=remove_liquidity_dual_sy_and_pt,json=removeLiquidityDualSyAndPt,proto3,oneof"`
}

type PendleAdaptorV1_RedeemPyToSy_ struct {
	// Represents function `redeemPyToSy(IPendleMarket market, uint256 netPyIn, uint256 minSyOut)`
	RedeemPyToSy *PendleAdaptorV1_RedeemPyToSy `protobuf:"bytes,8,opt,name=redeem_py_to_sy,json=redeemPyToSy,proto3,oneof"`
}

type PendleAdaptorV1_RedeemSyToToken_ struct {
	// Represents function `redeemSyToToken(IPendleMarket market, uint256 netSyIn, TokenOutput memory output)`
	RedeemSyToToken *PendleAdaptorV1_RedeemSyToToken `protobuf:"bytes,9,opt,name=redeem_sy_to_token,json=redeemSyToToken,proto3,oneof"`
}

func (*PendleAdaptorV1_RevokeApproval) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_MintSyFromToken_) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_MintPyFromSy_) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_SwapExactPtForYt_) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_SwapExactYtForPt_) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_AddLiquidityDualSyAndPt_) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_RemoveLiquidityDualSyAndPt_) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_RedeemPyToSy_) isPendleAdaptorV1_Function() {}

func (*PendleAdaptorV1_RedeemSyToToken_) isPendleAdaptorV1_Function() {}

type PendleAdaptorV1Calls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*PendleAdaptorV1 `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *PendleAdaptorV1Calls) Reset() {
	*x = PendleAdaptorV1Calls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1Calls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1Calls) ProtoMessage() {}

func (x *PendleAdaptorV1Calls) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1Calls.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1Calls) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{1}
}

func (x *PendleAdaptorV1Calls) GetCalls() []*PendleAdaptorV1 {
	if x != nil {
		return x.Calls
	}
	return nil
}

type PendleAdaptorV1_SwapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The swap type
	SwapType int32 `protobuf:"varint,1,opt,name=swap_type,json=swapType,proto3" json:"swap_type,omitempty"`
	// The external router address.
	ExtRouter string `protobuf:"bytes,2,opt,name=ext_router,json=extRouter,proto3" json:"ext_router,omitempty"`
	// The external calldata.
	ExtCalldata string `protobuf:"bytes,3,opt,name=ext_calldata,json=extCalldata,proto3" json:"ext_calldata,omitempty"`
	// Whether or not scaling is needed.
	NeedScale bool `protobuf:"varint,4,opt,name=need_scale,json=needScale,proto3" json:"need_scale,omitempty"`
}

func (x *PendleAdaptorV1_SwapData) Reset() {
	*x = PendleAdaptorV1_SwapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_SwapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_SwapData) ProtoMessage() {}

func (x *PendleAdaptorV1_SwapData) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_SwapData.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_SwapData) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PendleAdaptorV1_SwapData) GetSwapType() int32 {
	if x != nil {
		return x.SwapType
	}
	return 0
}

func (x *PendleAdaptorV1_SwapData) GetExtRouter() string {
	if x != nil {
		return x.ExtRouter
	}
	return ""
}

func (x *PendleAdaptorV1_SwapData) GetExtCalldata() string {
	if x != nil {
		return x.ExtCalldata
	}
	return ""
}

func (x *PendleAdaptorV1_SwapData) GetNeedScale() bool {
	if x != nil {
		return x.NeedScale
	}
	return false
}

type PendleAdaptorV1_TokenInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input token address.
	TokenIn string `protobuf:"bytes,1,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	// The net amount of the input token.
	NetTokenIn string `protobuf:"bytes,2,opt,name=net_token_in,json=netTokenIn,proto3" json:"net_token_in,omitempty"`
	// The token address to mint SY.
	TokenMintSy string `protobuf:"bytes,3,opt,name=token_mint_sy,json=tokenMintSy,proto3" json:"token_mint_sy,omitempty"`
	// The Pendle swap address.
	PendleSwap string `protobuf:"bytes,4,opt,name=pendle_swap,json=pendleSwap,proto3" json:"pendle_swap,omitempty"`
	// The swap data.
	SwapData *PendleAdaptorV1_SwapData `protobuf:"bytes,5,opt,name=swap_data,json=swapData,proto3" json:"swap_data,omitempty"`
}

func (x *PendleAdaptorV1_TokenInput) Reset() {
	*x = PendleAdaptorV1_TokenInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_TokenInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_TokenInput) ProtoMessage() {}

func (x *PendleAdaptorV1_TokenInput) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_TokenInput.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_TokenInput) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PendleAdaptorV1_TokenInput) GetTokenIn() string {
	if x != nil {
		return x.TokenIn
	}
	return ""
}

func (x *PendleAdaptorV1_TokenInput) GetNetTokenIn() string {
	if x != nil {
		return x.NetTokenIn
	}
	return ""
}

func (x *PendleAdaptorV1_TokenInput) GetTokenMintSy() string {
	if x != nil {
		return x.TokenMintSy
	}
	return ""
}

func (x *PendleAdaptorV1_TokenInput) GetPendleSwap() string {
	if x != nil {
		return x.PendleSwap
	}
	return ""
}

func (x *PendleAdaptorV1_TokenInput) GetSwapData() *PendleAdaptorV1_SwapData {
	if x != nil {
		return x.SwapData
	}
	return nil
}

// Allows strategist to exchange a token for an SY.
//
// Represents function `mintSyFromToken(IPendleMarket market, uint256 minSyOut, TokenInput memory input)`
type PendleAdaptorV1_MintSyFromToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to mint SY from.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The minimum amount of SY to receive.
	MinSyOut string `protobuf:"bytes,2,opt,name=min_sy_out,json=minSyOut,proto3" json:"min_sy_out,omitempty"`
	// The input token address to exchange for SY.
	Input *PendleAdaptorV1_TokenInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *PendleAdaptorV1_MintSyFromToken) Reset() {
	*x = PendleAdaptorV1_MintSyFromToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_MintSyFromToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_MintSyFromToken) ProtoMessage() {}

func (x *PendleAdaptorV1_MintSyFromToken) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_MintSyFromToken.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_MintSyFromToken) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PendleAdaptorV1_MintSyFromToken) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_MintSyFromToken) GetMinSyOut() string {
	if x != nil {
		return x.MinSyOut
	}
	return ""
}

func (x *PendleAdaptorV1_MintSyFromToken) GetInput() *PendleAdaptorV1_TokenInput {
	if x != nil {
		return x.Input
	}
	return nil
}

// Allows strategist to exchange an SY for a PY.
//
// Represents function `mintPyFromSy(IPendleMarket market, uint256 netSyIn, uint256 minPyOut)`
type PendleAdaptorV1_MintPyFromSy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to mint PY from.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The net amount of SY to exchange for PY.
	NetSyIn string `protobuf:"bytes,2,opt,name=net_sy_in,json=netSyIn,proto3" json:"net_sy_in,omitempty"`
	// The minimum amount of PY to receive.
	MinPyOut string `protobuf:"bytes,3,opt,name=min_py_out,json=minPyOut,proto3" json:"min_py_out,omitempty"`
}

func (x *PendleAdaptorV1_MintPyFromSy) Reset() {
	*x = PendleAdaptorV1_MintPyFromSy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_MintPyFromSy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_MintPyFromSy) ProtoMessage() {}

func (x *PendleAdaptorV1_MintPyFromSy) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_MintPyFromSy.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_MintPyFromSy) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PendleAdaptorV1_MintPyFromSy) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_MintPyFromSy) GetNetSyIn() string {
	if x != nil {
		return x.NetSyIn
	}
	return ""
}

func (x *PendleAdaptorV1_MintPyFromSy) GetMinPyOut() string {
	if x != nil {
		return x.MinPyOut
	}
	return ""
}

// Allows strategist to exchange PT for YT.
//
// Represents function `swapExactPtForYt(IPendleMarket market, uint256 exactPtIn, uint256 minYtOut, ApproxParams calldata guessTotalYtToSwap)`
type PendleAdaptorV1_SwapExactPtForYt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to swap PT for YT.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The exact amount of PT to swap for YT.
	ExactPtIn string `protobuf:"bytes,2,opt,name=exact_pt_in,json=exactPtIn,proto3" json:"exact_pt_in,omitempty"`
	// The minimum amount of YT to receive.
	MinYtOut string `protobuf:"bytes,3,opt,name=min_yt_out,json=minYtOut,proto3" json:"min_yt_out,omitempty"`
	// The approximate parameters for the swap.
	GuessTotalYtToSwap *PendleAdaptorV1_ApproxParams `protobuf:"bytes,4,opt,name=guess_total_yt_to_swap,json=guessTotalYtToSwap,proto3" json:"guess_total_yt_to_swap,omitempty"`
}

func (x *PendleAdaptorV1_SwapExactPtForYt) Reset() {
	*x = PendleAdaptorV1_SwapExactPtForYt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_SwapExactPtForYt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_SwapExactPtForYt) ProtoMessage() {}

func (x *PendleAdaptorV1_SwapExactPtForYt) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_SwapExactPtForYt.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_SwapExactPtForYt) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PendleAdaptorV1_SwapExactPtForYt) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_SwapExactPtForYt) GetExactPtIn() string {
	if x != nil {
		return x.ExactPtIn
	}
	return ""
}

func (x *PendleAdaptorV1_SwapExactPtForYt) GetMinYtOut() string {
	if x != nil {
		return x.MinYtOut
	}
	return ""
}

func (x *PendleAdaptorV1_SwapExactPtForYt) GetGuessTotalYtToSwap() *PendleAdaptorV1_ApproxParams {
	if x != nil {
		return x.GuessTotalYtToSwap
	}
	return nil
}

// All of these fields are uint256
type PendleAdaptorV1_ApproxParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum guess for the swap.
	GuessMin string `protobuf:"bytes,1,opt,name=guess_min,json=guessMin,proto3" json:"guess_min,omitempty"`
	// The maximum guess for the swap.
	GuessMax string `protobuf:"bytes,2,opt,name=guess_max,json=guessMax,proto3" json:"guess_max,omitempty"`
	// The offchain guess for the swap.
	GuessOffchain string `protobuf:"bytes,3,opt,name=guess_offchain,json=guessOffchain,proto3" json:"guess_offchain,omitempty"`
	// The maximum number of iterations for the swap.
	// Every iteration, the diff between guessMin and guessMax will be divided by 2.
	MaxIteration string `protobuf:"bytes,4,opt,name=max_iteration,json=maxIteration,proto3" json:"max_iteration,omitempty"`
	// the max eps between the returned result & the correct result, base 1e18. Normally this number will be set to 1e15 (1e18/1000 = 0.1%)
	Eps string `protobuf:"bytes,5,opt,name=eps,proto3" json:"eps,omitempty"`
}

func (x *PendleAdaptorV1_ApproxParams) Reset() {
	*x = PendleAdaptorV1_ApproxParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_ApproxParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_ApproxParams) ProtoMessage() {}

func (x *PendleAdaptorV1_ApproxParams) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_ApproxParams.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_ApproxParams) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PendleAdaptorV1_ApproxParams) GetGuessMin() string {
	if x != nil {
		return x.GuessMin
	}
	return ""
}

func (x *PendleAdaptorV1_ApproxParams) GetGuessMax() string {
	if x != nil {
		return x.GuessMax
	}
	return ""
}

func (x *PendleAdaptorV1_ApproxParams) GetGuessOffchain() string {
	if x != nil {
		return x.GuessOffchain
	}
	return ""
}

func (x *PendleAdaptorV1_ApproxParams) GetMaxIteration() string {
	if x != nil {
		return x.MaxIteration
	}
	return ""
}

func (x *PendleAdaptorV1_ApproxParams) GetEps() string {
	if x != nil {
		return x.Eps
	}
	return ""
}

// Allows strategist to exchange YT for PT.
//
// Represents function `swapExactYtForPt(IPendleMarket market, uint256 exactYtIn, uint256 minPtOut, ApproxParams calldata guessTotalPtToSwap)`
type PendleAdaptorV1_SwapExactYtForPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to swap YT for PT.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The exact amount of YT to swap for PT.
	ExactYtIn string `protobuf:"bytes,2,opt,name=exact_yt_in,json=exactYtIn,proto3" json:"exact_yt_in,omitempty"`
	// The minimum amount of PT to receive.
	MinPtOut string `protobuf:"bytes,3,opt,name=min_pt_out,json=minPtOut,proto3" json:"min_pt_out,omitempty"`
	// The approximation parameters for the swap.
	GuessTotalPtToSwap *PendleAdaptorV1_ApproxParams `protobuf:"bytes,4,opt,name=guess_total_pt_to_swap,json=guessTotalPtToSwap,proto3" json:"guess_total_pt_to_swap,omitempty"`
}

func (x *PendleAdaptorV1_SwapExactYtForPt) Reset() {
	*x = PendleAdaptorV1_SwapExactYtForPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_SwapExactYtForPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_SwapExactYtForPt) ProtoMessage() {}

func (x *PendleAdaptorV1_SwapExactYtForPt) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_SwapExactYtForPt.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_SwapExactYtForPt) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PendleAdaptorV1_SwapExactYtForPt) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_SwapExactYtForPt) GetExactYtIn() string {
	if x != nil {
		return x.ExactYtIn
	}
	return ""
}

func (x *PendleAdaptorV1_SwapExactYtForPt) GetMinPtOut() string {
	if x != nil {
		return x.MinPtOut
	}
	return ""
}

func (x *PendleAdaptorV1_SwapExactYtForPt) GetGuessTotalPtToSwap() *PendleAdaptorV1_ApproxParams {
	if x != nil {
		return x.GuessTotalPtToSwap
	}
	return nil
}

// Allows strategist to add liquidity to a Pendle market.
//
// Represents function `addLiquidityDualSyAndPt(IPendleMarket market, uint256 netSyDesired, uint256 netPtDesired, uint256 minLpOut)`
type PendleAdaptorV1_AddLiquidityDualSyAndPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to add liquidity to.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The net amount of SY to add to the market.
	NetSyDesired string `protobuf:"bytes,2,opt,name=net_sy_desired,json=netSyDesired,proto3" json:"net_sy_desired,omitempty"`
	// The net amount of PT to add to the market.
	NetPtDesired string `protobuf:"bytes,3,opt,name=net_pt_desired,json=netPtDesired,proto3" json:"net_pt_desired,omitempty"`
	// The minimum amount of LP tokens to receive.
	MinLpOut string `protobuf:"bytes,4,opt,name=min_lp_out,json=minLpOut,proto3" json:"min_lp_out,omitempty"`
}

func (x *PendleAdaptorV1_AddLiquidityDualSyAndPt) Reset() {
	*x = PendleAdaptorV1_AddLiquidityDualSyAndPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_AddLiquidityDualSyAndPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_AddLiquidityDualSyAndPt) ProtoMessage() {}

func (x *PendleAdaptorV1_AddLiquidityDualSyAndPt) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_AddLiquidityDualSyAndPt.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_AddLiquidityDualSyAndPt) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 7}
}

func (x *PendleAdaptorV1_AddLiquidityDualSyAndPt) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_AddLiquidityDualSyAndPt) GetNetSyDesired() string {
	if x != nil {
		return x.NetSyDesired
	}
	return ""
}

func (x *PendleAdaptorV1_AddLiquidityDualSyAndPt) GetNetPtDesired() string {
	if x != nil {
		return x.NetPtDesired
	}
	return ""
}

func (x *PendleAdaptorV1_AddLiquidityDualSyAndPt) GetMinLpOut() string {
	if x != nil {
		return x.MinLpOut
	}
	return ""
}

// Allows strategist to remove liquidity from a Pendle market.
//
// Represents function `removeLiquidityDualSyAndPt(IPendleMarket market, uint256 netLpToRemove, uint256 minSyOut, uint256 minPtOut)`
type PendleAdaptorV1_RemoveLiquidityDualSyAndPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to remove liquidity from.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The net amount of LP tokens to remove from the market.
	NetLpToRemove string `protobuf:"bytes,2,opt,name=net_lp_to_remove,json=netLpToRemove,proto3" json:"net_lp_to_remove,omitempty"`
	// The minimum amount of SY to receive.
	MinSyOut string `protobuf:"bytes,3,opt,name=min_sy_out,json=minSyOut,proto3" json:"min_sy_out,omitempty"`
	// The minimum amount of PT to receive.
	MinPtOut string `protobuf:"bytes,4,opt,name=min_pt_out,json=minPtOut,proto3" json:"min_pt_out,omitempty"`
}

func (x *PendleAdaptorV1_RemoveLiquidityDualSyAndPt) Reset() {
	*x = PendleAdaptorV1_RemoveLiquidityDualSyAndPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_RemoveLiquidityDualSyAndPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_RemoveLiquidityDualSyAndPt) ProtoMessage() {}

func (x *PendleAdaptorV1_RemoveLiquidityDualSyAndPt) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_RemoveLiquidityDualSyAndPt.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_RemoveLiquidityDualSyAndPt) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 8}
}

func (x *PendleAdaptorV1_RemoveLiquidityDualSyAndPt) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_RemoveLiquidityDualSyAndPt) GetNetLpToRemove() string {
	if x != nil {
		return x.NetLpToRemove
	}
	return ""
}

func (x *PendleAdaptorV1_RemoveLiquidityDualSyAndPt) GetMinSyOut() string {
	if x != nil {
		return x.MinSyOut
	}
	return ""
}

func (x *PendleAdaptorV1_RemoveLiquidityDualSyAndPt) GetMinPtOut() string {
	if x != nil {
		return x.MinPtOut
	}
	return ""
}

// Allows strategist to redeem PY for SY.
//
// Represents function `redeemPyToSy(IPendleMarket market, uint256 netPyIn, uint256 minSyOut)`
type PendleAdaptorV1_RedeemPyToSy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to redeem PY from.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The net amount of PY to redeem for SY.
	NetPyIn string `protobuf:"bytes,2,opt,name=net_py_in,json=netPyIn,proto3" json:"net_py_in,omitempty"`
	// The minimum amount of SY to receive.
	MinSyOut string `protobuf:"bytes,3,opt,name=min_sy_out,json=minSyOut,proto3" json:"min_sy_out,omitempty"`
}

func (x *PendleAdaptorV1_RedeemPyToSy) Reset() {
	*x = PendleAdaptorV1_RedeemPyToSy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_RedeemPyToSy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_RedeemPyToSy) ProtoMessage() {}

func (x *PendleAdaptorV1_RedeemPyToSy) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_RedeemPyToSy.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_RedeemPyToSy) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 9}
}

func (x *PendleAdaptorV1_RedeemPyToSy) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_RedeemPyToSy) GetNetPyIn() string {
	if x != nil {
		return x.NetPyIn
	}
	return ""
}

func (x *PendleAdaptorV1_RedeemPyToSy) GetMinSyOut() string {
	if x != nil {
		return x.MinSyOut
	}
	return ""
}

type PendleAdaptorV1_TokenOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output token address.
	TokenOut string `protobuf:"bytes,1,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty"`
	// The minimum amount of the output token.
	MinTokenOut string `protobuf:"bytes,2,opt,name=min_token_out,json=minTokenOut,proto3" json:"min_token_out,omitempty"`
	// The token address to redeem SY.
	TokenRedeemSy string `protobuf:"bytes,3,opt,name=token_redeem_sy,json=tokenRedeemSy,proto3" json:"token_redeem_sy,omitempty"`
	// The Pendle swap address.
	PendleSwap string `protobuf:"bytes,4,opt,name=pendle_swap,json=pendleSwap,proto3" json:"pendle_swap,omitempty"`
	// The swap data.
	SwapData *PendleAdaptorV1_SwapData `protobuf:"bytes,5,opt,name=swap_data,json=swapData,proto3" json:"swap_data,omitempty"`
}

func (x *PendleAdaptorV1_TokenOutput) Reset() {
	*x = PendleAdaptorV1_TokenOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_TokenOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_TokenOutput) ProtoMessage() {}

func (x *PendleAdaptorV1_TokenOutput) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_TokenOutput.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_TokenOutput) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 10}
}

func (x *PendleAdaptorV1_TokenOutput) GetTokenOut() string {
	if x != nil {
		return x.TokenOut
	}
	return ""
}

func (x *PendleAdaptorV1_TokenOutput) GetMinTokenOut() string {
	if x != nil {
		return x.MinTokenOut
	}
	return ""
}

func (x *PendleAdaptorV1_TokenOutput) GetTokenRedeemSy() string {
	if x != nil {
		return x.TokenRedeemSy
	}
	return ""
}

func (x *PendleAdaptorV1_TokenOutput) GetPendleSwap() string {
	if x != nil {
		return x.PendleSwap
	}
	return ""
}

func (x *PendleAdaptorV1_TokenOutput) GetSwapData() *PendleAdaptorV1_SwapData {
	if x != nil {
		return x.SwapData
	}
	return nil
}

// Allows strategist to redeem SY for a token.
//
// Represents function `redeemSyToToken(IPendleMarket market, uint256 netSyIn, TokenOutput memory output)`
type PendleAdaptorV1_RedeemSyToToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the Pendle market to redeem SY from.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The net amount of SY to redeem for a token.
	NetSyIn string `protobuf:"bytes,2,opt,name=net_sy_in,json=netSyIn,proto3" json:"net_sy_in,omitempty"`
	// The output token address to receive.
	Output *PendleAdaptorV1_TokenOutput `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PendleAdaptorV1_RedeemSyToToken) Reset() {
	*x = PendleAdaptorV1_RedeemSyToToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendleAdaptorV1_RedeemSyToToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendleAdaptorV1_RedeemSyToToken) ProtoMessage() {}

func (x *PendleAdaptorV1_RedeemSyToToken) ProtoReflect() protoreflect.Message {
	mi := &file_pendle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendleAdaptorV1_RedeemSyToToken.ProtoReflect.Descriptor instead.
func (*PendleAdaptorV1_RedeemSyToToken) Descriptor() ([]byte, []int) {
	return file_pendle_proto_rawDescGZIP(), []int{0, 11}
}

func (x *PendleAdaptorV1_RedeemSyToToken) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PendleAdaptorV1_RedeemSyToToken) GetNetSyIn() string {
	if x != nil {
		return x.NetSyIn
	}
	return ""
}

func (x *PendleAdaptorV1_RedeemSyToToken) GetOutput() *PendleAdaptorV1_TokenOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_pendle_proto protoreflect.FileDescriptor

var file_pendle_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x15, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x5a, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x53,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69,
	0x6e, 0x74, 0x53, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x51, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x50, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x74, 0x50, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79,
	0x12, 0x5e, 0x0a, 0x14, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x70,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x79, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x45, 0x78, 0x61, 0x63, 0x74, 0x50, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x77, 0x61, 0x70, 0x45, 0x78, 0x61, 0x63, 0x74, 0x50, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x74,
	0x12, 0x5e, 0x0a, 0x14, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x79,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x45, 0x78, 0x61, 0x63, 0x74, 0x59, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x77, 0x61, 0x70, 0x45, 0x78, 0x61, 0x63, 0x74, 0x59, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x74,
	0x12, 0x74, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x75, 0x61, 0x6c, 0x53, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x48, 0x00, 0x52, 0x17, 0x61,
	0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x75, 0x61, 0x6c, 0x53,
	0x79, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x12, 0x7d, 0x0a, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f,
	0x73, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x75, 0x61, 0x6c,
	0x53, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x79,
	0x41, 0x6e, 0x64, 0x50, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f,
	0x70, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64,
	0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x50, 0x79, 0x54, 0x6f, 0x53, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x50, 0x79, 0x54, 0x6f, 0x53, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x5f, 0x73, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56,
	0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x79, 0x54, 0x6f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x79, 0x54, 0x6f, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x88, 0x01, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x1a,
	0xd1, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x41, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x85, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x3c, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x60, 0x0a, 0x0c, 0x4d,
	0x69, 0x6e, 0x74, 0x50, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x5f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x53, 0x79, 0x49, 0x6e, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x79, 0x4f, 0x75, 0x74, 0x1a, 0xc6, 0x01,
	0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x61, 0x63, 0x74, 0x50, 0x74, 0x46, 0x6f, 0x72,
	0x59, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x78,
	0x61, 0x63, 0x74, 0x5f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x61, 0x63, 0x74, 0x50, 0x74, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x79, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x59, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x67, 0x75, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x79, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x12, 0x67, 0x75, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x59, 0x74,
	0x54, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x1a, 0xa6, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x65, 0x73,
	0x73, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x78, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x73,
	0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x73, 0x1a,
	0xc6, 0x01, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x61, 0x63, 0x74, 0x59, 0x74, 0x46,
	0x6f, 0x72, 0x50, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x79, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x61, 0x63, 0x74, 0x59, 0x74, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x67, 0x75,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x12, 0x67, 0x75, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x74, 0x54, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x1a, 0x9b, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x79, 0x41,
	0x6e, 0x64, 0x50, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x53, 0x79, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x50,
	0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x4c, 0x70, 0x4f, 0x75, 0x74, 0x1a, 0x99, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x79,
	0x41, 0x6e, 0x64, 0x50, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a,
	0x10, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x4c, 0x70, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53,
	0x79, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x74, 0x4f,
	0x75, 0x74, 0x1a, 0x60, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x50, 0x79, 0x54, 0x6f,
	0x53, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x70, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x50, 0x79, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53,
	0x79, 0x4f, 0x75, 0x74, 0x1a, 0xda, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x75,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x41,
	0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50,
	0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x86, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x79, 0x54, 0x6f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x09, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x53, 0x79, 0x49, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x14, 0x50, 0x65, 0x6e, 0x64, 0x6c, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x6c,
	0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pendle_proto_rawDescOnce sync.Once
	file_pendle_proto_rawDescData = file_pendle_proto_rawDesc
)

func file_pendle_proto_rawDescGZIP() []byte {
	file_pendle_proto_rawDescOnce.Do(func() {
		file_pendle_proto_rawDescData = protoimpl.X.CompressGZIP(file_pendle_proto_rawDescData)
	})
	return file_pendle_proto_rawDescData
}

var file_pendle_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pendle_proto_goTypes = []interface{}{
	(*PendleAdaptorV1)(nil),                            // 0: steward.v4.PendleAdaptorV1
	(*PendleAdaptorV1Calls)(nil),                       // 1: steward.v4.PendleAdaptorV1Calls
	(*PendleAdaptorV1_SwapData)(nil),                   // 2: steward.v4.PendleAdaptorV1.SwapData
	(*PendleAdaptorV1_TokenInput)(nil),                 // 3: steward.v4.PendleAdaptorV1.TokenInput
	(*PendleAdaptorV1_MintSyFromToken)(nil),            // 4: steward.v4.PendleAdaptorV1.MintSyFromToken
	(*PendleAdaptorV1_MintPyFromSy)(nil),               // 5: steward.v4.PendleAdaptorV1.MintPyFromSy
	(*PendleAdaptorV1_SwapExactPtForYt)(nil),           // 6: steward.v4.PendleAdaptorV1.SwapExactPtForYt
	(*PendleAdaptorV1_ApproxParams)(nil),               // 7: steward.v4.PendleAdaptorV1.ApproxParams
	(*PendleAdaptorV1_SwapExactYtForPt)(nil),           // 8: steward.v4.PendleAdaptorV1.SwapExactYtForPt
	(*PendleAdaptorV1_AddLiquidityDualSyAndPt)(nil),    // 9: steward.v4.PendleAdaptorV1.AddLiquidityDualSyAndPt
	(*PendleAdaptorV1_RemoveLiquidityDualSyAndPt)(nil), // 10: steward.v4.PendleAdaptorV1.RemoveLiquidityDualSyAndPt
	(*PendleAdaptorV1_RedeemPyToSy)(nil),               // 11: steward.v4.PendleAdaptorV1.RedeemPyToSy
	(*PendleAdaptorV1_TokenOutput)(nil),                // 12: steward.v4.PendleAdaptorV1.TokenOutput
	(*PendleAdaptorV1_RedeemSyToToken)(nil),            // 13: steward.v4.PendleAdaptorV1.RedeemSyToToken
	(*RevokeApproval)(nil),                             // 14: steward.v4.RevokeApproval
}
var file_pendle_proto_depIdxs = []int32{
	14, // 0: steward.v4.PendleAdaptorV1.revoke_approval:type_name -> steward.v4.RevokeApproval
	4,  // 1: steward.v4.PendleAdaptorV1.mint_sy_from_token:type_name -> steward.v4.PendleAdaptorV1.MintSyFromToken
	5,  // 2: steward.v4.PendleAdaptorV1.mint_py_from_sy:type_name -> steward.v4.PendleAdaptorV1.MintPyFromSy
	6,  // 3: steward.v4.PendleAdaptorV1.swap_exact_pt_for_yt:type_name -> steward.v4.PendleAdaptorV1.SwapExactPtForYt
	8,  // 4: steward.v4.PendleAdaptorV1.swap_exact_yt_for_pt:type_name -> steward.v4.PendleAdaptorV1.SwapExactYtForPt
	9,  // 5: steward.v4.PendleAdaptorV1.add_liquidity_dual_sy_and_pt:type_name -> steward.v4.PendleAdaptorV1.AddLiquidityDualSyAndPt
	10, // 6: steward.v4.PendleAdaptorV1.remove_liquidity_dual_sy_and_pt:type_name -> steward.v4.PendleAdaptorV1.RemoveLiquidityDualSyAndPt
	11, // 7: steward.v4.PendleAdaptorV1.redeem_py_to_sy:type_name -> steward.v4.PendleAdaptorV1.RedeemPyToSy
	13, // 8: steward.v4.PendleAdaptorV1.redeem_sy_to_token:type_name -> steward.v4.PendleAdaptorV1.RedeemSyToToken
	0,  // 9: steward.v4.PendleAdaptorV1Calls.calls:type_name -> steward.v4.PendleAdaptorV1
	2,  // 10: steward.v4.PendleAdaptorV1.TokenInput.swap_data:type_name -> steward.v4.PendleAdaptorV1.SwapData
	3,  // 11: steward.v4.PendleAdaptorV1.MintSyFromToken.input:type_name -> steward.v4.PendleAdaptorV1.TokenInput
	7,  // 12: steward.v4.PendleAdaptorV1.SwapExactPtForYt.guess_total_yt_to_swap:type_name -> steward.v4.PendleAdaptorV1.ApproxParams
	7,  // 13: steward.v4.PendleAdaptorV1.SwapExactYtForPt.guess_total_pt_to_swap:type_name -> steward.v4.PendleAdaptorV1.ApproxParams
	2,  // 14: steward.v4.PendleAdaptorV1.TokenOutput.swap_data:type_name -> steward.v4.PendleAdaptorV1.SwapData
	12, // 15: steward.v4.PendleAdaptorV1.RedeemSyToToken.output:type_name -> steward.v4.PendleAdaptorV1.TokenOutput
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pendle_proto_init() }
func file_pendle_proto_init() {
	if File_pendle_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pendle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1Calls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_SwapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_TokenInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_MintSyFromToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_MintPyFromSy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_SwapExactPtForYt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_ApproxParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_SwapExactYtForPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_AddLiquidityDualSyAndPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_RemoveLiquidityDualSyAndPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_RedeemPyToSy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_TokenOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendle_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendleAdaptorV1_RedeemSyToToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pendle_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PendleAdaptorV1_RevokeApproval)(nil),
		(*PendleAdaptorV1_MintSyFromToken_)(nil),
		(*PendleAdaptorV1_MintPyFromSy_)(nil),
		(*PendleAdaptorV1_SwapExactPtForYt_)(nil),
		(*PendleAdaptorV1_SwapExactYtForPt_)(nil),
		(*PendleAdaptorV1_AddLiquidityDualSyAndPt_)(nil),
		(*PendleAdaptorV1_RemoveLiquidityDualSyAndPt_)(nil),
		(*PendleAdaptorV1_RedeemPyToSy_)(nil),
		(*PendleAdaptorV1_RedeemSyToToken_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pendle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pendle_proto_goTypes,
		DependencyIndexes: file_pendle_proto_depIdxs,
		MessageInfos:      file_pendle_proto_msgTypes,
	}.Build()
	File_pendle_proto = out.File
	file_pendle_proto_rawDesc = nil
	file_pendle_proto_goTypes = nil
	file_pendle_proto_depIdxs = nil
}
